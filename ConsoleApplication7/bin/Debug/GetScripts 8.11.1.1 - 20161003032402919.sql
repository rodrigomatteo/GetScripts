/*
Changeset: 5700
Comment:   ST66485 (Ref. IM10965)
Committer: CLARKSTEEL\palominom
Creation Date: 08/07/2016 09:49:06 a.m.
*/

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SPU_IPL_ORDER_ITEMS_MILL_SCHEDULE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[SPU_IPL_ORDER_ITEMS_MILL_SCHEDULE] AS' 
END
GO

ALTER PROCEDURE [dbo].[SPU_IPL_ORDER_ITEMS_MILL_SCHEDULE]     
(      
  @PRODUCTION_PLANT_ID INT,      
  @MACHINE_CODE VARCHAR(20),
  @PRODUCT_ID INTEGER,
  @PRODUCTION_DATE DATETIME,
  @SO_NUMBER VARCHAR(20)
)      
AS
BEGIN



DECLARE
      @IPL_MILL_ID		INT,
      @DOWNLOAD_DATE	DATETIME,
      @DUMMY_ID			INT

	SET @DOWNLOAD_DATE = NULL;     
    SET @DUMMY_ID = 10000000; 
/*----------------------------------------------------------------*
  Getting IPL Mill ID
*----------------------------------------------------------------*/
	  SELECT 
		@IPL_MILL_ID = PLANT.IPL_MILL_ID
	  FROM PLANT_INFO PLANT(NOLOCK) 
	  WHERE PLANT.PARTNER_ID = @PRODUCTION_PLANT_ID;

  
SELECT 
		CAST(@DUMMY_ID+SOD.SO_DETAIL_ID AS INTEGER) AS SHOP_ORDER_ID,
 		SO.SO_NUMBER AS ORDER_NO,
 		SO.PRODUCTION_PLANT_ID AS PLANT_ID,
 		PL.PARTNER_CODE AS PLANT_CODE,
 		'' AS BUILT_TO,
 		'' AS BUILT_TO_NAME,
 		SOD.MILL_ID,
 		M.MACHINE_CODE,
 		NULL AS SEQ,
 		'' AS SEQ1,
 		SOD.PFS,
 		'' AS DOWNLOAD_USER,
 		'' AS DOWNLOAD_FILE,
 		@DOWNLOAD_DATE AS DOWNLOAD_DATE,
 		'' AS PRINT_LABEL_STATUS,
 		'' AS PRINT_LABEL_STATUS_NAME,
 		'' AS EVER_PRINTED_FLAG,
 		CAST(SOD.QUANTITY AS INTEGER) AS TOTAL_REMAINING_QTY,
 		SOD.TOTAL_WEIGHT AS TOTAL_REMAINING_WEIGHT,
 		SOD.TOTAL_LENGTH AS TOTAL_REMAINING_LENGTH,
 		SOD.TOTAL_WEIGHT,
 		SOD.TOTAL_LENGTH,
 		SOD.UNIT_PACK,
 		'' AS PRODUCT_UNIT_PACK,
 		CAST(SOD.FEET AS VARCHAR(10)) AS MIN_FEET,
 		CAST(SOD.FEET AS VARCHAR(10)) AS MAX_FEET,
 		CAST('' AS VARCHAR(10)) AS SHOP_ORDER_SHORTEST_LENGTH,
 		'' AS SHIP_COMMENT,
 		SOD.PRODUCT_ID,
 		P.PRODUCT_NO,
 		P.NAME AS PRODUCT_NAME,
 		P.PRODUCT_CATEGORY_CODE,
 		SOD.KSI_CODE,
 		SOD.COAT_SPEC_CODE,
 		SOD.HOT_DIPPED_FLAG,
 		SOD.P_U,
 		'' AS PUNCH_FLAG_CODE,
 		PT.PUNCH_TYPE_CODE,
 		PT.NAME AS PUNCH_TYPE_NAME,
 		SO.SO_ID,
 		SO.SO_NUMBER,
 		SO.PROMISE_DATE,
 		'' AS STATUS,
 		'' AS STATUS_NAME,
 		SO.CUSTOMER_ID,
 		CU.PARTNER_CODE AS CUSTOMER_CODE,
 		SO.CUSTOMER_NAME,
 		SO.IS_HAPPY_PACK,
 		COALESCE(SOD.IS_UPC,'0') AS UPC,
 		'' AS MANUFACTURE_TYPE_CODE,
 		SO.SENSITIVE_CUSTOMER_FLAG,
 		( SELECT MIN(DBO.FN_DATE(TR.SCHEDULED_SHIP_DATE) )
 		  FROM TRUCK_BOOKING TB (NOLOCK)
 		    JOIN TRUCK_ROUTE_STOP TRS (NOLOCK) ON TB.TRUCK_ROUTE_STOP_ID = TRS.TRUCK_ROUTE_STOP_ID
 		    JOIN TRUCK_ROUTE TR (NOLOCK) ON TR.TRUCK_ROUTE_ID = TRS.TRUCK_ROUTE_ID
 		  WHERE TB.SO_ID = SO.SO_ID
 		    AND TR.TRUCK_ROUTE_STATUS_CODE <> 'S') AS TRUCK_FIRST_SCHED_SHIP_DATE,
 		MRP.STEEL_RECV_DATE,
 		SOD.PRODUCTION_DATE,
 		NULL AS WIP_NBR_ID,
 		COALESCE(PPL.KSI_CODE, P.KSI_CODE) AS PRODUCT_KSI_CODE,
 		COALESCE(PPL.COAT_SPEC_CODE,P.COAT_SPEC_CODE) AS PRODUCT_COAT_SPEC_CODE,
 		NULL AS SHOP_ORDER_LENGTHS,
 		NULL AS CUTBACK_ORDERS,
 		SOA.PROVINCE AS CITY,
 		ST.STATE_CODE AS STATE_CODE,
		1 AS IS_DETAIL_ROUTED

FROM SALES_ORDER_DETAIL SOD (NOLOCK)
JOIN SALES_ORDER_DETAIL_ASSOCIATION SODA (NOLOCK) ON SODA.SOURCE_SO_DETAIL_ID = SOD.SO_DETAIL_ID
JOIN SALES_ORDER SO (NOLOCK) ON SO.SO_ID = SOD.SO_ID
JOIN SALES_ORDER_DETAIL SOD_TARGET (NOLOCK) ON SOD_TARGET.SO_DETAIL_ID = SODA.TARGET_SO_DETAIL_ID
JOIN SALES_ORDER SO_TARGET (NOLOCK) ON SO_TARGET.SO_ID = SOD_TARGET.SO_ID
JOIN PRODUCT P (NOLOCK) ON P.PRODUCT_ID = SOD.PRODUCT_ID
JOIN MACHINE M (NOLOCK) ON M.MACHINE_ID = SOD.MILL_ID
JOIN GENERAL_TABLE PU (NOLOCK) ON PU.TABLE_NAME = 'POD_PUNCH' AND PU.CODE = SOD.P_U     
JOIN PARTNER CU (NOLOCK) ON CU.PARTNER_ID = SO.CUSTOMER_ID   
JOIN PARTNER PL (NOLOCK) ON SO.PRODUCTION_PLANT_ID = PL.PARTNER_ID
LEFT JOIN PRODUCT_PLANT PPL (NOLOCK) ON P.PRODUCT_ID = PPL.PRODUCT_ID AND SO.PRODUCTION_PLANT_ID = PPL.PARTNER_ID
LEFT JOIN PUNCH_TYPE PT (NOLOCK) ON SOD.PUNCH_TYPE_CODE = PT.PUNCH_TYPE_CODE
LEFT JOIN SALES_ORDER_ADDRESS SOA (NOLOCK) ON SOA.SO_ID = SO.SO_ID AND SOA.ADDRESS_TYPE='SA'
LEFT JOIN STATE ST (NOLOCK) ON ST.STATE_ID = SOA.STATE_ID
LEFT JOIN MRP_DETAIL MRP_DET (NOLOCK) ON MRP_DET.SO_DETAIL_ID = SOD.SO_DETAIL_ID
LEFT JOIN MRP MRP (NOLOCK) ON MRP.MRP_ID = MRP_DET.MRP_ID                        
                        
                            
WHERE
SO.PRODUCTION_PLANT_ID = ISNULL(@PRODUCTION_PLANT_ID, SO.PRODUCTION_PLANT_ID)
AND (@MACHINE_CODE IS NULL OR M.MACHINE_CODE = @MACHINE_CODE)
AND (SOD.PRODUCT_ID = ISNULL(@PRODUCT_ID, SOD.PRODUCT_ID))
AND (COALESCE(SOD.PRODUCTION_DATE,'') = COALESCE(@PRODUCTION_DATE, SOD.PRODUCTION_DATE, ''))
AND SO.SO_NUMBER = ISNULL(@SO_NUMBER, SO.SO_NUMBER)
AND SOD_TARGET.STATUS NOT IN ('CAN','CLO')
AND SO_TARGET.SALES_ORDER_SUB_TYPE_CODE NOT IN('DSH')
AND SOD.STATUS IN ('IPL', 'PRD');

END;

GO

/*
Changeset: 5700
Comment:   ST66485 (Ref. IM10965)
Committer: CLARKSTEEL\palominom
Creation Date: 08/07/2016 09:49:06 a.m.
*/

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SPU_RF_MANAGE_COIL_MIXING_PROCESS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[SPU_RF_MANAGE_COIL_MIXING_PROCESS] AS' 
END
GO
ALTER PROCEDURE [dbo].[SPU_RF_MANAGE_COIL_MIXING_PROCESS]
(
	@PLANT_ID         INT,
	@COIL_LIST        VARCHAR(MAX),       
	@OUTPUT_TAGS		INT,
	@WEIGHT				DECIMAL(19,2),
	@PRODUCT_NO			VARCHAR(20),
	@USER_CODE			VARCHAR(20),
	@MODULE_CODE      VARCHAR(20)

)
AS
BEGIN TRY

	CREATE TABLE #TMP_COILS_MIXED(
      IDE            INT IDENTITY(1,1),
      TAG_NO         VARCHAR(10) collate SQL_Latin1_General_CP1_CI_AS,
      SCALE_WEIGHT   DECIMAL(19,2)
   )
   
   CREATE TABLE #TMP_NEW_COILS(
		IDE            INT IDENTITY(1,1),
      TAG_NO         VARCHAR(10) collate SQL_Latin1_General_CP1_CI_AS,
   )
   
   CREATE TABLE #TMP_COST_NEW_COILS(
      IDE            INT IDENTITY(1,1),
      COST_TYPE      VARCHAR(3),
      COST           DECIMAL(19,3)
   )
   
   CREATE TABLE #TMP_CLOSE_COILS_MIXED(
      TAG_NO         VARCHAR(10) collate SQL_Latin1_General_CP1_CI_AS,
   )
   
   DECLARE
	   @CURSOR_MIXED								INT,
	   @TOTREG_MIXED								INT,
	   @CURSOR										INT,
	   @TOTREG										INT,
	   @FIRST_COIL									VARCHAR(10),
	   @NEW_TAG_NO								    VARCHAR(10),
	   @ORIGINAL_PRODUCT_NO						    VARCHAR(20),
	   @NEW_PRODUCT_ID	   					        INT,
	   @WAREHOUSE_LOCATION_ID_FIRST_COIL	        INT,
	   @WAREHOUSE_LOCATION_ID					    INT,
	   @TAG_NO										VARCHAR(10),
	   @WEIGHT_TOTAL								DECIMAL(19,2),
	   @CURSOR_COST								    INT,
	   @TOT_REG_COST								INT,
	   @COST_TYPE									CHAR(3),
	   @COST										DECIMAL(19,3),
	   @COST_TOT									DECIMAL(19,3),
	   @PURCHASING_GROUP                            VARCHAR(8),
	   --IM6408
	   @PREV_MASTER_TAG_NO                          VARCHAR(10) 
	   
  
   DECLARE @MSG VARCHAR(70) ;  
   SET @MSG = ''; 
   
   -- GET COILS TO MIXED
   INSERT INTO #TMP_COILS_MIXED
   SELECT T.TAG_NO, T.SCALE_WEIGHT 
   FROM DBO.FN_SPLIT_LIST(@COIL_LIST,',') F
   INNER JOIN TAG T (NOLOCK) ON T.TAG_NO = F.VALUE
   ORDER BY F.id ASC
   
   
   IF((SELECT COUNT(*) FROM #TMP_COILS_MIXED) = 0)
   BEGIN
		DROP TABLE #TMP_COILS_MIXED
         
        SET @MSG = DBO.FN_GET_MSG_BY_NAME(DBO.FN_LANG_USER_CODE(@USER_CODE), 'NO_COILS_TO_BE_MIXED', NULL, NULL, NULL, NULL);
		RAISERROR(@MSG,16,1)
		RETURN -1
   END
   ELSE
   BEGIN
   		
		--
		SELECT 
		   @NEW_PRODUCT_ID   = PRODUCT_ID,
		   @PURCHASING_GROUP = PURCHASING_GROUP
		FROM PRODUCT (NOLOCK)
		WHERE PRODUCT_NO = @PRODUCT_NO AND PRODUCT_CATEGORY_CODE = 'S' --SLIT COIL
		
		IF @NEW_PRODUCT_ID IS NULL 
		BEGIN
			SET @MSG = DBO.FN_GET_MSG_BY_NAME(DBO.FN_LANG_USER_CODE(@USER_CODE), 'PRODUCT_NOT_VALID_TO_MIXED', NULL, NULL, NULL, NULL);
			RAISERROR(@MSG,16,1)
			RETURN -1
		END 
		
		-- **************************************************************************************
		-- COILS MIXED
		-- **************************************************************************************
		SET @CURSOR_MIXED = 1
		SELECT @TOTREG_MIXED = COUNT(*) FROM #TMP_COILS_MIXED
		
		WHILE (@CURSOR_MIXED <= @TOTREG_MIXED)
		BEGIN
			-- 
			SELECT
				@TAG_NO = NULL,
				@WAREHOUSE_LOCATION_ID = NULL
			
			SELECT
				@TAG_NO =  TAG_NO
			FROM #TMP_COILS_MIXED WHERE IDE = @CURSOR_MIXED
			
			SELECT
				@WAREHOUSE_LOCATION_ID = IA.WAREHOUSE_LOCATION_ID
			FROM TAG T (NOLOCK) 
			INNER JOIN INVENTORY_ACTIVITY IA (NOLOCK) ON T.LAST_INVENTORY_ACTIVITY_ID = IA.INVENTORY_ACTIVITY_ID
			WHERE T.TAG_NO = @TAG_NO
			
			
			-- Update the processor module of the coils mixed
			UPDATE TAG SET
			   PROCESSOR_MODULE_CODE = 'MIXING'
         WHERE TAG_NO = @TAG_NO
         
         			
			-- INSERT MIX ACTIVITY
			EXEC SPU_RF_INS_TAG_INV_ACT 'MIX',@TAG_NO,@WAREHOUSE_LOCATION_ID,@USER_CODE,NULL,NULL,NULL,NULL;
			
			
			-- CLOSE THE MIXED COIL
			INSERT INTO #TMP_CLOSE_COILS_MIXED
		   EXEC SPU_RF_CLOSE_TAG_ACTIVITY @PLANT_ID, @TAG_NO, NULL, NULL, @USER_CODE;
			
			SET @CURSOR_MIXED = @CURSOR_MIXED + 1
		END 
		
		-- ************************************************************************************************
		-- CALCULATE COST TO NEW COILS
		-- ************************************************************************************************

		-- ----------------------------------------------------------		
		-- Cost components that are calculated using the Coil Weight. 
		-- ----------------------------------------------------------
		
		SELECT 
	      @WEIGHT_TOTAL = SUM(SCALE_WEIGHT)
		FROM #TMP_COILS_MIXED T
   	WHERE EXISTS ( SELECT '1' 
                  	FROM TAG_ADDITIONAL_COST TAC (NOLOCK)
                  	WHERE TAC.TAG_NO = T.TAG_NO
                    	  AND TAC.COST_TYPE_CODE = 'BAS'
                 	 )

		
		INSERT INTO #TMP_COST_NEW_COILS               
		SELECT 
      	A.COST_TYPE_CODE AS COST_TYPE, 
     		(SUM( B.SCALE_WEIGHT * (A.COST/100.000) ) / @WEIGHT_TOTAL) * 100.000  AS COST -- COST CWT
   	FROM TAG_ADDITIONAL_COST A (NOLOCK)
   	INNER JOIN #TMP_COILS_MIXED B ON A.TAG_NO =  B.TAG_NO
   	INNER JOIN COST_TYPE C (NOLOCK) ON A.COST_TYPE_CODE = C.COST_TYPE_CODE
   	WHERE ISNULL(A.COST,0.000) > 0.000
     	  AND C.VALUE_TYPE = 'A'
	   GROUP BY A.COST_TYPE_CODE     
   	
   		 
		--FREIGHT - FRE
		INSERT INTO #TMP_COST_NEW_COILS               
		SELECT 
      	A.COST_TYPE_CODE AS COST_TYPE, 
     		(SUM( B.SCALE_WEIGHT * (A.COST/100.000) ) / @WEIGHT_TOTAL) * 100.000  AS COST -- COST CWT
   	FROM TAG_ADDITIONAL_COST A (NOLOCK)
   	INNER JOIN #TMP_COILS_MIXED B ON A.TAG_NO =  B.TAG_NO
   	INNER JOIN COST_TYPE C (NOLOCK) ON A.COST_TYPE_CODE = C.COST_TYPE_CODE
   	WHERE ISNULL(A.COST,0.000) > 0.000
     	  AND C.COST_TYPE_CODE = 'FRE'
	   GROUP BY A.COST_TYPE_CODE    
	   	 
		-- --------------------------------------------------------------	   	  
		-- Cost components that arenÆt calculated using the Coil Weight
		-- --------------------------------------------------------------	   	  
		
		INSERT INTO #TMP_COST_NEW_COILS               
	   SELECT 
      	A.COST_TYPE_CODE AS COST_TYPE,
      	SUM(COST) AS COST
	   FROM TAG_ADDITIONAL_COST A (NOLOCK)
	   INNER JOIN #TMP_COILS_MIXED B ON A.TAG_NO =  B.TAG_NO
	   INNER JOIN COST_TYPE C (NOLOCK) ON A.COST_TYPE_CODE = C.COST_TYPE_CODE
	   WHERE ISNULL(A.COST,0.000) > 0.000
	     AND C.VALUE_TYPE = 'W' AND C.COST_TYPE_CODE NOT IN ('FRE')
	   GROUP BY A.COST_TYPE_CODE 
	   
	   
		
		-- ************************************************************************************************
		-- CREATE NEW COILS
		-- ************************************************************************************************
  	
   	-- 
		SET @CURSOR = 1
		SET @TOTREG = @OUTPUT_TAGS

		-- **************************************************************************************
		-- GET INFO FIRST SCANNED COIL
   	-- **************************************************************************************
   	SELECT	
   		@FIRST_COIL =  TAG_NO
		FROM #TMP_COILS_MIXED WHERE IDE = 1 -- FIRST COIL SCANNED
		
		
	INSERT INTO MIXED_COILS
	SELECT @FIRST_COIL, TAG_NO, @USER_CODE, GETDATE()
	FROM #TMP_COILS_MIXED;
		
	   --
		SELECT
			@ORIGINAL_PRODUCT_NO 				 = PRODUCT_NO,
			@WAREHOUSE_LOCATION_ID_FIRST_COIL    = IA.WAREHOUSE_LOCATION_ID,
			--IM6408
			@PREV_MASTER_TAG_NO                  = T.PREV_MASTER_TAG_NO
		FROM PRODUCT P (NOLOCK)			
		INNER JOIN TAG T (NOLOCK) ON P.PRODUCT_ID =  T.PRODUCT_ID
		INNER JOIN INVENTORY_ACTIVITY IA (NOLOCK) ON T.LAST_INVENTORY_ACTIVITY_ID = IA.INVENTORY_ACTIVITY_ID
		WHERE T.TAG_NO = @FIRST_COIL
   
   	-- ****************************************************************************************
   	
   	WHILE (@CURSOR < = @TOTREG)
   	BEGIN
   	
   		SELECT 
   			@NEW_TAG_NO = NULL,
   			@COST_TOT   = 0.000,
   			@COST			= 0.000,
   			@COST_TYPE  = ''
   			
   		
   		-- ************************************************************************************
   		-- CREATE A NEW COIL BASED ON THE INFORMATION OF THE FIRST SCANNED COIL 
   		-- ************************************************************************************
			EXEC SPU_RF_CLONE_A_COIL @FIRST_COIL,@USER_CODE, '0', @MODULE_CODE, @NEW_TAG_NO OUTPUT;

			
			-- ************************************************************************************
			-- INSERT NEW COILS
			-- ************************************************************************************
			INSERT INTO #TMP_NEW_COILS
			SELECT @NEW_TAG_NO
   		
		-- ************************************************************************************
   		-- UPDATE TAG
   		-- ************************************************************************************
		
			
   		UPDATE TAG Set 
		      SCALE_WEIGHT       = @WEIGHT / @OUTPUT_TAGS,
		      PRODUCED_SETUP_ID  = NULL,
		      OFFSET_YIELD       = NULL,
		      TAG_TEST_STATUS    = 'N', -- No Testing Required
		      COSTED_FROM_PARENT = NULL,
		      PARENT_TAG_NO = @FIRST_COIL
		      --IM6408
		      ,PREV_MASTER_TAG_NO=@PREV_MASTER_TAG_NO
		   WHERE TAG_NO = @NEW_TAG_NO;
   		
   		-- ************************************************************************************
   		-- ACTIVATE THE NEW COIL
   		-- ************************************************************************************
		   EXEC SPU_RF_ACTIVATE_TAG_ACTIVITY @NEW_TAG_NO, @USER_CODE
		   
  		
			-- ************************************************************************************
		   -- PRODUCT
		   -- ************************************************************************************
		   UPDATE TAG SET
		   	PRODUCT_ID = @NEW_PRODUCT_ID,
		   	PURCHASING_GROUP = @PURCHASING_GROUP
			WHERE TAG_NO = @NEW_TAG_NO		   	
		   
		   IF @ORIGINAL_PRODUCT_NO <> @PRODUCT_NO
		   BEGIN
		   	EXEC SPU_RF_INS_TAG_INV_ACT 'PNC',@NEW_TAG_NO,@WAREHOUSE_LOCATION_ID_FIRST_COIL,@USER_CODE,NULL,NULL,NULL,NULL;
		   END
		   
		   
		   -- **************************************************************************************
		   -- REGISTER COST TO NEW COILS
		   -- **************************************************************************************
			SET @CURSOR_COST = 1
			SELECT @TOT_REG_COST = COUNT (*) FROM #TMP_COST_NEW_COILS
			
			WHILE (@CURSOR_COST <=@TOT_REG_COST)
	   	BEGIN
		      SELECT
		         @COST_TYPE = COST_TYPE,
		         @COST      = COST
		      FROM #TMP_COST_NEW_COILS           
		      WHERE IDE = @CURSOR_COST
      
      		EXECUTE SPU_INS_TAG_ADDITIONAL_COST_NO_ACCUMULATE @NEW_TAG_NO, @COST_TYPE, @COST, @USER_CODE, @MODULE_CODE, NULL, NULL
      
      		SET @CURSOR_COST = @CURSOR_COST + 1
		  	END
   
			-- UPDATE COST FIELDS
		   SELECT
		      @COST_TOT = SUM(COST)
		   FROM #TMP_COST_NEW_COILS         
		   
		   UPDATE TAG SET 
		      FREIGHT   = dbo.FN_GET_COST(@NEW_TAG_NO, 'INF'), 
		      COIL_COST = @COST_TOT
		   WHERE TAG_NO = @NEW_TAG_NO;
		   	  
			----		   	  
		   		
			SET @CURSOR = @CURSOR + 1
			
		END

   END
   
   SELECT TAG_NO FROM #TMP_NEW_COILS
   
   -- DROP TABLES TEMPORAL
   DROP TABLE #TMP_COILS_MIXED
   DROP TABLE #TMP_NEW_COILS
   DROP TABLE #TMP_COST_NEW_COILS
   DROP TABLE #TMP_CLOSE_COILS_MIXED

END TRY
BEGIN CATCH
  DECLARE @ERRMSG NVARCHAR(4000), @ERRSEVERITY INT
  SELECT @ERRMSG = ERROR_MESSAGE(),
         @ERRSEVERITY = ERROR_SEVERITY()
  RAISERROR(@ERRMSG, @ERRSEVERITY, 1)
  RETURN @ERRSEVERITY;
END CATCH

GO

/*
Changeset: 5700
Comment:   ST66485 (Ref. IM10965)
Committer: CLARKSTEEL\palominom
Creation Date: 08/07/2016 09:49:06 a.m.
*/

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SPU_SHOP_ORDER_MILL_SCHEDULE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[SPU_SHOP_ORDER_MILL_SCHEDULE] AS' 
END
GO

ALTER PROCEDURE [dbo].[SPU_SHOP_ORDER_MILL_SCHEDULE]
(
	@PLANT_ID INTEGER,
	@MACHINE_CODE VARCHAR(20),
	@SEQ INTEGER,
	@PFS CHAR(1),
	@PRODUCT_ID INTEGER,
	@SHIP_DATE DATETIME,
	@PRODUCTION_DATE DATETIME,
	@SO_NUMBER VARCHAR(20),
	@WITH_NO_MILL CHAR(1),
	@SHOP_ORDER_NO VARCHAR(20),
	@MANUFACTURE_TYPE_CODE VARCHAR(4),
	@DAYS_AFTER_PROMISE_DATE INT
)
AS


SELECT *
FROM
(
SELECT
  SH.SHOP_ORDER_ID,
  SH.SHOP_ORDER_NO,
  SH.PLANT_ID,
  PL.PARTNER_CODE AS PLANT_CODE,
  SH.BUILT_TO,
  SHBT.NAME AS BUILT_TO_NAME,
  SH.MILL_ID,
  M.MACHINE_CODE,
  SH.SEQ,
  SH.SEQ1,
  SH.PFS,
  SH.DOWNLOAD_USER,
  SH.DOWNLOAD_FILE,
  SH.DOWNLOAD_DATE,
  SH.PRINT_LABEL_STATUS,
  SHPS.NAME AS PRINT_LABEL_STATUS_NAME,
  SH.EVER_PRINTED_FLAG,
  SH.TOTAL_REMAINING_QTY,
  SH.TOTAL_REMAINING_WEIGHT,
  SH.TOTAL_REMAINING_LENGTH,
  SH.TOTAL_WEIGHT,
  SH.TOTAL_LENGTH,
  SH.UNIT_PACK,
  DBO.FN_SH_IS_CUSTOM_UNIT_PACK(SH.SHOP_ORDER_ID) AS PRODUCT_UNIT_PACK,
  DBO.FN_GET_SHOP_ORDER_MIN_FEET(SH.SHOP_ORDER_ID) AS MIN_FEET,
  DBO.FN_GET_SHOP_ORDER_MAX_FEET(SH.SHOP_ORDER_ID) AS MAX_FEET,
  DBO.FN_GET_SHOP_ORDER_SHORTEST_LENGTH(SH.SHOP_ORDER_ID) AS SHOP_ORDER_SHORTEST_LENGTH,
  SH.SHIP_COMMENT,
  SH.PRODUCT_ID,
  PR.PRODUCT_NO,
  COALESCE(SH.SPECIAL_COMMENTS, PR.NAME) AS PRODUCT_NAME,
  PR.PRODUCT_CATEGORY_CODE,
  SH.KSI_CODE,
  SH.COAT_SPEC_CODE,
  SH.HDG_FLAG,
  SH.PUNCH_FLAG,
  SHP.NAME AS PUNCH_FLAG_CODE,
  SH.PUNCH_TYPE_CODE,
  PT.NAME AS PUNCH_TYPE_NAME,
  SH.SO_ID,
  SH.ORDER_NO,
  SO.PROMISE_DATE,
  SH.STATUS,
  SHS.NAME AS STATUS_NAME,
  SH.CUSTOMER_ID,
  CU.PARTNER_CODE AS CUSTOMER_CODE,
  SO.CUSTOMER_NAME,
  SO.IS_HAPPY_PACK,
  SO.IS_BUY_AMERICAN,
  COALESCE(SH.UPC,'0') AS UPC,
  SH.MANUFACTURE_TYPE_CODE,
  SO.SENSITIVE_CUSTOMER_FLAG,
  ( SELECT MIN(DBO.FN_DATE(TR.SCHEDULED_SHIP_DATE) )
    FROM TRUCK_BOOKING TB (NOLOCK)
      JOIN TRUCK_ROUTE_STOP TRS (NOLOCK) ON TB.TRUCK_ROUTE_STOP_ID = TRS.TRUCK_ROUTE_STOP_ID
      JOIN TRUCK_ROUTE TR (NOLOCK) ON TR.TRUCK_ROUTE_ID = TRS.TRUCK_ROUTE_ID
    WHERE TB.SO_ID = SH.SO_ID
      AND TR.TRUCK_ROUTE_STATUS_CODE <> 'S') AS TRUCK_FIRST_SCHED_SHIP_DATE,
  
  PPL.SLIT_COIL_PRODUCT_ID,
  (SELECT MAX(MRP.STEEL_RECV_DATE) FROM MRP (NOLOCK)
   JOIN MRP_DETAIL MRPD (NOLOCK) ON MRPD.MRP_ID = MRP.MRP_ID AND MRPD.SO_DETAIL_ID IN (SELECT SO_DETAIL_ID FROM SHOP_ORDER_DETAIL SHD (NOLOCK) WHERE SHD.SHOP_ORDER_ID = SH.SHOP_ORDER_ID)) AS STEEL_RECV_DATE,
     
   (SELECT TOP 1 PP.WIDTH_MIN FROM MRP_DETAIL MRPD (NOLOCK)
   JOIN V_PRODUCT_PLANT PP (NOLOCK) ON PP.PARTNER_ID = SH.PLANT_ID AND PP.PRODUCT_ID = MRPD.COMPONENT_ID
   WHERE 
   MRPD.SO_DETAIL_ID IN (SELECT SO_DETAIL_ID FROM SHOP_ORDER_DETAIL SHD (NOLOCK) WHERE SHD.SHOP_ORDER_ID = SH.SHOP_ORDER_ID)) AS WIDTH_MIN,
   
   (SELECT TOP 1 MRPD.COMPONENT_ID FROM MRP_DETAIL MRPD (NOLOCK)
   WHERE 
   MRPD.SO_DETAIL_ID IN (SELECT SO_DETAIL_ID FROM SHOP_ORDER_DETAIL SHD (NOLOCK) WHERE SHD.SHOP_ORDER_ID = SH.SHOP_ORDER_ID)) AS MRP_COMPONENT_ID,
   
   (SELECT TOP 1 MRP.KSI_CODE FROM MRP_DETAIL MRPD (NOLOCK)
   JOIN MRP MRP (NOLOCK) ON MRP.MRP_ID = MRPD.MRP_ID
   WHERE 
   MRPD.SO_DETAIL_ID IN (SELECT SO_DETAIL_ID FROM SHOP_ORDER_DETAIL SHD (NOLOCK) WHERE SHD.SHOP_ORDER_ID = SH.SHOP_ORDER_ID)) AS MRP_KSI,
   
   (SELECT TOP 1 MRP.COAT_SPEC_CODE FROM MRP_DETAIL MRPD (NOLOCK)
   JOIN MRP MRP (NOLOCK) ON MRP.MRP_ID = MRPD.MRP_ID
   WHERE 
   MRPD.SO_DETAIL_ID IN (SELECT SO_DETAIL_ID FROM SHOP_ORDER_DETAIL SHD (NOLOCK) WHERE SHD.SHOP_ORDER_ID = SH.SHOP_ORDER_ID)) AS MRP_COAT_SPEC,
   
  COALESCE(SH.PRODUCTION_DATE,(SELECT MIN(PRODUCTION_DATE) FROM SALES_ORDER_DETAIL (NOLOCK) WHERE SO_ID = SO.SO_ID)) AS PRODUCTION_DATE,
  SH.WIP_NBR_ID,
  
  COALESCE(PPL.KSI_CODE, PR.KSI_CODE) AS PRODUCT_KSI_CODE,
  COALESCE(PPL.COAT_SPEC_CODE,PR.COAT_SPEC_CODE) AS PRODUCT_COAT_SPEC_CODE,
  (SELECT COUNT(DISTINCT(SHDE.UNIT_FEET + SHDE.UNIT_INCHES)) 
  	FROM SHOP_ORDER_DETAIL SHDE (NOLOCK)
  	WHERE SHDE.SHOP_ORDER_ID = SH.SHOP_ORDER_ID) AS SHOP_ORDER_LENGTHS,
  (SELECT COUNT(*) FROM SHOP_ORDER (NOLOCK) WHERE MAIN_SHOP_ORDER_ID = SH.SHOP_ORDER_ID) AS CUTBACK_ORDERS,
  SOA.PROVINCE AS CITY,
  ST.STATE_CODE AS STATE_CODE,
  COALESCE(SH.SKIDS_WITH_STA,0) AS SKIDS_WITH_STA_ACTIVITY,
  COALESCE(SH.SKIDS_WITH_CON,0) AS SKIDS_WITH_CON_ACTIVITY,
  (SELECT COUNT(*) 
    FROM SHOP_ORDER_DETAIL_SKID SHDS (NOLOCK) 
   WHERE SHDS.SHOP_ORDER_ID = SH.SHOP_ORDER_ID ) AS TOTAL_SKIDS,
   
   CASE WHEN EXISTS (SELECT * FROM SHOP_ORDER SOAUX (NOLOCK)
   JOIN SALES_ORDER_DETAIL SOD (NOLOCK) ON SOAUX.SO_ID = SOD.SO_ID
   WHERE SOAUX.SHOP_ORDER_ID = SH.SHOP_ORDER_ID AND SOD.STATUS IN ('CFC','IPL','MRP','PFS')) THEN  0
   ELSE 1 END AS IS_DETAIL_ROUTED,

   DBO.FN_GET_IS_STOCK_IPL(SO.SO_ID) AS IS_STOCK_IPL

FROM SHOP_ORDER SH (NOLOCK)
  LEFT JOIN PARTNER CU (NOLOCK) ON SH.CUSTOMER_ID = CU.PARTNER_ID
  JOIN PARTNER PL (NOLOCK) ON SH.PLANT_ID = PL.PARTNER_ID
  JOIN PRODUCT PR (NOLOCK) ON SH.PRODUCT_ID = PR.PRODUCT_ID
  LEFT JOIN V_PRODUCT_PLANT PPL (NOLOCK) ON PR.PRODUCT_ID = PPL.PRODUCT_ID AND SH.PLANT_ID = PPL.PARTNER_ID
  JOIN GENERAL_TABLE SHS (NOLOCK) ON SHS.CODE = SH.STATUS AND SHS.TABLE_NAME = 'SHOP_ORDER_STATUS'
  LEFT JOIN MACHINE M (NOLOCK) ON SH.MILL_ID = M.MACHINE_ID
  LEFT JOIN GENERAL_TABLE SHP (NOLOCK) ON SHP.CODE = SH.PUNCH_FLAG AND SHP.TABLE_NAME = 'POD_PUNCH'
  LEFT JOIN PUNCH_TYPE PT (NOLOCK) ON SH.PUNCH_TYPE_CODE = PT.PUNCH_TYPE_CODE
  JOIN GENERAL_TABLE SHBT (NOLOCK) ON SHBT.CODE = SH.BUILT_TO AND SHBT.TABLE_NAME = 'SHOP_ORDER_BUILD_TO'
  LEFT JOIN GENERAL_TABLE SHPS (NOLOCK) ON SHPS.CODE = SH.PRINT_LABEL_STATUS AND SHBT.TABLE_NAME = 'SHOP_PRINT_LABEL_STATUS'
  JOIN SALES_ORDER SO (NOLOCK) ON SO.SO_ID = SH.SO_ID
  LEFT JOIN SALES_ORDER_ADDRESS SOA (NOLOCK) ON SOA.SO_ID = SO.SO_ID AND SOA.ADDRESS_TYPE='SA'
  LEFT JOIN STATE ST (NOLOCK) ON ST.STATE_ID = SOA.STATE_ID
  
WHERE SH.PLANT_ID = @PLANT_ID
  AND SH.STATUS IN ('N','O')
  AND (@WITH_NO_MILL IS NULL OR
         (   (@WITH_NO_MILL = '1' AND SH.MILL_ID IS NULL AND COALESCE(SH.PFS, '0') = '0')
          OR (@WITH_NO_MILL = '0' AND SH.MILL_ID IS NOT NULL) ) )
  AND (@MACHINE_CODE IS NULL OR M.MACHINE_CODE = @MACHINE_CODE)
  AND (@SEQ IS NULL OR SH.SEQ = @SEQ)
  AND (@PFS IS NULL OR SH.PFS = @PFS)
  AND (SH.PRODUCT_ID = ISNULL(@PRODUCT_ID, SH.PRODUCT_ID))
  AND (@PRODUCTION_DATE IS NULL OR COALESCE(SH.PRODUCTION_DATE,(SELECT MIN(PRODUCTION_DATE) FROM SALES_ORDER_DETAIL (NOLOCK) WHERE SO_ID = SO.SO_ID),'') = @PRODUCTION_DATE)
  AND (SH.ORDER_NO = ISNULL(@SO_NUMBER, SH.ORDER_NO))
  AND (SH.SHOP_ORDER_NO = ISNULL(@SHOP_ORDER_NO, SH.SHOP_ORDER_NO))
  AND (@DAYS_AFTER_PROMISE_DATE IS NULL OR SO.PROMISE_DATE <= dbo.FN_DATE_EXCLUYED_WEEKENDS(getdate(), @DAYS_AFTER_PROMISE_DATE))
  AND (
			@MANUFACTURE_TYPE_CODE IS NULL 
			OR (@MANUFACTURE_TYPE_CODE = 'REG' AND (COALESCE(SH.MANUFACTURE_TYPE_CODE,'')<>'WIP'))
			OR (@MANUFACTURE_TYPE_CODE = 'WIP' AND SH.MANUFACTURE_TYPE_CODE = 'WIP' ) 			
       )  
      
GROUP BY
  SH.SHOP_ORDER_ID,
  SH.SHOP_ORDER_NO,
  SH.PLANT_ID,
  PL.PARTNER_CODE,
  SH.BUILT_TO,
  SHBT.NAME,
  SH.MILL_ID,
  M.MACHINE_CODE,
  SH.SEQ,
  SH.SEQ1,
  SH.PFS,
  SH.DOWNLOAD_USER,
  SH.DOWNLOAD_FILE,
  SH.DOWNLOAD_DATE,
  SH.PRINT_LABEL_STATUS,
  SHPS.NAME,
  SH.EVER_PRINTED_FLAG,
  SH.TOTAL_REMAINING_QTY,
  SH.TOTAL_REMAINING_WEIGHT,
  SH.TOTAL_REMAINING_LENGTH,
  SH.TOTAL_WEIGHT,
  SH.TOTAL_LENGTH,
  SH.UNIT_PACK,
  SH.SHIP_COMMENT,
  SH.PRODUCT_ID,
  PR.PRODUCT_NO,
  SH.SPECIAL_COMMENTS,
  PR.NAME,
  PR.PRODUCT_CATEGORY_CODE,
  SH.KSI_CODE,
  SH.COAT_SPEC_CODE,
  SH.HDG_FLAG,
  SH.PUNCH_FLAG,
  SHP.NAME,
  SH.PUNCH_TYPE_CODE,
  PT.NAME,
  SH.SO_ID,
  SO.SO_ID,
  SH.ORDER_NO,
  SO.PROMISE_DATE,
  SH.STATUS,
  SHS.NAME,
  SH.CUSTOMER_ID,
  CU.PARTNER_CODE,
  SO.CUSTOMER_NAME,
  SO.IS_HAPPY_PACK,
  SO.IS_BUY_AMERICAN,
  SH.UPC,
  SH.MANUFACTURE_TYPE_CODE, 
  SO.SENSITIVE_CUSTOMER_FLAG,
  SH.WIP_NBR_ID,
  PPL.SLIT_COIL_PRODUCT_ID,
  COALESCE(PPL.KSI_CODE, PR.KSI_CODE),
  COALESCE(PPL.COAT_SPEC_CODE,PR.COAT_SPEC_CODE),
  SH.IS_SPLIT,
  SH.PRODUCTION_DATE,
  SOA.PROVINCE,
  ST.STATE_CODE,
  SH.SKIDS_WITH_STA,
  SH.SKIDS_WITH_CON) AS S
  
WHERE (@SHIP_DATE IS NULL OR TRUCK_FIRST_SCHED_SHIP_DATE = @SHIP_DATE)
ORDER BY MACHINE_CODE, STATUS, SEQ, SEQ1, SHOP_ORDER_NO;

GO

/*
Changeset: 5700
Comment:   ST66485 (Ref. IM10965)
Committer: CLARKSTEEL\palominom
Creation Date: 08/07/2016 09:49:06 a.m.
*/

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SPU_STOCK_POLICIES_UPDATE_BASE]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[SPU_STOCK_POLICIES_UPDATE_BASE] AS' 
END
GO

ALTER PROCEDURE [dbo].[SPU_STOCK_POLICIES_UPDATE_BASE]
(
   @PROD_PLANT_ID INTEGER, 
   @PRODUCT_ID INTEGER, 
   @FEET INTEGER, 
   @INCHES DECIMAL(19, 3), 
   @PUNCH_FLAG CHAR(1), 
   @UPC BIT,
   @PUNCH_TYPE VARCHAR(10),
   @KSI_CODE VARCHAR(2),
   @COAT_SPEC_CODE VARCHAR(10),
   @AFFECTS_TO VARCHAR(1),
   @LAST_REMAINING_QTY INT,
   @QTY_ADJ INT,
   @SKID_IS_FULL_TRANSITION VARCHAR(3),
   @SKID_ADJ INT,
   @ACTION_TYPE VARCHAR(50),
   @ACTION_SOURCE VARCHAR(350),
   @USER_CODE VARCHAR(20),
   @USE_DEFAULT_PART_ATTRIBUTE VARCHAR(1)
) 
AS
BEGIN TRY
  /*  IN @SKID_IS_FULL_TRANSITION VARCHAR(3),--F P F>P P>F*/  
  /*  IN @AFFECTS_TO VARCHAR(1),  -- R,A */
  
  DECLARE @ACCOUNTING_PLANT_CODE VARCHAR(2); 
  DECLARE @V_COUNT SMALLINT;   
  DECLARE @V_COUNT_DEFAULT_PART_ATTRIBUTES SMALLINT;   
  DECLARE @FULL_SKIDS_ON_HAND INTEGER;
  SET @FULL_SKIDS_ON_HAND  = 0
  DECLARE @FULL_ON_HAND INTEGER;
  SET @FULL_ON_HAND = 0
  DECLARE @PARTIAL_SKIDS_ON_HAND INTEGER;
  SET @PARTIAL_SKIDS_ON_HAND = 0
  DECLARE @PARTIAL_ON_HAND INTEGER;
  SET @PARTIAL_ON_HAND = 0
  DECLARE @TOTAL_QTY_ON_HAND INTEGER;	
  SET @TOTAL_QTY_ON_HAND = 0
  DECLARE @TOTAL_QTY_RESERVED INTEGER;	
  SET @TOTAL_QTY_RESERVED = 0
  DECLARE @TOTAL_QTY_AVAILABLE INTEGER;
  SET @TOTAL_QTY_AVAILABLE = 0
  
  /*Find Accounting_plant*/
  SELECT @ACCOUNTING_PLANT_CODE = ACCOUNTING_PLANT_CODE FROM PLANT_INFO (NOLOCK) WHERE PARTNER_ID=@PROD_PLANT_ID;  
    
  SELECT @V_COUNT = COUNT(*)
  FROM STOCK_POLICIES (NOLOCK)
  WHERE PRODUCTION_PLANT_ID = @PROD_PLANT_ID 
  AND PRODUCT_ID = @PRODUCT_ID
  AND FEET = @FEET 
  AND INCHES = @INCHES 
  AND P_U = @PUNCH_FLAG 
  AND UPC = @UPC
  AND (COALESCE(PUNCH_PATTERN,'') = COALESCE(@PUNCH_TYPE,''))
  AND KSI_CODE = @KSI_CODE 
  AND COAT_SPEC_CODE = @COAT_SPEC_CODE;
  
  IF( @V_COUNT>0 )   
    SELECT 
    @FULL_SKIDS_ON_HAND = FULL_SKIDS_ON_HAND,
    @FULL_ON_HAND = FULL_ON_HAND,
    @PARTIAL_SKIDS_ON_HAND = PARTIAL_SKIDS_ON_HAND,
    @PARTIAL_ON_HAND = PARTIAL_ON_HAND,
    @TOTAL_QTY_ON_HAND = TOTAL_QTY_ON_HAND,
    @TOTAL_QTY_RESERVED = TOTAL_QTY_RESERVED,
    @TOTAL_QTY_AVAILABLE = TOTAL_QTY_AVAILABLE
    FROM STOCK_POLICIES (NOLOCK)
    WHERE PRODUCTION_PLANT_ID = @PROD_PLANT_ID AND PRODUCT_ID = @PRODUCT_ID
    AND FEET = @FEET 
    AND INCHES = @INCHES 
    AND P_U = @PUNCH_FLAG 
    AND UPC = @UPC
    AND (COALESCE(PUNCH_PATTERN,'') = COALESCE(@PUNCH_TYPE,''))
    AND KSI_CODE = @KSI_CODE 
    AND COAT_SPEC_CODE = @COAT_SPEC_CODE;    
  
  IF(@AFFECTS_TO='A')  
  BEGIN
    /*SET @FULL_SKIDS_ON_HAND OR @PARTIAL_SKIDS_ON_HAND -- @FULL_ON_HAND OR @PARTIAL_ON_HAND  */		 
    
    IF (@QTY_ADJ = 0)  
      SET @SKID_ADJ = 0;

    IF(@SKID_IS_FULL_TRANSITION='F') 
    BEGIN
      SET @FULL_SKIDS_ON_HAND = @FULL_SKIDS_ON_HAND + @SKID_ADJ;
      SET @FULL_ON_HAND = @FULL_ON_HAND + @QTY_ADJ;
    END;
  
    IF(@SKID_IS_FULL_TRANSITION='P') 
    BEGIN
      SET @PARTIAL_SKIDS_ON_HAND = @PARTIAL_SKIDS_ON_HAND + @SKID_ADJ;
      SET @PARTIAL_ON_HAND = @PARTIAL_ON_HAND + @QTY_ADJ;
    END;

    IF(@SKID_IS_FULL_TRANSITION='F>P')
    BEGIN
      SET @FULL_SKIDS_ON_HAND=@FULL_SKIDS_ON_HAND - @SKID_ADJ;
      SET @PARTIAL_SKIDS_ON_HAND=@PARTIAL_SKIDS_ON_HAND + @SKID_ADJ;
      
      SET @FULL_ON_HAND = @FULL_ON_HAND -  @LAST_REMAINING_QTY;
      SET @PARTIAL_ON_HAND = @PARTIAL_ON_HAND + @LAST_REMAINING_QTY + @QTY_ADJ;
    END;
    
    IF(@SKID_IS_FULL_TRANSITION='P>F') 
    BEGIN
      SET @FULL_SKIDS_ON_HAND=@FULL_SKIDS_ON_HAND + @SKID_ADJ;
      SET @PARTIAL_SKIDS_ON_HAND=@PARTIAL_SKIDS_ON_HAND - @SKID_ADJ;
      
      SET @FULL_ON_HAND = @FULL_ON_HAND + @LAST_REMAINING_QTY + @QTY_ADJ;
      SET @PARTIAL_ON_HAND = @PARTIAL_ON_HAND - @LAST_REMAINING_QTY;
    END;
    IF(@SKID_IS_FULL_TRANSITION='F>')
    BEGIN
      SET @FULL_SKIDS_ON_HAND = 0;
      SET @FULL_ON_HAND = 0;
    END;
    
    IF(@SKID_IS_FULL_TRANSITION='P>') 
    BEGIN
      SET @PARTIAL_SKIDS_ON_HAND = 0;
      SET @PARTIAL_ON_HAND = 0;
    END;
    /*  */  
  END
  ELSE
  BEGIN
    IF(@AFFECTS_TO='R') 
      SET @TOTAL_QTY_RESERVED=@TOTAL_QTY_RESERVED + @QTY_ADJ;
  END;
  
  /* SET @TOTAL_QTY_ON_HAND AND @TOTAL_QTY_AVAILABLE */
  SET @TOTAL_QTY_ON_HAND=@FULL_ON_HAND + @PARTIAL_ON_HAND;
  SET @TOTAL_QTY_AVAILABLE=@TOTAL_QTY_ON_HAND - @TOTAL_QTY_RESERVED;
  
  IF( @V_COUNT=0 ) 
  BEGIN  
    
    IF(@USE_DEFAULT_PART_ATTRIBUTE = '0')
    BEGIN
   		 INSERT INTO STOCK_POLICIES
   		 (
   		 PRODUCTION_PLANT_ID,PRODUCT_ID,FEET,INCHES,P_U,PLANT_CODE,
   		 FULL_SKIDS_ON_HAND,FULL_ON_HAND,PARTIAL_SKIDS_ON_HAND,PARTIAL_ON_HAND,
   		 TOTAL_QTY_ON_HAND,	TOTAL_QTY_RESERVED,	TOTAL_QTY_AVAILABLE,
   		 MIN_QTY,MAX_QTY,OPTIMUM_ORDER_QTY,SAFETY_QTY,PRODUCTION_QTY,STOCK_POLICIES_UPDATED,
   		 LAST_ACTION_TYPE,LAST_ACTION_SOURCE,UPDATE_DATE,UPDATED_BY,UPC, PUNCH_PATTERN, KSI_CODE, COAT_SPEC_CODE
   		 )
   		 VALUES 
   		 (
   		 @PROD_PLANT_ID,@PRODUCT_ID,@FEET,@INCHES,@PUNCH_FLAG,@ACCOUNTING_PLANT_CODE,
   		 @FULL_SKIDS_ON_HAND,@FULL_ON_HAND,@PARTIAL_SKIDS_ON_HAND,@PARTIAL_ON_HAND,
   		 @TOTAL_QTY_ON_HAND,@TOTAL_QTY_RESERVED,@TOTAL_QTY_AVAILABLE,
   		 0,0,0,0,0,'0',
   		 @ACTION_TYPE,@ACTION_SOURCE,(GETDATE()),@USER_CODE,@UPC,@PUNCH_TYPE, @KSI_CODE, @COAT_SPEC_CODE
   		 ); 
   	END
   	ELSE
   	BEGIN
   	
   		/* Define default part attributes */
		DECLARE @DEFAULT_PART_KSI VARCHAR(2);
		DECLARE @DEFAULT_PART_COAT_SPEC VARCHAR(10);
		DECLARE @DEFAULT_PART_PUNCH_FLAG VARCHAR(1);
		DECLARE @DEFAULT_PART_PUNCH_PATTERN VARCHAR(10);

		SELECT @DEFAULT_PART_KSI = VP.KSI_CODE,
	    @DEFAULT_PART_COAT_SPEC = VP.COAT_SPEC_CODE,
	    @DEFAULT_PART_PUNCH_FLAG = P.PUNCH_FLAG,
	    @DEFAULT_PART_PUNCH_PATTERN = P.PUNCH_TYPE_CODE
		FROM V_PRODUCT_PLANT VP (NOLOCK) 
		JOIN PRODUCT P (NOLOCK) ON P.PRODUCT_ID = VP.PRODUCT_ID
		WHERE 
		VP.PARTNER_ID = @PROD_PLANT_ID
		AND VP.PRODUCT_ID = @PRODUCT_ID;
   		
   		--Verify if there is a stock combo with default part attributes
   		SELECT @V_COUNT_DEFAULT_PART_ATTRIBUTES = COUNT(*)
 		FROM STOCK_POLICIES (NOLOCK)
 		WHERE PRODUCTION_PLANT_ID = @PROD_PLANT_ID 
 		AND PRODUCT_ID = @PRODUCT_ID
 		AND FEET = @FEET 
 		AND INCHES = @INCHES 
 		AND UPC = @UPC 		
 		AND P_U = @DEFAULT_PART_PUNCH_FLAG 
 		AND (COALESCE(PUNCH_PATTERN,'') = COALESCE(@DEFAULT_PART_PUNCH_PATTERN,''))
 		AND KSI_CODE = @DEFAULT_PART_KSI 
 		AND COAT_SPEC_CODE = @DEFAULT_PART_COAT_SPEC;
   		
   		IF (@V_COUNT_DEFAULT_PART_ATTRIBUTES = 0)
   		BEGIN --If it doesn't exist, insert a new stock combo with default part attributes
   		
   			INSERT INTO STOCK_POLICIES
   			 (
   			 PRODUCTION_PLANT_ID,PRODUCT_ID,FEET,INCHES,P_U,PLANT_CODE,
   			 FULL_SKIDS_ON_HAND,FULL_ON_HAND,PARTIAL_SKIDS_ON_HAND,PARTIAL_ON_HAND,
   			 TOTAL_QTY_ON_HAND,	TOTAL_QTY_RESERVED,	TOTAL_QTY_AVAILABLE,
   			 MIN_QTY,MAX_QTY,OPTIMUM_ORDER_QTY,SAFETY_QTY,PRODUCTION_QTY,STOCK_POLICIES_UPDATED,
   			 LAST_ACTION_TYPE,LAST_ACTION_SOURCE,UPDATE_DATE,UPDATED_BY,UPC, PUNCH_PATTERN, KSI_CODE, COAT_SPEC_CODE
   			 )
   			 VALUES 
   			 (
   			 @PROD_PLANT_ID,@PRODUCT_ID,@FEET,@INCHES,@DEFAULT_PART_PUNCH_FLAG,@ACCOUNTING_PLANT_CODE,
   			 @FULL_SKIDS_ON_HAND,@FULL_ON_HAND,@PARTIAL_SKIDS_ON_HAND,@PARTIAL_ON_HAND,
   			 @TOTAL_QTY_ON_HAND,@TOTAL_QTY_RESERVED,@TOTAL_QTY_AVAILABLE,
   			 0,0,0,0,0,'0',
   			 @ACTION_TYPE,@ACTION_SOURCE,(GETDATE()),@USER_CODE,@UPC,@DEFAULT_PART_PUNCH_PATTERN, @DEFAULT_PART_KSI, @DEFAULT_PART_COAT_SPEC
   			 ); 
   		
   		
   		END;
   		ELSE --If exists, update the total fields in the stock combo with default part attributes
   		BEGIN
   		
   			SELECT 
 			  @FULL_SKIDS_ON_HAND = FULL_SKIDS_ON_HAND,
 			  @FULL_ON_HAND = FULL_ON_HAND,
 			  @PARTIAL_SKIDS_ON_HAND = PARTIAL_SKIDS_ON_HAND,
 			  @PARTIAL_ON_HAND = PARTIAL_ON_HAND,
 			  @TOTAL_QTY_ON_HAND = TOTAL_QTY_ON_HAND,
 			  @TOTAL_QTY_RESERVED = TOTAL_QTY_RESERVED,
 			  @TOTAL_QTY_AVAILABLE = TOTAL_QTY_AVAILABLE
 			  FROM STOCK_POLICIES (NOLOCK)
 			  WHERE PRODUCTION_PLANT_ID = @PROD_PLANT_ID AND PRODUCT_ID = @PRODUCT_ID
 			  AND FEET = @FEET 
 			  AND INCHES = @INCHES 
 			  AND UPC = @UPC
 			  AND P_U = @DEFAULT_PART_PUNCH_FLAG 
 			  AND (COALESCE(PUNCH_PATTERN,'') = COALESCE(@DEFAULT_PART_PUNCH_PATTERN,''))
 			  AND KSI_CODE = @DEFAULT_PART_KSI 
 			  AND COAT_SPEC_CODE = @DEFAULT_PART_COAT_SPEC;    
 			
 			IF(@AFFECTS_TO='A')  
 			BEGIN
 			  /*SET @FULL_SKIDS_ON_HAND OR @PARTIAL_SKIDS_ON_HAND -- @FULL_ON_HAND OR @PARTIAL_ON_HAND  */		 
 			  
 			  IF (@QTY_ADJ = 0)  
 			    SET @SKID_ADJ = 0;

 			  IF(@SKID_IS_FULL_TRANSITION='F') 
 			  BEGIN
 			    SET @FULL_SKIDS_ON_HAND = @FULL_SKIDS_ON_HAND + @SKID_ADJ;
 			    SET @FULL_ON_HAND = @FULL_ON_HAND + @QTY_ADJ;
 			  END;
 			
 			  IF(@SKID_IS_FULL_TRANSITION='P') 
 			  BEGIN
 			    SET @PARTIAL_SKIDS_ON_HAND = @PARTIAL_SKIDS_ON_HAND + @SKID_ADJ;
 			    SET @PARTIAL_ON_HAND = @PARTIAL_ON_HAND + @QTY_ADJ;
 			  END;

 			  IF(@SKID_IS_FULL_TRANSITION='F>P')
 			  BEGIN
 			    SET @FULL_SKIDS_ON_HAND=@FULL_SKIDS_ON_HAND - @SKID_ADJ;
 			    SET @PARTIAL_SKIDS_ON_HAND=@PARTIAL_SKIDS_ON_HAND + @SKID_ADJ;
 			    
 			    SET @FULL_ON_HAND = @FULL_ON_HAND -  @LAST_REMAINING_QTY;
 			    SET @PARTIAL_ON_HAND = @PARTIAL_ON_HAND + @LAST_REMAINING_QTY + @QTY_ADJ;
 			  END;
 			  
 			  IF(@SKID_IS_FULL_TRANSITION='P>F') 
 			  BEGIN
 			    SET @FULL_SKIDS_ON_HAND=@FULL_SKIDS_ON_HAND + @SKID_ADJ;
 			    SET @PARTIAL_SKIDS_ON_HAND=@PARTIAL_SKIDS_ON_HAND - @SKID_ADJ;
 			    
 			    SET @FULL_ON_HAND = @FULL_ON_HAND + @LAST_REMAINING_QTY + @QTY_ADJ;
 			    SET @PARTIAL_ON_HAND = @PARTIAL_ON_HAND - @LAST_REMAINING_QTY;
 			  END;
 			  IF(@SKID_IS_FULL_TRANSITION='F>')
 			  BEGIN
 			    SET @FULL_SKIDS_ON_HAND = 0;
 			    SET @FULL_ON_HAND = 0;
 			  END;
 			  
 			  IF(@SKID_IS_FULL_TRANSITION='P>') 
 			  BEGIN
 			    SET @PARTIAL_SKIDS_ON_HAND = 0;
 			    SET @PARTIAL_ON_HAND = 0;
 			  END;
 			  /*  */  
 			END
 			ELSE
 			BEGIN
 			  IF(@AFFECTS_TO='R') 
 			    SET @TOTAL_QTY_RESERVED=@TOTAL_QTY_RESERVED + @QTY_ADJ;
 			END;
   		
   			/* SET @TOTAL_QTY_ON_HAND AND @TOTAL_QTY_AVAILABLE */
			SET @TOTAL_QTY_ON_HAND=@FULL_ON_HAND + @PARTIAL_ON_HAND;
			SET @TOTAL_QTY_AVAILABLE=@TOTAL_QTY_ON_HAND - @TOTAL_QTY_RESERVED;
  
   			UPDATE STOCK_POLICIES
   			SET 
   			FULL_SKIDS_ON_HAND = @FULL_SKIDS_ON_HAND,
   			FULL_ON_HAND = @FULL_ON_HAND,
   			PARTIAL_SKIDS_ON_HAND = @PARTIAL_SKIDS_ON_HAND,
   			PARTIAL_ON_HAND = @PARTIAL_ON_HAND,
   			TOTAL_QTY_ON_HAND = @TOTAL_QTY_ON_HAND,
   			TOTAL_QTY_RESERVED = @TOTAL_QTY_RESERVED,
   			TOTAL_QTY_AVAILABLE = @TOTAL_QTY_AVAILABLE,
   			LAST_ACTION_TYPE = @ACTION_TYPE,
   			LAST_ACTION_SOURCE = @ACTION_SOURCE,
   			UPDATE_DATE = (GETDATE()),
   			UPDATED_BY = @USER_CODE
   			WHERE 
   			PRODUCTION_PLANT_ID=@PROD_PLANT_ID 
   			AND PRODUCT_ID=@PRODUCT_ID AND FEET=@FEET 
   			AND INCHES=@INCHES
   			AND UPC=@UPC
   			AND P_U = @DEFAULT_PART_PUNCH_FLAG 
 			AND (COALESCE(PUNCH_PATTERN,'') = COALESCE(@DEFAULT_PART_PUNCH_PATTERN,''))
 			AND KSI_CODE = @DEFAULT_PART_KSI 
 			AND COAT_SPEC_CODE = @DEFAULT_PART_COAT_SPEC;   
   		
   		END;
   	END
  END
  ELSE  
    UPDATE STOCK_POLICIES
    SET 
    FULL_SKIDS_ON_HAND = @FULL_SKIDS_ON_HAND,
    FULL_ON_HAND = @FULL_ON_HAND,
    PARTIAL_SKIDS_ON_HAND = @PARTIAL_SKIDS_ON_HAND,
    PARTIAL_ON_HAND = @PARTIAL_ON_HAND,
    TOTAL_QTY_ON_HAND = @TOTAL_QTY_ON_HAND,
    TOTAL_QTY_RESERVED = @TOTAL_QTY_RESERVED,
    TOTAL_QTY_AVAILABLE = @TOTAL_QTY_AVAILABLE,
    LAST_ACTION_TYPE = @ACTION_TYPE,
    LAST_ACTION_SOURCE = @ACTION_SOURCE,
    UPDATE_DATE = (GETDATE()),
    UPDATED_BY = @USER_CODE
    WHERE 
    PRODUCTION_PLANT_ID=@PROD_PLANT_ID AND PRODUCT_ID=@PRODUCT_ID AND FEET=@FEET AND INCHES=@INCHES AND	P_U=@PUNCH_FLAG AND UPC=@UPC
    AND (COALESCE(PUNCH_PATTERN,'') = COALESCE(@PUNCH_TYPE,''))
    AND (KSI_CODE = @KSI_CODE)
    AND (COAT_SPEC_CODE = @COAT_SPEC_CODE);    
  
  EXECUTE SPU_STOCK_POLICIES_LOG_INS @PROD_PLANT_ID,@PRODUCT_ID,@FEET,@INCHES,@PUNCH_FLAG,@UPC,@PUNCH_TYPE, @KSI_CODE, @COAT_SPEC_CODE,@USER_CODE;

END TRY
BEGIN CATCH
    
  DECLARE @ERRMSG NVARCHAR(4000), @ERRSEVERITY INT
  SELECT @ERRMSG = ERROR_MESSAGE(),
         @ERRSEVERITY = ERROR_SEVERITY()
  RAISERROR(@ERRMSG, @ERRSEVERITY, 1)
  RETURN @ERRSEVERITY;
END CATCH


GO

/*
Changeset: 5701
Comment:   IM10647 - fix script
Committer: CLARKSTEEL\matteor
Creation Date: 08/07/2016 10:58:00 a.m.
*/

IF(OBJECT_ID('SETUP_TAG_BREAKDOWN_SALES_ORDER_DETAIL') IS NULL)
BEGIN
    
	CREATE TABLE dbo.SETUP_TAG_BREAKDOWN_SALES_ORDER_DETAIL
	(
		SETUP_TAG_BREAKDOWN_SALES_ORDER_DETAIL_ID INT IDENTITY NOT NULL,
		SETUP_TAG_BREAKDOWN_ID INT NOT NULL,
		SO_DETAIL_ID INT NOT NULL,
		SO_STEEL_DATE DATETIME,
		CREATED_BY VARCHAR(20),
		CREATION_DATE DATETIME,
		UPDATED_BY VARCHAR(20),
		UPDATE_DATE DATETIME
		
		CONSTRAINT PK_SETUP_TAG_BREAKDOWN_SALES_ORDER_DETAIL PRIMARY KEY (SETUP_TAG_BREAKDOWN_SALES_ORDER_DETAIL_ID),
		CONSTRAINT FK_SETUP_TAG_BREAKDOWN_SALES_ORDER_DETAIL_SALES_ORDER FOREIGN KEY (SO_DETAIL_ID) REFERENCES dbo.SALES_ORDER_DETAIL (SO_DETAIL_ID),
		CONSTRAINT FK_SETUP_TAG_BREAKDOWN_SALES_ORDER_DETAIL_SETUP_TAG_BREAKDOWN FOREIGN KEY (SETUP_TAG_BREAKDOWN_ID) REFERENCES dbo.SETUP_TAG_BREAKDOWN (TAG_BREAKDOWN_ID),
	)

END

GO
/*
Changeset: 5702
Comment:   IM10647 - fix script
Committer: CLARKSTEEL\matteor
Creation Date: 08/07/2016 11:01:21 a.m.
*/


IF EXISTS(SELECT 1 
            FROM INFORMATION_SCHEMA.COLUMNS 
           WHERE TABLE_SCHEMA = 'dbo' 
             AND TABLE_NAME = 'SETUP_OUTPUT_TAG_EST_WEIGHT_SUMMARY_LOG' 
             AND COLUMN_NAME = 'CREATED_BY')
	ALTER TABLE dbo.SETUP_OUTPUT_TAG_EST_WEIGHT_SUMMARY_LOG DROP COLUMN CREATED_BY

	ALTER TABLE dbo.SETUP_OUTPUT_TAG_EST_WEIGHT_SUMMARY_LOG ADD CREATED_BY VARCHAR(20)
GO

IF NOT EXISTS(SELECT 1 
                FROM INFORMATION_SCHEMA.COLUMNS 
               WHERE TABLE_SCHEMA = 'dbo' 
                 AND TABLE_NAME = 'SETUP_OUTPUT_TAG_EST_WEIGHT_SUMMARY_LOG' 
                 AND COLUMN_NAME = 'WEIGHT')
	ALTER TABLE dbo.SETUP_OUTPUT_TAG_EST_WEIGHT_SUMMARY_LOG ADD WEIGHT DECIMAL(19,2)
GO

/*
Changeset: 5707
Comment:   Ref [5657] Script move to UP folder
Committer: CLARKSTEEL\luis.miranda
Creation Date: 08/07/2016 01:51:32 p.m.
*/

BEGIN TRY
	BEGIN TRAN
	IF NOT EXISTS 
	(
		SELECT *
		FROM INFORMATION_SCHEMA.COLUMNS
		WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'PRODUCT_CODE' AND COLUMN_NAME = 'RF_ALERT_FLAG'
	)
	ALTER TABLE dbo.PRODUCT_CODE 
	ADD RF_ALERT_FLAG char(1) NULL

	COMMIT
END TRY
BEGIN CATCH
	ROLLBACK
	
	DECLARE @ERRMSG NVARCHAR(4000), @ERRSEVERITY INT;
	SELECT @ERRMSG = ERROR_MESSAGE(), @ERRSEVERITY = ERROR_SEVERITY();
	RAISERROR(@ERRMSG, @ERRSEVERITY, 1);
END CATCH
GO
/*
Changeset: 5707
Comment:   Ref [5657] Script move to UP folder
Committer: CLARKSTEEL\luis.miranda
Creation Date: 08/07/2016 01:51:32 p.m.
*/

BEGIN TRY
	BEGIN TRAN
	IF NOT EXISTS 
	(
		SELECT *
		FROM INFORMATION_SCHEMA.COLUMNS
		WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'PRODUCT_CODE' AND COLUMN_NAME = 'RF_ALERT_FLAG'
	)
	ALTER TABLE dbo.PRODUCT_CODE 
	ADD RF_ALERT_FLAG char(1) NULL

	COMMIT
END TRY
BEGIN CATCH
	ROLLBACK
	
	DECLARE @ERRMSG NVARCHAR(4000), @ERRSEVERITY INT;
	SELECT @ERRMSG = ERROR_MESSAGE(), @ERRSEVERITY = ERROR_SEVERITY();
	RAISERROR(@ERRMSG, @ERRSEVERITY, 1);
END CATCH
GO
/*
Changeset: 5711
Comment:   Ref chainset [5657] Add nolock's
Committer: CLARKSTEEL\luis.miranda
Creation Date: 08/07/2016 02:51:44 p.m.
*/

IF(object_id('SPU_RF_PRODUCE_SKID') IS NOT NULL)
  DROP PROCEDURE dbo.SPU_RF_PRODUCE_SKID
GO

CREATE PROCEDURE dbo.SPU_RF_PRODUCE_SKID
(
  @SKID_NUMBER VARCHAR(20),
  @PLANT_ID INT,
  @BAY VARCHAR(2),
  @ROW VARCHAR(3),
  @ACCEPT_DUMMY_WAREHOUSE_LOCATION CHAR(1),
  @USER_CODE VARCHAR(20),
  @UPDATE_SOURCE VARCHAR(100),
  @MILL_ID INT = NULL
)
AS
BEGIN TRY
  DECLARE @ERR VARCHAR(200);
  DECLARE @OUT_IPF_CWT DECIMAL(19,3);
  DECLARE @OUT_FIXED_OH_CWT DECIMAL(19,3);
  DECLARE @OUT_LABOR_CWT DECIMAL(19,3);
  DECLARE @OUT_VAR_MFG_OH_CWT DECIMAL(19,3);
  DECLARE @OUT_INF_CWT DECIMAL(19,3);
  DECLARE @OUT_VAR_PRD_CWT DECIMAL(19,3);
  DECLARE @OUT_VAR_PCK_CWT DECIMAL(19,3);
  DECLARE @IS_SPECIAL CHAR(1);
  DECLARE @ERR_MSG NVARCHAR(255); 
  
  /* -- Variables for skid -- */
  DECLARE @IS_FULL VARCHAR(1);

  DECLARE @START_TOTAL_WEIGHT DECIMAL(19,2);
  SET @START_TOTAL_WEIGHT = NULL

  DECLARE @PRODUCT_NO VARCHAR(10);
  DECLARE @FEET DECIMAL(19,2);

  DECLARE @INCHES DECIMAL(19,2);
  DECLARE @PLANT_CODE VARCHAR(2);
  DECLARE @MAX_SKID_WEIGHT DECIMAL(19,2);
  SET @MAX_SKID_WEIGHT  = NULL

  DECLARE @SKID_TYPE_CODE VARCHAR(20);
  DECLARE @MACHINE_ID INT;
  DECLARE @PRODUCT_ID INT;
  DECLARE @AUX INT;
 
  DECLARE @ITEM_TYPE CHAR(2);

  /*  ---------------MRP reservation-----------------------  */
  DECLARE @PFS CHAR(1);
  DECLARE @SO_DETAIL_ID INT;
  DECLARE @START_TOTAL_LENGTH DECIMAL(19,4);
  /*  ---------------MRP reservation-----------------------  */

  /* -- Variables for skid cost calculate process */
  DECLARE @PERIOD_CODE VARCHAR(7);
  DECLARE @MATERIAL_COST DECIMAL(19,2); SET @MATERIAL_COST = NULL;
  DECLARE @CURRENCY_CODE VARCHAR(3); SET @CURRENCY_CODE = NULL;
  /* ------------------- */

  DECLARE @START_TOTAL_WEIGHT_NEG DECIMAL(19,2);
  DECLARE @START_TOTAL_LENGTH_NEG DECIMAL(19,4);
  /* ------------------ */
  /* -- Variables for skid weight calculate process*/
  DECLARE @REAL_UNIT_WEIGHT DECIMAL(19,2);
  DECLARE @WEIGHT_UNIT_CODE VARCHAR(3);
  DECLARE @UNIT_LENGTH DECIMAL(19,4);
  DECLARE @REAL_UNIT_LENGTH DECIMAL(19,4);
  DECLARE @TOTAL_LENGTH DECIMAL(19,4);
  DECLARE @LENGTH_UNIT_CODE VARCHAR(3);
  DECLARE @START_TOTAL_QUANTITY INT;

  /* -- Variables for insert tag*/
  DECLARE @TAG_NO VARCHAR(10); SET @TAG_NO = NULL;

  DECLARE @INVENTORY_ACTIVITY_ID INT;
  DECLARE @WAREHOUSE_LOCATION_ID INT;
  DECLARE @ZONE_CODE_NOT_USED VARCHAR(2);
  DECLARE @SKID_SOURCE VARCHAR(3);
  DECLARE @UNIT_PACK INT;

  SET @ITEM_TYPE = DBO.FN_SKID_ITEM_TYPE(@SKID_NUMBER);

  EXEC SPU_RF_VALIDATE_WHLOC @PLANT_ID, @BAY, @ROW, NULL, @ITEM_TYPE, @ACCEPT_DUMMY_WAREHOUSE_LOCATION, @WAREHOUSE_LOCATION_ID OUTPUT, @ZONE_CODE_not_used OUTPUT,@USER_CODE;

  /* -- Get the skid data (skid must not be produced) -- */
  SELECT @IS_FULL = IS_FULL,
         @START_TOTAL_WEIGHT = START_TOTAL_WEIGHT,
         @PRODUCT_ID = PRODUCT_ID,
         @FEET = FEET,
         @INCHES = INCHES,
         @SKID_TYPE_CODE = SKID_TYPE_CODE,
         @START_TOTAL_QUANTITY = START_TOTAL_QUANTITY ,
         @START_TOTAL_LENGTH = START_TOTAL_LENGTH,         
         @PFS = PFS
  FROM SKID (NOLOCK)
  WHERE SKID_NUMBER = @SKID_NUMBER
    AND IS_PRODUCED = '0';

  /* Step 1
  Calculate the weight of this skid.
  If it exceeds the maximum allowable weight, an error message will 
  have already been  displayed in SKDWGTCALC, but no update can be allowed to occur in this program.
  */
  EXEC SPU_RF_CALC_SKID_WGT
    @SKID_NUMBER, 
    @PRODUCT_ID,
    @PLANT_ID,
    @FEET,
    @INCHES,
    @START_TOTAL_QUANTITY,
    @IS_FULL OUTPUT, 
    @START_TOTAL_WEIGHT OUTPUT, 
    @REAL_UNIT_WEIGHT OUTPUT, 
    @WEIGHT_UNIT_CODE OUTPUT, 
    @UNIT_LENGTH OUTPUT, 
    @REAL_UNIT_LENGTH OUTPUT, 
    @TOTAL_LENGTH OUTPUT, 
    @LENGTH_UNIT_CODE OUTPUT,
    @UNIT_PACK OUTPUT,
    @USER_CODE;
    
  /****** IM5287 Generic Product *********/  
  SELECT @IS_SPECIAL = IS_SPECIAL
    FROM PRODUCT P (NOLOCK)
    JOIN SKID S (NOLOCK) ON S.PRODUCT_ID = P.PRODUCT_ID
    JOIN PRODUCT_TYPE PT (NOLOCK) ON PT.PRODUCT_TYPE_CODE = P.PRODUCT_TYPE_CODE
   WHERE S.SKID_NUMBER = @SKID_NUMBER;

  IF(COALESCE(@IS_SPECIAL,'0') = '1')
  BEGIN
    SELECT @START_TOTAL_WEIGHT = SHDS.WEIGHT
      FROM SHOP_ORDER_DETAIL_SKID (NOLOCK) SHDS 
    WHERE SHDS.SKID_NUMBER = @SKID_NUMBER;   
  END

  IF (@IS_FULL IS NULL OR @START_TOTAL_WEIGHT IS NULL)
  BEGIN
    /*  Set @ERR = 'Error trying to calculate Skid Weight';*/
    SET @ERR = DBO.FN_GET_MSG_BY_ID(DBO.FN_LANG_USER_CODE(@USER_CODE),22, NULL, NULL, NULL, NULL);
    /* ERROR_TO_CALCULATE_SKID_WG*/
    RAISERROR(@ERR, 16, 1)
  END;

  SELECT @MAX_SKID_WEIGHT = MAX_SKID_WEIGHT
  FROM PLANT_INFO (NOLOCK)
  WHERE PARTNER_ID = @PLANT_ID;

  IF (@MAX_SKID_WEIGHT < @START_TOTAL_WEIGHT)
  BEGIN
    /*    Set @ERR = 'Skid weight exceeds the plant max weight';*/
    SET @ERR = DBO.FN_GET_MSG_BY_ID(DBO.FN_LANG_USER_CODE(@USER_CODE),23, NULL, NULL, NULL, NULL);
    /* SK_WG_EXCEEDS_PLANT_MAX_WG*/
    RAISERROR(@ERR, 16, 1)
  END;

  /* Get Period Code */
  SET @PERIOD_CODE = dbo.FN_GET_PERIOD(dateadd(DAY,-1,getdate()));

  /* Patch 0,9-10-2007: Update the product_id before cost the coil */
  UPDATE SKID
  SET PRODUCT_ID = @PRODUCT_ID
  WHERE SKID_NUMBER = @SKID_NUMBER;

  DECLARE @CHANGE_SOURCE VARCHAR(10), @CHANGE_KEY VARCHAR(100)
  SET @CHANGE_KEY = @SKID_NUMBER
  
  DECLARE @SHOP_ORDER_DETAIL_ID       INT
  
  SELECT
	  @SO_DETAIL_ID         = SHD.SO_DETAIL_ID,
	  @MACHINE_ID           = COALESCE(@MILL_ID, SH.MILL_ID),
	  @SHOP_ORDER_DETAIL_ID = SHD.SHOP_ORDER_DETAIL_ID
  FROM SHOP_ORDER_DETAIL_SKID SHDS (NOLOCK)
  JOIN SHOP_ORDER_DETAIL SHD (NOLOCK) ON SHD.SHOP_ORDER_DETAIL_ID = SHDS.SHOP_ORDER_DETAIL_ID
  JOIN SHOP_ORDER SH (NOLOCK) ON SHD.SHOP_ORDER_ID = SH.SHOP_ORDER_ID
 WHERE SHDS.SKID_NUMBER = @SKID_NUMBER;
	
  IF (@PFS = '1')
  BEGIN
    SET @CHANGE_SOURCE = 'PFS'
    /*IM2573 get the skid cost from stock skids */
    EXECUTE SPU_RF_GET_FGOOD_COST_FROM_ST_SKID @SKID_NUMBER,'1','1','1','1','1', '1', '1', '1', @MATERIAL_COST OUTPUT, @OUT_IPF_CWT OUTPUT,@OUT_FIXED_OH_CWT OUTPUT,@OUT_LABOR_CWT OUTPUT, @OUT_VAR_MFG_OH_CWT OUTPUT, @OUT_INF_CWT OUTPUT, @OUT_VAR_PCK_CWT OUTPUT, @OUT_VAR_PRD_CWT OUTPUT, @USER_CODE, @CHANGE_SOURCE, @CHANGE_KEY, '';
  END
  ELSE
  BEGIN
    SET @CHANGE_SOURCE = 'PRODUCE'

    /* Calculate skid cost */
    EXECUTE SPU_RF_GET_SKID_COST @PLANT_ID, @SKID_NUMBER, @PERIOD_CODE, @MACHINE_ID, @USER_CODE, @CHANGE_SOURCE, @CHANGE_KEY, @MATERIAL_COST OUTPUT , @CURRENCY_CODE OUTPUT, @OUT_FIXED_OH_CWT OUTPUT, @OUT_LABOR_CWT OUTPUT, @OUT_VAR_MFG_OH_CWT OUTPUT, @OUT_VAR_PCK_CWT OUTPUT, @OUT_VAR_PRD_CWT OUTPUT;
  END

  IF (@MATERIAL_COST IS NULL)
  BEGIN
    /* Set @ERR = 'Error trying to calculate skid Cost';*/
    SET @ERR = DBO.FN_GET_MSG_BY_ID(DBO.FN_LANG_USER_CODE(@USER_CODE),24, NULL, NULL, NULL, NULL);
    /* ERROR_TO_CALCULATE_COST*/
    RAISERROR(@ERR, 16, 1)
  END;

  /* Step 2. Update SKID (PRODUCED) */
  IF @PFS = '1'
    SET @SKID_SOURCE = 'PFS';
  ELSE
    SET @SKID_SOURCE = 'PRD';
    
   -- ------------------------------------------------------
   -- GET QUANTITY TO BE PRODUCED
   -- ------------------------------------------------------
   DECLARE
      @OLD_IA_QUANTITY           INT,
      @QUANTITY_TO_BE_PRODUCED   INT
       
   SELECT 
      @OLD_IA_QUANTITY  = COALESCE(IA.TOTAL_QUANTITY,0)
   FROM SKID S (NOLOCK)
   INNER JOIN TAG T (NOLOCK) ON S.SKID_NUMBER = T.SKID_NUMBER
   LEFT JOIN INVENTORY_ACTIVITY IA(NOLOCK) ON T.LAST_INVENTORY_ACTIVITY_ID =  IA.INVENTORY_ACTIVITY_ID
   WHERE S.SKID_NUMBER = @SKID_NUMBER
      
   SET @QUANTITY_TO_BE_PRODUCED = @START_TOTAL_QUANTITY - COALESCE(@OLD_IA_QUANTITY,0) 
    

  UPDATE SKID
  SET
    PRODUCT_ID = @PRODUCT_ID,
    START_TOTAL_WEIGHT = @START_TOTAL_WEIGHT,
    IS_PRODUCED = '1',
    PRODUCED_TOTAL_QUANTITY = @QUANTITY_TO_BE_PRODUCED,
    PRODUCTION_DATE = (GETDATE()),
    UPDATE_DATE = (GETDATE()),
    UPDATED_BY = @USER_CODE,
    IS_FULL = @IS_FULL,
    SKID_SOURCE_CODE = @SKID_SOURCE
  WHERE SKID_NUMBER = @SKID_NUMBER;

  /* ---------------------------------------------------------------------------------------*/
  /******
  If the skid is NOT PFS, remove the MRP reservation because the skid is already produced
  ******/
  IF (@PFS = '0')
  BEGIN
    DECLARE
      @SKIDS_NOT_PRODUCED        INT,
      @WEIGHT_RESERVED_TO_REMOVE DECIMAL(19,2),
      @LENGTH_RESERVED_TO_REMOVE DECIMAL(19,2),
      @COUNT_WIP_ORDERS INT
      
    SELECT @COUNT_WIP_ORDERS = COUNT(*)  
		FROM SKID SKID (NOLOCK)
		JOIN SHOP_ORDER_DETAIL_SKID SHDS (NOLOCK) ON SHDS.SKID_NUMBER = SKID.SKID_NUMBER
		JOIN SHOP_ORDER_DETAIL SHD (NOLOCK) ON SHD.SHOP_ORDER_DETAIL_ID = SHDS.SHOP_ORDER_DETAIL_ID
		JOIN SHOP_ORDER_DETAIL SHD_WIP (NOLOCK) ON SHD_WIP.MAIN_SHOP_ORDER_DETAIL_ID = SHD.SHOP_ORDER_DETAIL_ID
		JOIN SHOP_ORDER SH_WIP (NOLOCK) ON SH_WIP.SHOP_ORDER_ID = SHD_WIP.SHOP_ORDER_ID
		WHERE 
		SKID.SKID_NUMBER = @SKID_NUMBER
		AND SH_WIP.MANUFACTURE_TYPE_CODE = 'WIP';
	
    SET @START_TOTAL_WEIGHT_NEG = (-1) * @START_TOTAL_WEIGHT;
    SET @START_TOTAL_LENGTH_NEG = (-1) * @START_TOTAL_LENGTH;
	
	IF  ISNULL(@COUNT_WIP_ORDERS,0)= 0
	BEGIN
		EXECUTE SPU_MRP_DETAIL_UPDATE @SO_DETAIL_ID, @PRODUCT_ID, @START_TOTAL_WEIGHT_NEG, @START_TOTAL_LENGTH_NEG;
    END
    
    
    --------------------------------------------------------------------------------------------
    -- If the skid produced is the last skid of the Sales Order Remove the MRP weight reserved
    --------------------------------------------------------------------------------------------
    -- If there aren´t skids for produced
    SET @SKIDS_NOT_PRODUCED = -1
    SELECT  
       @SKIDS_NOT_PRODUCED = COUNT(*) 
    FROM SKID (NOLOCK)
    WHERE IS_PRODUCED = '0' 
      AND SKID_NUMBER IN ( SELECT SKID_NUMBER 
                           FROM SHOP_ORDER_DETAIL_SKID SHODS (NOLOCK) 
                           INNER JOIN SHOP_ORDER_DETAIL SHOD (NOLOCK) ON SHODS.SHOP_ORDER_DETAIL_ID = SHOD.SHOP_ORDER_DETAIL_ID 
                           INNER JOIN SHOP_ORDER SH (NOLOCK) ON SH.SHOP_ORDER_ID = SHOD.SHOP_ORDER_ID
                           WHERE SHOD.SO_DETAIL_ID = @SO_DETAIL_ID AND SH.PRODUCT_ID = @PRODUCT_ID);
      
      
    --If the skid produced is the last skid of the Sales Order 
    If ISNULL(@SKIDS_NOT_PRODUCED,-1) = 0
    BEGIN
       Select 
         @WEIGHT_RESERVED_TO_REMOVE = WEIGHT,
         @LENGTH_RESERVED_TO_REMOVE = LENGTH
       From MRP_DETAIL_DATA (NOLOCK)           
       WHERE MRP_DETAIL_ID IN (SELECT MRP_DETAIL_ID FROM MRP_DETAIL MRPD (NOLOCK) 
								JOIN MRP MRP (NOLOCK) ON MRP.MRP_ID = MRPD.MRP_ID
							   WHERE MRPD.SO_DETAIL_ID = @SO_DETAIL_ID 
								AND MRP.PRODUCT_ID = @PRODUCT_ID)
      
       Set @WEIGHT_RESERVED_TO_REMOVE =  @WEIGHT_RESERVED_TO_REMOVE * (-1)
       Set @LENGTH_RESERVED_TO_REMOVE =  @LENGTH_RESERVED_TO_REMOVE * (-1)
       
       UPDATE MRP_DETAIL_DATA SET 
         WEIGHT = WEIGHT + @WEIGHT_RESERVED_TO_REMOVE,
         LENGTH = LENGTH + @LENGTH_RESERVED_TO_REMOVE
       WHERE MRP_DETAIL_ID IN (SELECT MRP_DETAIL_ID FROM MRP_DETAIL MRPD (NOLOCK) 
								JOIN MRP MRP (NOLOCK) ON MRP.MRP_ID = MRPD.MRP_ID
							   WHERE MRPD.SO_DETAIL_ID = @SO_DETAIL_ID 
								AND MRP.PRODUCT_ID = @PRODUCT_ID);
       
       UPDATE MRP_DATA SET
         TOTAL_WEIGHT = TOTAL_WEIGHT + @WEIGHT_RESERVED_TO_REMOVE,
         TOTAL_LENGTH = TOTAL_LENGTH + @LENGTH_RESERVED_TO_REMOVE
       WHERE MRP_ID IN ( SELECT M.MRP_ID 
                          FROM MRP_DETAIL (NOLOCK) md
                          JOIN MRP m (nolock) ON md.MRP_ID = m.MRP_ID
                          WHERE md.SO_DETAIL_ID = @SO_DETAIL_ID
                            AND M.PRODUCT_ID = @PRODUCT_ID);
          
    END
    ----------------------------------------------------------------------------------------------------
   
    
  END;
  /*---------------------------------------------------------------------------------------------------*/
  DECLARE @NOW DATETIME
  SET @NOW = GETDATE()

  IF EXISTS(SELECT 1 FROM TAG (NOLOCK) WHERE SKID_NUMBER = @SKID_NUMBER)
  BEGIN
    /* UnProduce activity leaves an existing record in TAG  */
    UPDATE TAG
    SET STATUS       = 'A',
        PRO_MACH_ID  = @MACHINE_ID,
        PIECES       = @START_TOTAL_QUANTITY,
        SCALE_WEIGHT = @START_TOTAL_WEIGHT
    WHERE SKID_NUMBER = @SKID_NUMBER;

    SELECT @TAG_NO = TAG_NO
    FROM TAG (NOLOCK)
    WHERE SKID_NUMBER = @SKID_NUMBER;
  END
  ELSE
  BEGIN
    EXECUTE SPU_TAG_INS_UPD @SKID_NUMBER,@PRODUCT_ID,'A','0','S',
                            @START_TOTAL_QUANTITY,@MACHINE_ID,@START_TOTAL_WEIGHT,'0',
                            @PLANT_CODE,@USER_CODE,@NOW,'0',@PLANT_ID,
                            '',NULL,'0',NULL,NULL,NULL,NULL,NULL,NULL,0,NULL,NULL,
                            0,NULL,0,NULL,0,NULL,NULL,NULL,0,NULL,NULL,NULL,
                            0,@USER_CODE,@NOW,NULL,NULL,NULL,NULL,NULL,'0',0,0,0,
                            NULL,NULL,0,0,NULL,NULL,NULL,NULL,NULL,0,0,0,0,
           
                 NULL,NULL,NULL,NULL,NULL,NULL,@TAG_NO OUTPUT, @INVENTORY_ACTIVITY_ID OUTPUT;
  END;
  ---------------------------------------------
  -- IM8795 UPDATE ACTIVITY_CODE: SPR OR SPN --
  ---------------------------------------------
 
  DECLARE @ACTIVITY_CODE VARCHAR(3); SET @ACTIVITY_CODE='';
  
  IF(COALESCE(@MILL_ID,'') = '')
  BEGIN
	  SELECT @MILL_ID=SO.MILL_ID FROM SKID S (NOLOCK)
	  JOIN SHOP_ORDER_DETAIL_SKID SODS (NOLOCK) ON S.SKID_NUMBER=SODS.SKID_NUMBER
	  JOIN SHOP_ORDER_DETAIL SOD (NOLOCK) ON SOD.SHOP_ORDER_DETAIL_ID=SODS.SHOP_ORDER_DETAIL_ID
	  JOIN SHOP_ORDER SO (NOLOCK) ON SO.SHOP_ORDER_ID=SOD.SHOP_ORDER_ID
	  WHERE S.SKID_NUMBER=@SKID_NUMBER
	  
  END  
  
  IF (@PFS = '1')
  BEGIN
	SET @ACTIVITY_CODE='SPF'
  END
  ELSE
  BEGIN
	SELECT 
	@ACTIVITY_CODE = CASE COALESCE(M.MACHINE_TYPE,'')
	WHEN 'RF' THEN 'SPR'
	ELSE  'SPN' END  
	FROM MACHINE M (NOLOCK) WHERE M.MACHINE_ID=@MILL_ID;
  END
   
  DECLARE @COMMENTS VARCHAR(100)

  SELECT TOP 1 @COMMENTS = PC.COMMENTS 
  FROM SKID S (NOLOCK)
  LEFT JOIN PRODUCT P (NOLOCK) ON S.PRODUCT_ID = P.PRODUCT_ID
  LEFT JOIN PRODUCT_CODE PC (NOLOCK) ON P.PRODUCT_CODE_CODE = PC.PRODUCT_CODE_CODE
  WHERE S.SKID_NUMBER = @SKID_NUMBER AND PC.RF_ALERT_FLAG = '1'

  EXECUTE SPU_RF_INS_SKID_INV_ACT @ACTIVITY_CODE,@SKID_NUMBER,@QUANTITY_TO_BE_PRODUCED,@START_TOTAL_QUANTITY,@WAREHOUSE_LOCATION_ID,@USER_CODE,NULL,NULL,NULL,NULL,@MILL_ID,@COMMENTS;
  EXECUTE SPU_RF_INS_TAG_INV_TRA_LOG @TAG_NO,@ACTIVITY_CODE,'S',1,0,@START_TOTAL_WEIGHT,@MATERIAL_COST, @PLANT_ID,@SKID_NUMBER,@MACHINE_ID,@SKID_TYPE_CODE,@USER_CODE;
  EXECUTE SPU_CLOSE_SKID_ORDERS @SKID_NUMBER,@USER_CODE, @UPDATE_SOURCE;
  EXECUTE SPU_ALL_SKIDS_PRODUCED_EVENT_LOG_ADD_ENTRY @SKID_NUMBER,@USER_CODE;

END TRY
BEGIN CATCH

  DECLARE @ERRMSG NVARCHAR(4000), @ERRSEVERITY INT
  SELECT @ERRMSG = ERROR_MESSAGE(),
       @ERRSEVERITY = ERROR_SEVERITY()
  RAISERROR(@ERRMSG, @ERRSEVERITY, 1)
  RETURN @ERRSEVERITY;
END CATCH
GO

/*
Changeset: 5713
Comment:   ST66498 (Ref: IM10886) - IPL Related Credits
Committer: CLARKSTEEL\cruzr
Creation Date: 08/07/2016 03:24:27 p.m.
*/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FN_SKID_ORIGINAL_PLANT]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
EXEC dbo.sp_executesql N'
CREATE FUNCTION dbo.FN_SKID_ORIGINAL_PLANT()
RETURNS INT 
BEGIN 
	RETURN NULL;
END
';
GO

ALTER FUNCTION dbo.FN_SKID_ORIGINAL_PLANT (
	@SKID_NUMBER VARCHAR(20)
)
RETURNS INT
BEGIN
	RETURN (
		SELECT SHO.PLANT_ID
		FROM dbo.SHOP_ORDER SHO (NOLOCK)
		JOIN dbo.SHOP_ORDER_DETAIL SHOD (NOLOCK) ON SHOD.SHOP_ORDER_ID = SHO.SHOP_ORDER_ID
		JOIN dbo.SHOP_ORDER_DETAIL_SKID SHODS (NOLOCK) ON SHODS.SHOP_ORDER_DETAIL_ID = SHOD.SHOP_ORDER_DETAIL_ID
		WHERE SHODS.SKID_NUMBER = @SKID_NUMBER
	);
END
GO
/*
Changeset: 5713
Comment:   ST66498 (Ref: IM10886) - IPL Related Credits
Committer: CLARKSTEEL\cruzr
Creation Date: 08/07/2016 03:24:27 p.m.
*/

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SPU_CREDIT_REQUEST_FIND_BY_PK]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[SPU_CREDIT_REQUEST_FIND_BY_PK] AS' 
END
GO

ALTER PROCEDURE [dbo].[SPU_CREDIT_REQUEST_FIND_BY_PK]
(
@CREDIT_REQUEST_ID INT 
)
AS 
BEGIN


-- CREDIT REQUEST HEADER
SELECT 
  CR.*
  ,CR.CREDIT_REQUEST_ID AS DOCUMENT_ID
  ,SU.USER_ID
  ,P.PARTNER_CODE AS CUSTOMER_CODE
  ,P.NAME
  ,PPI.PARTNER_CODE AS PRODUCTION_PLANT_CODE
  ,G.NAME AS SALESMAN_GROUP_NAME
  ,CRST.NAME AS CREDIT_REQUEST_STATUS_NAME
  ,I.INVOICE_NUMBER
  ,SO.SO_NUMBER
  ,SO.EXTERNAL_REFERENCE
  ,SO.SALES_ORDER_TYPE_CODE
  ,T.TERMS_CODE
  ,T.NAME AS TERMS_NAME
  ,PLA.INVOICE_PRINTOUT_FORMAT_CODE ACCOUNTING_PLANT_REPORT_TEMPLATE_CODE  
  ,LE.DISPLAY_NAME LEGAL_ENTITY_DISPLAY_NAME
  ,PLA.DISPLAY_NAME ACCOUNTING_PLANT_DISPLAY_NAME
  ,SOT.ACKNOWLEDGEMENT_INSTRUCTIONS
  ,LE.LEGAL_ENTITY_CODE
  ,P.NAME AS CUSTOMER_NAME
  ,SO.SO_ID
  ,I.AMOUNT AS INVOICE_AMOUNT
  ,WD_CR.WF_DOCUMENT_COMMENTS AS REJECTED_COMMENTS
  ,CI.NATIONAL_ACCOUNT
  ,CI.CAN_USE_LIMITED_CHARGES   
FROM CREDIT_REQUEST CR (NOLOCK) 
LEFT JOIN PARTNER P (NOLOCK) ON CR.CUSTOMER_ID = P.PARTNER_ID 
LEFT JOIN CUSTOMER_INFO CI (NOLOCK) ON CI.PARTNER_ID=P.PARTNER_ID
LEFT JOIN TERMS T (NOLOCK) ON T.TERMS_CODE = CI.TERMS_CODE
LEFT JOIN PARTNER PPI (NOLOCK) ON CR.PRODUCTION_PLANT_ID = PPI.PARTNER_ID 
LEFT JOIN INVOICE I (NOLOCK) ON CR.ORIGINAL_INVOICE_ID= I.INVOICE_ID
LEFT JOIN SALES_ORDER SO (NOLOCK) ON I.SO_ID= SO.SO_ID
LEFT JOIN GENERAL_TABLE G (NOLOCK) ON CR.SALESMAN_GROUP= G.CODE AND G.TABLE_NAME='SALES_REPRESENTATIVE'
LEFT JOIN CREDIT_REQUEST_STATE_TYPE CRST (NOLOCK) ON CRST.STATE_TYPE_CODE=CR.CURRENT_STATE_TYPE_CODE
LEFT JOIN PLANT_INFO PP (NOLOCK) ON PP.PARTNER_ID = PPI.PARTNER_ID
LEFT JOIN PLANT PLA (NOLOCK) ON PP.ACCOUNTING_PLANT_CODE=PLA.PLANT_CODE
LEFT JOIN SECURITY_USER SU (NOLOCK) ON SU.USER_CODE = CR.CREATED_BY
LEFT JOIN LEGAL_ENTITY LE (NOLOCK) ON LE.LEGAL_ENTITY_CODE = PLA.LEGAL_ENTITY_CODE
JOIN SALES_ORDER_TYPE SOT (NOLOCK) ON SOT.SALES_ORDER_TYPE_CODE = 'CM'
LEFT JOIN WF_DOCUMENT WD_CR (NOLOCK) ON (WD_CR.WF_DOCUMENT_CURRENT_STATUS = 'R' 
                                           AND WD_CR.DOCUMENT_ID = CR.CREDIT_REQUEST_ID
                                           AND WD_CR.WF_DOCUMENT_TYPE_CODE = 'CRE')

WHERE (CR.CREDIT_REQUEST_ID = @CREDIT_REQUEST_ID)

-- CREDIT REQUEST INVOICE DETAIL
SELECT			
		CRD.CREDIT_REQUEST_DETAIL_ID
		,CRD.CREDIT_REQUEST_ID
		,CRD.ORIGINAL_INVOICE_DETAIL_ID
		,CRD.ADJUSTED_UNIT_PRICE
		,CRD.CREDIT_UNIT_PRICE
		,CRD.PRICE_TYPE
		,CRD.CREDIT_QTY
		,CRD.NET_AMOUNT
		,CRD.NET_WEIGHT
		,CRD.NET_LENGTH
		,CRD.CREATED_BY
		,CRD.CREATION_DATE
		,CRD.UPDATED_BY
		,CRD.UPDATED_DATE
		,SOD.QUANTITY AS CREDIT_QTY		
		,ID.LINE INVOICE_LINE
		,ID.DETAIL_TYPE
		,ID.TAXABLE_FLAG
		,ID.SQUARE_YARDS
		,ID.THOUSAND_LINEAR_FEET
		,SOD.LINE AS SO_LINE
		,ID.DESCRIPTION
		,ID.QUANTITY AS INVOICE_QTY
		,ID.WEIGHT INVOICE_WEIGHT
		,ID.LENGTH INVOICE_LENGTH
		,ID.AMOUNT INVOICE_AMOUNT		
		, (
				SELECT ISNULL(SUM(CRDI.CREDIT_QTY),0) 
				FROM CREDIT_REQUEST_DETAIL CRDI(NOLOCK) 
				WHERE CRDI.ORIGINAL_INVOICE_DETAIL_ID = ID.INVOICE_DETAIL_ID 
				AND CRDI.CREDIT_REQUEST_ID <> CRD.CREDIT_REQUEST_ID
				AND CRDI.CREATION_DATE < CRD.CREATION_DATE
			)  PREV_CREDIT_QTY		
		,(ID.AMOUNT - (DBO.FN_GET_REMAINING_AMOUNT_FOR_CREDIT_REQUEST(ID.INVOICE_DETAIL_ID,CRD.CREDIT_REQUEST_ID,CRD.CREATION_DATE)))
		 AS AVAILABLE_NET_AMOUNT
		,ID.UNIT_PRICE AS INVOICE_UNIT_PRICE
		,ID.UNIT_PRICE_PER_EACH		
		,P.PRODUCT_NO
		,COALESCE(SOD.PRODUCT_NAME,ID.DESCRIPTION) AS PRODUCT_NAME
		,SOD.KSI_CODE
		,SOD.COAT_SPEC_CODE
		,SOD.P_U
		,SOD.SELL_MEASURE_UNIT_CODE
		,SOD.FEET
		,SOD.INCHES
		,CRD.CREDIT_UNIT_PRICE AS UNIT_PRICE
		,SOD.UNIT_PRICE_PER_WEIGHT
		,SOD.UNIT_PRICE_PER_WEIGHT_UNIT
		,SOD.TOTAL_WEIGHT_NVM
		,P.PRODUCT_LINE_CODE
		,ID.LINE
		,CRD.CREDIT_QTY AS QUANTITY
		,SOD.SO_DETAIL_ID
		,'' AS ENTITY_EVENT_TYPE_CODE
		,SO.SO_NUMBER		
		,(
			SELECT ISNULL(SUM(dbo.FN_GET_SKID_QUANTITY(INVDS.SKID_NUMBER)), 0)
			FROM dbo.INVOICE_DETAIL_SKID INVDS (NOLOCK) 
			JOIN dbo.PARTNER ORIGP (NOLOCK) ON ORIGP.PARTNER_ID = dbo.FN_SKID_ORIGINAL_PLANT(INVDS.SKID_NUMBER)
			WHERE INVDS.INVOICE_DETAIL_ID = ID.INVOICE_DETAIL_ID AND ORIGP.PARTNER_ID <> INV.PRODUCTION_PLANT_ID AND ORIGP.PARTNER_ID = ISNULL(CR.IPL_PLANT_ID, ORIGP.PARTNER_ID)
		) IPL_QTY 
FROM CREDIT_REQUEST_DETAIL CRD(NOLOCK)
JOIN dbo.CREDIT_REQUEST CR (NOLOCK) ON CR.CREDIT_REQUEST_ID = CRD.CREDIT_REQUEST_ID
JOIN INVOICE_DETAIL ID (NOLOCK) ON ID.INVOICE_DETAIL_ID = CRD.ORIGINAL_INVOICE_DETAIL_ID
JOIN INVOICE INV (NOLOCK) ON INV.INVOICE_ID = ID.INVOICE_ID
LEFT JOIN SALES_ORDER_DETAIL SOD (NOLOCK) ON ID.DOCUMENT_DETAIL_ID = SOD.SO_DETAIL_ID AND ID.DETAIL_TYPE = 'D'
LEFT JOIN SALES_ORDER SO (NOLOCK) ON SO.SO_ID=SOD.SO_ID
LEFT JOIN SALES_ORDER_CHARGE SOC(NOLOCK) ON ID.DOCUMENT_DETAIL_ID = SOC.SALES_ORDER_CHARGE_ID AND ID.DETAIL_TYPE IN ('S','N')
LEFT JOIN PRODUCT P (NOLOCK) ON P.PRODUCT_ID = SOD.PRODUCT_ID
WHERE (CRD.CREDIT_REQUEST_ID = @CREDIT_REQUEST_ID)


-- CREDIT REQUEST CHARGE
SELECT CRC.*,
		OSC.NAME CHARGE_NAME,
		OSC.SIGN_FACTOR
FROM CREDIT_REQUEST_CHARGE CRC (NOLOCK)
JOIN OE_SPECIAL_CHARGES OSC (NOLOCK) ON CRC.CHARGE_CODE = OSC.CHARGE_CODE
WHERE (CRC.CREDIT_REQUEST_ID = @CREDIT_REQUEST_ID);
	
-- CREDIT REQUEST COMMISSION
SELECT 
  CRC.*, 
  SA.NAME AS SALESMAN_NAME 
FROM CREDIT_REQUEST_COMMISSION CRC (NOLOCK)
  INNER JOIN SALESMAN SA (NOLOCK) ON CRC.SALESMAN_CODE = SA.SALESMAN_CODE 
WHERE (CRC.CREDIT_REQUEST_ID = @CREDIT_REQUEST_ID);

-- CREDIT REQUEST TAXES
SELECT CRT.*,
		T.NAME TAX_NAME
FROM CREDIT_REQUEST_TAX CRT (NOLOCK)
JOIN TAX T (NOLOCK) ON T.TAX_CODE = CRT.TAX_CODE
WHERE (CRT.CREDIT_REQUEST_ID = @CREDIT_REQUEST_ID);

-- CREDIT REQUEST STATE
SELECT	CRS.*,
		CRST.NAME STATE_TYPE_NAME
FROM CREDIT_REQUEST_STATE CRS (NOLOCK)
JOIN CREDIT_REQUEST_STATE_TYPE CRST (NOLOCK) ON CRS.STATE_TYPE_CODE = CRST.STATE_TYPE_CODE
WHERE (CRS.CREDIT_REQUEST_ID = @CREDIT_REQUEST_ID);

SELECT	
		CR.CREDIT_REQUEST_ID,
		
		
		--BILL TO:  BILL_TO_ATTENTION 
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL THEN V_INV_CONTACT.NAME  
		ELSE V_CUS_BILL_TO_CONTACT.NAME 
		END AS BILL_TO_ATTENTION,
		
		--BILL TO:  BILL_TO_LOCATION_NAME
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL THEN V_INV_BILL_TO_ADDRESS.LOCATION_NAME 
		ELSE V_CUS_BILL_TO_ADDRESS.LOCATION_NAME 
		END AS BILL_TO_LOCATION_NAME,
		
		--BILL TO:  BILL_TO_LOCATION_NUMBER
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL THEN V_INV_BILL_TO_ADDRESS.LOCATION_NUMBER 
		ELSE V_CUS_BILL_TO_ADDRESS.LOCATION_NUMBER 
		END AS BILL_TO_LOCATION_NUMBER,
		
		--BILL TO:  BILL_TO_ADDRESS_1 
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL THEN V_INV_BILL_TO_ADDRESS.ADDRESS_1 
		ELSE V_CUS_BILL_TO_ADDRESS.ADDRESS_1 
		END AS BILL_TO_ADDRESS_1,
		
		--BILL TO:  BILL_TO_ADDRESS_2 
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL THEN V_INV_BILL_TO_ADDRESS.ADDRESS_2
		ELSE V_CUS_BILL_TO_ADDRESS.ADDRESS_2 
		END AS BILL_TO_ADDRESS_2,
		
		--BILL TO:  BILL_TO_CUSTOMER_NAME
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL THEN INV_PAR.NAME
		ELSE CRE_CUS.NAME 
		END AS BILL_TO_CUSTOMER_NAME,

		--BILL TO:  BILL_TO_STATE_CODE 
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL THEN INV_BILL_TO_STATE.STATE_CODE
		ELSE CUS_BILL_TO_STATE.STATE_CODE 
		END AS BILL_TO_STATE_CODE,
		
		--BILL TO:  BILL_TO_STATE_ID 
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL THEN INV_BILL_TO_STATE.STATE_ID
		ELSE CUS_BILL_TO_STATE.STATE_ID 
		END AS BILL_TO_STATE_ID,
		
		--BILL TO:  BILL_TO_COUNTRY_CODE 
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL THEN V_INV_BILL_TO_ADDRESS.COUNTRY_CODE
		ELSE V_CUS_BILL_TO_ADDRESS.COUNTRY_CODE 
		END AS BILL_TO_COUNTRY_CODE,		
		
		--BILL TO:  BILL_TO_PROVINCE 
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL  THEN V_INV_BILL_TO_ADDRESS.PROVINCE
		ELSE V_CUS_BILL_TO_ADDRESS.PROVINCE 
		END AS BILL_TO_PROVINCE,				

		--BILL TO:  BILL_TO_ZIP_CODE 
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL THEN V_INV_BILL_TO_ADDRESS.ZIP_CODE
		ELSE V_CUS_BILL_TO_ADDRESS.ZIP_CODE 
		END AS BILL_TO_ZIP_CODE,				
		
		--BILL TO:  BILL_TO_PHONE 
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL THEN V_INV_CONTACT.PHONE   
		ELSE V_CUS_BILL_TO_CONTACT.PHONE 
		END AS BILL_TO_PHONE,
		
		--BILL TO:  BILL_TO_FAX 
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL THEN V_INV_CONTACT.FAX  
		ELSE V_CUS_BILL_TO_CONTACT.FAX 
		END AS BILL_TO_FAX,
		
		--BILL TO:  BILL_TO_EMAIL
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL THEN V_INV_CONTACT.EMAIL  
		ELSE V_CUS_BILL_TO_CONTACT.EMAIL 
		END AS BILL_TO_EMAIL,
		
		------------------------------------------------------------------------------------				
		
		--SHIP TO:  SHIP_TO_ATTENTION
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NOT NULL THEN BLO.SHIP_TO_ATTENTION 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NULL THEN SOSA.ATTENTION  
		ELSE V_CUS_SHIP_TO_CONTACT.NAME 
		END AS SHIP_TO_ATTENTION,
		
		--SHIP TO:  SHIP_TO_LOCATION_NAME
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NOT NULL THEN BL.SHIP_TO_LOCATION_NAME 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NULL THEN SOSA.LOCATION_NAME  
		ELSE V_CUS_SHIP_TO_ADDRESS.LOCATION_NAME 
		END AS SHIP_TO_LOCATION_NAME,
		
		--SHIP TO:  SHIP_TO_LOCATION_NUMBER
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NOT NULL THEN BL.SHIP_TO_LOCATION_NUMBER 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NULL THEN SOSA.LOCATION_NUMBER
		ELSE V_CUS_SHIP_TO_ADDRESS.LOCATION_NUMBER 
		END AS SHIP_TO_LOCATION_NUMBER,
		
		--SHIP TO:  SHIP_TO_ADDRESS_1
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NOT NULL THEN BL.SHIP_TO_ADDRESS_1 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NULL THEN SOSA.ADDRESS_1
		ELSE V_CUS_SHIP_TO_ADDRESS.ADDRESS_1  
		END AS SHIP_TO_ADDRESS_1,
		
		--SHIP TO:  SHIP_TO_ADDRESS_2
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NOT NULL THEN BL.SHIP_TO_ADDRESS_2 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NULL THEN SOSA.ADDRESS_2
		ELSE V_CUS_SHIP_TO_ADDRESS.ADDRESS_2  
		END AS SHIP_TO_ADDRESS_2,
		
		--SHIP TO:  SHIP_TO_STATE_ID	
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NOT NULL THEN BL.SHIP_TO_STATE_ID 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NULL THEN SOSA.STATE_ID
		ELSE CUS_SHIP_TO_STATE.STATE_ID 
		END AS SHIP_TO_STATE_ID,
		
		--SHIP TO:  SHIP_TO_STATE	
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NOT NULL THEN INV_SHIP_TO_STATE.STATE_CODE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NULL THEN SOSAS.STATE_CODE
		ELSE CUS_SHIP_TO_STATE.STATE_CODE 
		END AS SHIP_TO_STATE_CODE,		
		
		--SHIP TO:  SHIP_TO_COUNTRY_CODE
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NOT NULL THEN BL.SHIP_TO_COUNTRY_CODE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NULL THEN SOSA.COUNTRY_CODE
		ELSE V_CUS_SHIP_TO_ADDRESS.COUNTRY_CODE 
		END AS SHIP_TO_COUNTRY_CODE,

		--SHIP TO:  SHIP_TO_PROVINCE
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NOT NULL THEN BL.SHIP_TO_PROVINCE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NULL THEN SOSA.PROVINCE
		ELSE V_CUS_SHIP_TO_ADDRESS.PROVINCE 
		END AS SHIP_TO_PROVINCE,
		
		--SHIP TO:  SHIP_TO_ZIP_CODE
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NOT NULL THEN BL.SHIP_TO_ZIP_CODE  
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NULL THEN SOSA.ZIP_CODE
		ELSE V_CUS_SHIP_TO_ADDRESS.ZIP_CODE 
		END AS SHIP_TO_ZIP_CODE,
		
		--SHIP TO:  SHIP_TO_PHONE
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NOT NULL THEN BLO.SHIP_TO_PHONE   
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NULL THEN SOSA.PHONE
		ELSE V_CUS_SHIP_TO_CONTACT.PHONE 
		END AS SHIP_TO_PHONE,
		
		--SHIP TO:  SHIP_TO_FAX
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NOT NULL THEN BLO.SHIP_TO_FAX
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NULL THEN SOSA.FAX  
		ELSE V_CUS_SHIP_TO_CONTACT.FAX 
		END AS SHIP_TO_FAX,
		
		--SHIP TO:  SHIP_TO_EMAIL
		CASE 
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NOT NULL THEN BLO.SHIP_TO_EMAIL
		WHEN CR.ORIGINAL_INVOICE_ID IS NOT NULL AND I.BL_ORDER_ID IS NULL THEN SOSA.EMAIL  
		ELSE V_CUS_SHIP_TO_CONTACT.EMAIL 
		END AS SHIP_TO_EMAIL


FROM CREDIT_REQUEST CR (NOLOCK)
LEFT JOIN INVOICE I (NOLOCK) ON I.INVOICE_ID = CR.ORIGINAL_INVOICE_ID
LEFT JOIN PARTNER INV_PAR (NOLOCK) ON I.CUSTOMER_ID = INV_PAR.PARTNER_ID 
LEFT JOIN V_PARTNER_ADDRESS V_INV_BILL_TO_ADDRESS (NOLOCK) ON (V_INV_BILL_TO_ADDRESS.PARTNER_ID = INV_PAR.PARTNER_ID  
                                                   AND V_INV_BILL_TO_ADDRESS.PARTNER_ADDRESS_TYPE_CODE = 'BA'
                                                   AND V_INV_BILL_TO_ADDRESS.YARD_FLAG = '1'
                                                   AND V_INV_BILL_TO_ADDRESS.PARTNER_ADDRESS_STATUS_TYPE_CODE = 'A')                   LEFT JOIN V_PARTNER_CONTACT V_INV_CONTACT (NOLOCK) ON (V_INV_CONTACT.PARTNER_ID = INV_PAR.PARTNER_ID  
                                                  AND V_INV_CONTACT.PARTNER_ADDRESS_TYPE_CODE = 'BA'
                                                  AND V_INV_CONTACT.DEFAULT_FLAG = '1')                          
LEFT JOIN BL_ORDER BLO (NOLOCK) ON I.BL_ORDER_ID = BLO.BL_ORDER_ID
LEFT JOIN BL BL (NOLOCK) ON BLO.BL_ID = BL.BL_ID 
LEFT JOIN STATE INV_BILL_TO_STATE (NOLOCK) ON (V_INV_BILL_TO_ADDRESS.STATE_ID = INV_BILL_TO_STATE.STATE_ID)
LEFT JOIN STATE INV_SHIP_TO_STATE (NOLOCK) ON BLO.SHIP_TO_STATE_ID = INV_SHIP_TO_STATE.STATE_ID 
LEFT JOIN SALES_ORDER_ADDRESS SOSA (NOLOCK) ON I.SO_ID = SOSA.SO_ID AND SOSA.ADDRESS_TYPE = 'SA' 
LEFT JOIN STATE SOSAS (NOLOCK) ON SOSA.STATE_ID = SOSAS.STATE_ID 

-----------------------------------------------------------------------------------------------------------                           
LEFT JOIN PARTNER CRE_CUS (NOLOCK) ON CR.CUSTOMER_ID = CRE_CUS.PARTNER_ID 
LEFT JOIN V_PARTNER_ADDRESS V_CUS_BILL_TO_ADDRESS (NOLOCK) ON (V_CUS_BILL_TO_ADDRESS.PARTNER_ID = CRE_CUS.PARTNER_ID  
                                                   AND V_CUS_BILL_TO_ADDRESS.PARTNER_ADDRESS_TYPE_CODE = 'BA'
                                                   AND V_CUS_BILL_TO_ADDRESS.YARD_FLAG = '1'
                                                   AND V_CUS_BILL_TO_ADDRESS.PARTNER_ADDRESS_STATUS_TYPE_CODE = 'A')                   LEFT JOIN V_PARTNER_CONTACT V_CUS_BILL_TO_CONTACT (NOLOCK) ON (V_CUS_BILL_TO_CONTACT.PARTNER_ID = CRE_CUS.PARTNER_ID  
                                                  AND V_CUS_BILL_TO_CONTACT.PARTNER_ADDRESS_TYPE_CODE = 'BA'
                                                  AND V_CUS_BILL_TO_CONTACT.DEFAULT_FLAG = '1')                          
LEFT JOIN V_PARTNER_ADDRESS V_CUS_SHIP_TO_ADDRESS (NOLOCK) ON (V_CUS_SHIP_TO_ADDRESS.PARTNER_ID = CRE_CUS.PARTNER_ID  
                                                   AND V_CUS_SHIP_TO_ADDRESS.PARTNER_ADDRESS_TYPE_CODE = 'SA'
                                                   AND V_CUS_SHIP_TO_ADDRESS.YARD_FLAG = '1'
                                                   AND V_CUS_SHIP_TO_ADDRESS.PARTNER_ADDRESS_STATUS_TYPE_CODE = 'A')                   LEFT JOIN V_PARTNER_CONTACT V_CUS_SHIP_TO_CONTACT (NOLOCK) ON (V_CUS_SHIP_TO_CONTACT.PARTNER_ID = CRE_CUS.PARTNER_ID  
                                                  AND V_CUS_SHIP_TO_CONTACT.PARTNER_ADDRESS_TYPE_CODE = 'SA'
                                                  AND V_CUS_SHIP_TO_CONTACT.DEFAULT_FLAG = '1')                          
LEFT JOIN STATE CUS_BILL_TO_STATE (NOLOCK) ON CUS_BILL_TO_STATE.STATE_ID = V_CUS_BILL_TO_ADDRESS.STATE_ID
LEFT JOIN STATE CUS_SHIP_TO_STATE (NOLOCK) ON CUS_SHIP_TO_STATE.STATE_ID = V_CUS_SHIP_TO_ADDRESS.STATE_ID

WHERE (CR.CREDIT_REQUEST_ID = @CREDIT_REQUEST_ID );

END;

GO

/*
Changeset: 5713
Comment:   ST66498 (Ref: IM10886) - IPL Related Credits
Committer: CLARKSTEEL\cruzr
Creation Date: 08/07/2016 03:24:27 p.m.
*/

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SPU_GET_PREV_CREDIT_IPL_QTY_FOR_CR]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[SPU_GET_PREV_CREDIT_IPL_QTY_FOR_CR] AS' 
END
GO

ALTER PROCEDURE [dbo].[SPU_GET_PREV_CREDIT_IPL_QTY_FOR_CR]
(
	@INVOICE_DETAIL_ID INT,
	@IPL_PLANT_ID INT,
	@EXC_CREDIT_REQUEST_DETAIL_ID INT
)
AS 
BEGIN
	SELECT ISNULL(SUM(CRD.CREDIT_QTY), 0)
	FROM dbo.CREDIT_REQUEST_DETAIL CRD (NOLOCK) 
	JOIN dbo.CREDIT_REQUEST CR (NOLOCK) ON CR.CREDIT_REQUEST_ID = CRD.CREDIT_REQUEST_ID
	LEFT JOIN dbo.CREDIT_REQUEST_DETAIL CRDEXC (NOLOCK) ON CRDEXC.CREDIT_REQUEST_DETAIL_ID = @EXC_CREDIT_REQUEST_DETAIL_ID
	WHERE CR.IPL_PLANT_ID = @IPL_PLANT_ID AND CRD.ORIGINAL_INVOICE_DETAIL_ID = @INVOICE_DETAIL_ID
	AND CRD.CREDIT_REQUEST_DETAIL_ID <> @EXC_CREDIT_REQUEST_DETAIL_ID
	AND CRD.CREATION_DATE < CRDEXC.CREATION_DATE
END
GO
/*
Changeset: 5713
Comment:   ST66498 (Ref: IM10886) - IPL Related Credits
Committer: CLARKSTEEL\cruzr
Creation Date: 08/07/2016 03:24:27 p.m.
*/

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SPU_INVOICE_FIND_BY_PK]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[SPU_INVOICE_FIND_BY_PK] AS' 
END
GO

ALTER PROCEDURE [dbo].[SPU_INVOICE_FIND_BY_PK] 
( 
  @INVOICE_ID INTEGER 
) 
AS 

DECLARE @INVOICE_SOURCE VARCHAR(2);
DECLARE @SO_ID_TOLL INT;

SELECT @INVOICE_SOURCE = INVOICE_SOURCE,
       @SO_ID_TOLL = COALESCE(SO_ID, 0)
  FROM INVOICE WHERE INVOICE_ID = @INVOICE_ID;

--INVOICE======================================================
  SELECT I.[INVOICE_ID]
        ,I.[INVOICE_NUMBER]
        ,I.[INVOICE_DATE]
        ,I.[ACC_PERIOD_CODE]
        ,I.[TERMS_CODE]
        ,I.[DUE_DATE]
        ,I.[DISCOUNT_DATE]
        ,I.[DISCOUNT_RATE]
        ,I.[DISCOUNT_AMOUNT]
        ,I.[CURRENCY_CODE]
	    ,I.[SUB_AMOUNT]
	    ,I.[TAX_AMOUNT]
	    ,I.[AMOUNT]
	    ,I.[WEIGHT_UNIT_CODE]
	    ,I.[TOTAL_WEIGHT]
	    ,I.[LENGTH_UNIT_CODE]
	    ,I.[CREATED_BY]
	    ,I.[CREATION_DATE]
	    ,I.[STATUS]
	    ,I.[ACCOUNTING_PLANT_CODE]
	    ,I.[NON_TAXABLE_AMOUNT]
	    ,I.[TOTAL_LENGTH]
	    ,I.[SO_ID]
	    ,I.[ACC_TRANSACTION_TYPE_CODE]
	    ,I.[ACC_ENTRY]
	    ,V_ADDRESS.ADDRESS_1 AS [BILL_TO_ADDRESS_1]
	    ,V_ADDRESS.ADDRESS_2 AS [BILL_TO_ADDRESS_2]
	    ,V_ADDRESS.COUNTRY_CODE AS [BILL_TO_COUNTRY_CODE]
	    ,BILL_TO_STATE.STATE_CODE AS BILL_TO_STATE_CODE
	    ,V_ADDRESS.PROVINCE AS [BILL_TO_PROVINCE]
	    ,V_ADDRESS.ZIP_CODE AS [BILL_TO_ZIP_CODE]
	    ,I.[BILL_TO_ATTENTION]	    
	    ,I.[BILL_TO_STATE_ID]	    
	    ,I.[BILL_TO_PHONE]      
        ,I.[BILL_TO_FAX]
        ,I.[BILL_TO_EMAIL]	    
	    ,I.[DELIVERED_FLAG]
	    ,I.[DELIVERED_DATE]
	    ,I.[CUSTOMER_ID]
	    ,I.[CUSTOMER_NAME]
	    ,I.[PRODUCTION_PLANT_ID]
	    ,I.[NVM_PERCENTAGE]
	    ,I.[TOTAL_WEIGHT_NVM]
	    ,I.[NVM_WEIGHT_UNIT_CODE]
	    ,I.[CUSTOMER_ACCOUNTING_PLANT_CODE]
	    ,I.[POST_ACCOUNT_CODE]
	    ,I.[POST_DEPARTMENT_CODE]
	    ,I.[POST_PLANT_CODE]
	    ,I.[BILL_TO_LOCATION_NAME]
	    ,I.[BILL_TO_LOCATION_NUMBER]
	    ,I.[AMOUNT_FOR_DISCOUNT]
	    ,I.[CURRENT_VERSION_NO]
	    ,I.[UPDATED_BY]
	    ,I.[UPDATE_DATE]
	    ,I.[BL_ORDER_ID]
	    ,I.[LEGAL_ENTITY_CODE]
        ,I.[SALESMAN_GROUP]
        ,I.INVOICE_SOURCE
        ,I.INVOICE_TYPE
        ,PL.PARTNER_CODE AS PRODUCTION_PLANT_CODE, 
		CU.PARTNER_CODE AS CUSTOMER_CODE, 
		BL.BL_NO, 
		CASE 
		WHEN I.BL_ORDER_ID IS NOT NULL THEN BLO.SO_ID 
		WHEN I.SO_ID IS NOT NULL THEN SO.SO_ID 
		ELSE NULL 
		END AS SO_ID, 
		
		CASE 
		WHEN I.INVOICE_SOURCE = 'RA' THEN dbo.FN_GET_ORIG_SALES_ORDER_BY_RA(I.RETURN_AUTHORIZATION_ID)
		ELSE 		
		  CASE 
		   WHEN I.BL_ORDER_ID IS NOT NULL THEN BLO.SO_NUMBER 
		   WHEN I.SO_ID IS NOT NULL THEN SO.SO_NUMBER 
		   ELSE NULL 
		  END		
		END AS SO_NUMBER, 
		
		CASE 
		WHEN I.BL_ORDER_ID IS NOT NULL THEN BLO.SO_EXTERNAL_REFERENCE 
		WHEN I.SO_ID IS NOT NULL THEN SO.EXTERNAL_REFERENCE 
		WHEN I.RETURN_AUTHORIZATION_ID IS NOT NULL THEN dbo.FN_GET_SO_EXTERNAL_REFERENCE_BY_RA(I.RETURN_AUTHORIZATION_ID)
		ELSE NULL
		END AS SO_EXTERNAL_REFERENCE, 
		CASE 
		WHEN I.BL_ORDER_ID IS NOT NULL THEN BLO.SO_EXTERNAL_REFERENCE_DATE 
		WHEN I.SO_ID IS NOT NULL THEN SO.EXTERNAL_REFERENCE_DATE 
		ELSE NULL 
		END AS SO_EXTERNAL_REFERENCE_DATE, 
		
		CASE 
		WHEN I.INVOICE_SOURCE = 'RA' THEN dbo.FN_GET_ORIG_SALES_ORDER_DATE_BY_RA(I.RETURN_AUTHORIZATION_ID)
		ELSE SO.SO_DATE
		END AS SO_DATE,
		
		SO.CWD_PROJECT_NUMBER AS SO_CWD_PROJECT_NUMBER,
		SO.SALES_ORDER_TYPE_CODE,
		
		CASE 
		WHEN I.INVOICE_SOURCE = 'RA' THEN 'Credit Memo'
		WHEN I.INVOICE_SOURCE = 'CR' THEN 'Credit Memo'
		ELSE SOT.NAME 
		END AS SALES_ORDER_TYPE_NAME, 

		SOT.ACC_SIGN_FACTOR, 
		BL.SHIP_FROM_PLANT_ID, 
		BLPL.PARTNER_CODE AS SHIP_FROM_PLANT_CODE,
		VPLMA.PROVINCE AS SHIP_FROM_PROVINCE,
		VPLMA.STATE_ID AS SHIP_FROM_STATE_ID, 
		VPLMAS.STATE_CODE AS SHIP_FROM_STATE_CODE, 
		VPLMA.COUNTRY_CODE AS SHIP_FROM_COUNTRY_CODE, 
		CASE 
		WHEN I.BL_ORDER_ID IS NOT NULL THEN BL.SHIP_TO_LOCATION_NUMBER 
		WHEN I.SO_ID IS NOT NULL THEN SOSA.LOCATION_NUMBER 
		ELSE NULL 
		END AS SHIP_TO_LOCATION_NUMBER, 
		CASE 
		WHEN I.BL_ORDER_ID IS NOT NULL THEN BL.SHIP_TO_LOCATION_NAME 
		WHEN I.SO_ID IS NOT NULL THEN SOSA.LOCATION_NAME 
		ELSE NULL 
		END AS SHIP_TO_LOCATION_NAME, 
		CASE 
		WHEN I.BL_ORDER_ID IS NOT NULL THEN BL.SHIP_TO_ADDRESS_1 
		WHEN I.SO_ID IS NOT NULL THEN SOSA.ADDRESS_1 
		ELSE NULL 
		END AS SHIP_TO_ADDRESS_1, 
		CASE 
		WHEN I.BL_ORDER_ID IS NOT NULL THEN BL.SHIP_TO_ADDRESS_2 
		WHEN I.SO_ID IS NOT NULL THEN SOSA.ADDRESS_2 
		ELSE NULL 
		END AS SHIP_TO_ADDRESS_2, 
		CASE 
		WHEN I.BL_ORDER_ID IS NOT NULL THEN BLO.SHIP_TO_ATTENTION 
		WHEN I.SO_ID IS NOT NULL THEN SOSA.ATTENTION 
		ELSE NULL 
		END AS SHIP_TO_ATTENTION, 
		CASE 
		WHEN I.BL_ORDER_ID IS NOT NULL THEN BL.SHIP_TO_COUNTRY_CODE 
		WHEN I.SO_ID IS NOT NULL THEN SOSA.COUNTRY_CODE 
		ELSE NULL 
		END AS SHIP_TO_COUNTRY_CODE, 
		CASE 
		WHEN I.BL_ORDER_ID IS NOT NULL THEN BL.SHIP_TO_STATE_ID 
		WHEN I.SO_ID IS NOT NULL THEN SOSA.STATE_ID 
		ELSE NULL 
		END AS SHIP_TO_STATE_ID, 
		CASE 
		WHEN I.BL_ORDER_ID IS NOT NULL THEN SSA.STATE_CODE 
		WHEN I.SO_ID IS NOT NULL THEN SOSAS.STATE_CODE 
		ELSE NULL 
		END AS SHIP_TO_STATE_CODE, 
		CASE 
		WHEN I.BL_ORDER_ID IS NOT NULL THEN BL.SHIP_TO_PROVINCE 
		WHEN I.SO_ID IS NOT NULL THEN SOSA.PROVINCE 
		ELSE NULL 
		END AS SHIP_TO_PROVINCE, 
		CASE 
		WHEN I.BL_ORDER_ID IS NOT NULL THEN BLO.SHIP_TO_PHONE 
		WHEN I.SO_ID IS NOT NULL THEN SOSA.PHONE 
		ELSE NULL 
		END AS SHIP_TO_PHONE, 
		CASE 
		WHEN I.BL_ORDER_ID IS NOT NULL THEN BL.SHIP_TO_ZIP_CODE 
		WHEN I.SO_ID IS NOT NULL THEN SOSA.ZIP_CODE 
		ELSE NULL 
		END AS SHIP_TO_ZIP_CODE, 
		CASE 
		WHEN I.BL_ORDER_ID IS NOT NULL THEN BLO.SHIP_TO_FAX 
		WHEN I.SO_ID IS NOT NULL THEN SOSA.FAX 
		ELSE NULL 
		END AS SHIP_TO_FAX, 
		CASE 
		WHEN I.BL_ORDER_ID IS NOT NULL THEN BLO.SHIP_TO_EMAIL 
		WHEN I.SO_ID IS NOT NULL THEN SOSA.EMAIL 
		ELSE NULL 
		END AS SHIP_TO_EMAIL, 
		BL.PAYMENT_TYPE_CODE, 		
		APL.LEGAL_ENTITY_CODE, 
		LE.CURRENCY_CODE AS LEGAL_ENTITY_CURRENCY_CODE,
		APL.INVOICE_PRINTOUT_FORMAT_CODE AS PLANT_PRINTOUT_FORMAT_CODE,
		TE.NAME AS TERMS_NAME, 
		TR.TRUCK_ROUTE_ID, 
		TR.GROUP_NO, 
		TR.TRUCK_NO, 
		TR.ACTUAL_SHIP_DATE, 
		TRS.TRUCK_ROUTE_STOP_ID, 
		TRS.STOP_NO, 
		TB.TRUCK_BOOKING_ID,
		SO.CREATED_BY AS SO_CREATED_BY, 
		COALESCE(SO.CREDIT_REASON_CODE,I.CREDIT_REASON_CODE) AS CREDIT_REASON_CODE,
		SO.APPROVAL_NUMBER,
		LE.DISPLAY_NAME,
		
		CASE 
		WHEN I.INVOICE_SOURCE = 'RA' THEN CR_INV.NAME
		WHEN I.INVOICE_SOURCE = 'CR' THEN CR_INV.NAME
		ELSE CR.NAME
		END AS CREDIT_REASON,
		
		CASE 
		WHEN I.INVOICE_SOURCE = 'RA' THEN dbo.FN_GET_ORIG_INVOICE_BY_RA(I.RETURN_AUTHORIZATION_ID)
		WHEN I.INVOICE_SOURCE = 'CR' THEN INV_CRQ.INVOICE_NUMBER
		ELSE NULL 
		END AS ORIGINAL_INVOICE_NUMBER, 
				
		CRQ.PRINT_COMMENT_ON_CREDIT_MEMO,
		CRQ.COMMENTS AS CREDIT_REQUEST_COMMENTS,		
        COALESCE(I.IS_AMOUNT_CHANGE, 0) AS IS_AMOUNT_CHANGE,
        BLO.BL_ID,
        PI.DELAY_INVOICING,
        SO.CURRENT_STATE_TYPE_CODE AS SO_CURRENT_STATE_TYPE_CODE,
        I.TOLL_PROCESSING_ID,
        I.NOT_POSTED_REASON,
        I.INVOICE_PRINTOUT_FORMAT_CODE
   FROM INVOICE I (NOLOCK) 
   INNER JOIN PARTNER PL (NOLOCK) ON I.PRODUCTION_PLANT_ID = PL.PARTNER_ID 
   INNER JOIN PLANT_INFO PI (NOLOCK) ON PI.PARTNER_ID = I.PRODUCTION_PLANT_ID
    LEFT JOIN PARTNER CU (NOLOCK) ON I.CUSTOMER_ID = CU.PARTNER_ID 
    LEFT JOIN V_PARTNER_ADDRESS V_ADDRESS (NOLOCK) ON (V_ADDRESS.PARTNER_ID = CU.PARTNER_ID  
                                                   AND V_ADDRESS.PARTNER_ADDRESS_TYPE_CODE = 'BA'
                                                   AND V_ADDRESS.YARD_FLAG = '1'
                                                   AND V_ADDRESS.PARTNER_ADDRESS_STATUS_TYPE_CODE = 'A')
    LEFT JOIN BL_ORDER BLO (NOLOCK) ON I.BL_ORDER_ID = BLO.BL_ORDER_ID
    LEFT JOIN BL BL (NOLOCK) ON BLO.BL_ID = BL.BL_ID 
    LEFT JOIN PARTNER BLPL (NOLOCK) ON BL.SHIP_FROM_PLANT_ID = BLPL.PARTNER_ID 
    LEFT JOIN V_PARTNER_ADDRESS VPLMA (NOLOCK) ON (BLPL.PARTNER_ID = VPLMA.PARTNER_ID 
                                               AND VPLMA.PARTNER_ADDRESS_TYPE_CODE = 'MA' 
                                               AND VPLMA.PARTNER_ADDRESS_STATUS_TYPE_CODE = 'A')
    LEFT JOIN STATE VPLMAS (NOLOCK) ON VPLMA.STATE_ID = VPLMAS.STATE_ID 
    LEFT JOIN SALES_ORDER SO (NOLOCK) ON I.SO_ID = SO.SO_ID 
    LEFT JOIN SALES_ORDER_ADDRESS SOSA (NOLOCK) ON SO.SO_ID = SOSA.SO_ID AND SOSA.ADDRESS_TYPE = 'SA' 
    LEFT JOIN STATE BILL_TO_STATE (NOLOCK) ON (BILL_TO_STATE.STATE_ID = V_ADDRESS.STATE_ID)
    LEFT JOIN STATE SOSAS (NOLOCK) ON SOSA.STATE_ID = SOSAS.STATE_ID 
    LEFT JOIN STATE SSA (NOLOCK) ON BLO.SHIP_TO_STATE_ID = SSA.STATE_ID 
    LEFT JOIN PLANT APL (NOLOCK) ON I.ACCOUNTING_PLANT_CODE = APL.PLANT_CODE 
    LEFT JOIN LEGAL_ENTITY LE (NOLOCK) ON APL.LEGAL_ENTITY_CODE = LE.LEGAL_ENTITY_CODE 
    LEFT JOIN TRUCK_BOOKING TB (NOLOCK) ON BLO.TRUCK_BOOKING_ID = TB.TRUCK_BOOKING_ID 
    LEFT JOIN TRUCK_ROUTE_STOP TRS (NOLOCK) ON TB.TRUCK_ROUTE_STOP_ID = TRS.TRUCK_ROUTE_STOP_ID 
    LEFT JOIN TRUCK_ROUTE TR (NOLOCK) ON TR.TRUCK_ROUTE_ID = TRS.TRUCK_ROUTE_ID
    LEFT JOIN TERMS TE (NOLOCK) ON I.TERMS_CODE = TE.TERMS_CODE 
    LEFT JOIN SALES_ORDER_TYPE SOT (NOLOCK) ON SO.SALES_ORDER_TYPE_CODE = SOT.SALES_ORDER_TYPE_CODE 
    LEFT JOIN CREDIT_REASON CR (NOLOCK) ON CR.CREDIT_REASON_CODE = SO.CREDIT_REASON_CODE
    LEFT JOIN CREDIT_REASON CR_INV (NOLOCK) ON CR_INV.CREDIT_REASON_CODE = I.CREDIT_REASON_CODE
    LEFT JOIN CREDIT_REQUEST CRQ (NOLOCK) ON CRQ.CREDIT_REQUEST_ID = I.CREDIT_REQUEST_ID
    LEFT JOIN INVOICE INV_CRQ (NOLOCK) ON INV_CRQ.INVOICE_ID = CRQ.ORIGINAL_INVOICE_ID
  WHERE (I.INVOICE_ID = @INVOICE_ID); 
  
  --INVOICE_DETAIL======================================================  
IF (@INVOICE_SOURCE = 'RA') 
BEGIN 
  
  DECLARE @INVOICE_AMOUNT DECIMAL(18,2);
  DECLARE @QUANTITY DECIMAL(18,4);
  
  SELECT  @QUANTITY = SUM(QUANTITY),@INVOICE_AMOUNT=SUM(AMOUNT)  
  FROM    INVOICE_DETAIL (NOLOCK) 
  WHERE   INVOICE_ID = @INVOICE_ID
  
  SELECT 
    ID.*,
    SOD.LINE SO_LINE,
    SOD.PRODUCT_ID AS SOD_PRODUCT_ID, 
    P.PRODUCT_NO AS SOD_PRODUCT_NO, 
    SOD.PRODUCT_NAME AS SOD_PRODUCT_NAME,
    SOD.FEET AS SOD_FEET, 
    SOD.INCHES AS SOD_INCHES, 
    SOD.UNIT_PACK SOD_UNIT_PACK,
    SOD.SKID_QUANTITY AS SOD_SKID_QUANTITY,
    SOD.SELL_MEASURE_UNIT_CODE AS SOD_SELL_MEASURE_UNIT_CODE, 
    SOD.BUYER_SELL_MEASURE_UNIT_CODE AS SOD_BUYER_SELL_MEASURE_UNIT_CODE,
    SOD.P_U AS SOD_PUNCH_FLAG, 
    PU.NAME AS SOD_PUNCH_FLAG_NAME, 
    SOD.KSI_CODE AS SOD_KSI_CODE, 
    SOD.COAT_SPEC_CODE AS SOD_COAT_SPEC_CODE,     
    P.PRODUCT_LINE_CODE,
    SOC.CHARGE_CODE AS SOC_CHARGE_CODE,
    SOC.COMMENTS AS SOC_COMMENTS,
    (SELECT Q.QUOTE_NUMBER
     FROM QUOTE_DETAIL QD (NOLOCK)
       JOIN QUOTE Q (NOLOCK) ON QD.QUOTE_ID = Q.QUOTE_ID
     WHERE QD.QUOTE_DETAIL_ID = SOD.QUOTE_DETAIL_ID) AS SOD_QUOTE_NUMBER,
    SOD.BUYER_PRODUCT_NO AS SOD_BUYER_PRODUCT_NO,
    SOD.BUYER_PRODUCT_NAME AS SOD_BUYER_PRODUCT_NAME,
    SOD.EXTERNAL_REFERENCE_LINE AS SOD_EXTERNAL_REFERENCE_LINE,
    SOD.UNIT_PACK,
    P.ALIAS AS SSMA_DESCRIPTION,
    dbo.FN_PRODUCTION_PLANT_CUSTOM_UNIT_PACK_FLAG_FIND(SO.PRODUCTION_PLANT_ID, P.SELL_MEASURE_UNIT_CODE, 'ALWD') AS CUSTOM_UNIT_PACK_ALLOWED,
    SOD.SPECIAL_INSTRUCTIONS,
    DBO.FN_GET_ORIG_INVOICE_UNIT_PRICE_BY_RA(RAD.RETURN_AUTH_DETAIL_ID) AS ORIGINAL_UNIT_PRICE,
      (SELECT RA.RESTOCKING_AMOUNT
       FROM RETURN_AUTHORIZATION RA(NOLOCK)
       WHERE RA.RETURN_AUTHORIZATION_ID = RAD.RETURN_AUTHORIZATION_ID) AS RESTOCKING_AMOUNT,
        (SELECT RA.RESTOCKING_PERCENTAGE
       FROM RETURN_AUTHORIZATION RA(NOLOCK)
       WHERE RA.RETURN_AUTHORIZATION_ID = RAD.RETURN_AUTHORIZATION_ID) AS RESTOCKING_PERCENTAGE ,
       (SELECT COALESCE(RA.TOTAL_RESTOCKING_AMOUNT,0)
       FROM RETURN_AUTHORIZATION RA(NOLOCK)
       WHERE RA.RETURN_AUTHORIZATION_ID = RAD.RETURN_AUTHORIZATION_ID) AS TOTAL_RESTOCKING_AMOUNT ,
       @INVOICE_AMOUNT AS  TOTAL_AMOUNT,
       @QUANTITY AS TOTAL_QUANTITY,
  P.PRINT_PRODUCT_COMMENTS ,
  P.PRODUCT_COMMENTS,
    (SELECT COALESCE(RA.CREDIT_REQUEST_AMOUNT,0)
       FROM RETURN_AUTHORIZATION RA(NOLOCK)
       WHERE RA.RETURN_AUTHORIZATION_ID = RAD.RETURN_AUTHORIZATION_ID) AS TOTAL_CREDIT_REQUEST_AMOUNT
  FROM INVOICE_DETAIL ID (NOLOCK)
    LEFT JOIN RETURN_AUTH_DETAIL RAD (NOLOCK) ON ID.DOCUMENT_DETAIL_ID = RAD.RETURN_AUTH_DETAIL_ID
    LEFT JOIN SALES_ORDER_DETAIL SOD (NOLOCK) ON RAD.SO_DETAIL_ID = SOD.SO_DETAIL_ID AND ID.DETAIL_TYPE = 'D' 
    LEFT JOIN SALES_ORDER SO (NOLOCK) ON SOD.SO_ID = SO.SO_ID
    LEFT JOIN PRODUCT P (NOLOCK) ON SOD.PRODUCT_ID = P.PRODUCT_ID 
    LEFT JOIN GENERAL_TABLE PU (NOLOCK) ON PU.TABLE_NAME = 'POD_PUNCH' AND PU.CODE = SOD.P_U 
    LEFT JOIN SALES_ORDER_CHARGE SOC (NOLOCK) ON ID.DOCUMENT_DETAIL_ID = SOC.SALES_ORDER_CHARGE_ID AND ID.DETAIL_TYPE IN ('N', 'S')    
  WHERE (ID.INVOICE_ID = @INVOICE_ID) 
  ORDER BY ID.LINE; 
END
ELSE IF (@INVOICE_SOURCE = 'CR') 
BEGIN  
 SELECT 
    ID.*,
    SOD.LINE SO_LINE,
    SOD.PRODUCT_ID AS SOD_PRODUCT_ID,
    P.PRODUCT_NO AS SOD_PRODUCT_NO,     
    SOD.PRODUCT_NAME AS SOD_PRODUCT_NAME,        
    SOD.FEET AS SOD_FEET, 
    SOD.INCHES AS SOD_INCHES, 
    SOD.UNIT_PACK SOD_UNIT_PACK,
    SOD.SKID_QUANTITY AS SOD_SKID_QUANTITY,
    SOD.SELL_MEASURE_UNIT_CODE AS SOD_SELL_MEASURE_UNIT_CODE, 
    SOD.BUYER_SELL_MEASURE_UNIT_CODE AS SOD_BUYER_SELL_MEASURE_UNIT_CODE,
    SOD.P_U AS SOD_PUNCH_FLAG, 
    PU.NAME AS SOD_PUNCH_FLAG_NAME, 
    SOD.KSI_CODE AS SOD_KSI_CODE, 
    SOD.COAT_SPEC_CODE AS SOD_COAT_SPEC_CODE,    
    P.PRODUCT_LINE_CODE,   
    CRC.CHARGE_CODE AS SOC_CHARGE_CODE,
    CRC.COMMENTS AS SOC_COMMENTS,
    (SELECT Q.QUOTE_NUMBER
     FROM QUOTE_DETAIL QD (NOLOCK)
       JOIN QUOTE Q (NOLOCK) ON QD.QUOTE_ID = Q.QUOTE_ID
     WHERE QD.QUOTE_DETAIL_ID = SOD.QUOTE_DETAIL_ID) AS SOD_QUOTE_NUMBER,
    SOD.BUYER_PRODUCT_NO AS SOD_BUYER_PRODUCT_NO,
    SOD.BUYER_PRODUCT_NAME AS SOD_BUYER_PRODUCT_NAME,
    SOD.EXTERNAL_REFERENCE_LINE AS SOD_EXTERNAL_REFERENCE_LINE,
    SOD.UNIT_PACK,
    P.ALIAS AS SSMA_DESCRIPTION,
    dbo.FN_PRODUCTION_PLANT_CUSTOM_UNIT_PACK_FLAG_FIND(SO.PRODUCTION_PLANT_ID, P.SELL_MEASURE_UNIT_CODE, 'ALWD') AS CUSTOM_UNIT_PACK_ALLOWED,
    SOD.SPECIAL_INSTRUCTIONS,
  P.PRINT_PRODUCT_COMMENTS ,
  P.PRODUCT_COMMENTS,
  (ID.AMOUNT - (DBO.FN_GET_REMAINING_AMOUNT_FOR_CREDIT_REQUEST(ID.INVOICE_DETAIL_ID,CRD.CREDIT_REQUEST_ID,CRD.CREATION_DATE)))
		 AS AVAILABLE_NET_AMOUNT,
		 ID.UNIT_PRICE AS INVOICE_UNIT_PRICE,
		 ID.AMOUNT AS INVOICE_DETAIL_AMOUNT
  FROM INVOICE_DETAIL ID (NOLOCK)
	JOIN INVOICE  I (NOLOCK) ON I.INVOICE_ID=ID.INVOICE_ID 
	JOIN CREDIT_REQUEST CR (NOLOCK) ON CR.CREDIT_REQUEST_ID=I.CREDIT_REQUEST_ID
	LEFT JOIN CREDIT_REQUEST_DETAIL CRD (NOLOCK) ON CRD.CREDIT_REQUEST_ID=CR.CREDIT_REQUEST_ID AND CRD.CREDIT_REQUEST_DETAIL_ID=ID.DOCUMENT_DETAIL_ID
	LEFT JOIN INVOICE II (NOLOCK) ON II.INVOICE_ID=CR.ORIGINAL_INVOICE_ID
	LEFT JOIN INVOICE_DETAIL IDD (NOLOCK) ON IDD.INVOICE_ID=II.INVOICE_ID AND IDD.INVOICE_DETAIL_ID=CRD.ORIGINAL_INVOICE_DETAIL_ID
    LEFT JOIN SALES_ORDER SO (NOLOCK) ON SO.SO_ID = II.SO_ID
    LEFT JOIN SALES_ORDER_DETAIL SOD (NOLOCK) ON SOD.SO_ID=SO.SO_ID AND SOD.SO_DETAIL_ID=IDD.DOCUMENT_DETAIL_ID       
    LEFT JOIN PRODUCT P (NOLOCK) ON SOD.PRODUCT_ID = P.PRODUCT_ID 
    LEFT JOIN GENERAL_TABLE PU (NOLOCK) ON PU.TABLE_NAME = 'POD_PUNCH' AND PU.CODE = SOD.P_U     
    LEFT JOIN CREDIT_REQUEST_CHARGE CRC (NOLOCK) ON CRC.CREDIT_REQUEST_ID=CR.CREDIT_REQUEST_ID 
    AND CRC.CREDIT_REQUEST_ID = ID.DOCUMENT_DETAIL_ID
  WHERE (ID.INVOICE_ID = @INVOICE_ID) 
  
  ORDER BY ID.LINE;  
END;  
ELSE IF (@INVOICE_SOURCE = 'TP') 
BEGIN 
 IF (@SO_ID_TOLL = 0)
 BEGIN
   SELECT 
    ID.*,
    TPD.LINE SO_LINE,
    TPD.PRODUCT_ID AS SOD_PRODUCT_ID, 
    P.PRODUCT_NO AS SOD_PRODUCT_NO, 
    P.NAME AS SOD_PRODUCT_NAME,
    '' AS SOD_FEET, 
    '' AS SOD_INCHES, 
    1 AS SOD_UNIT_PACK,
    0 AS SOD_SKID_QUANTITY,
    I.WEIGHT_UNIT_CODE AS SOD_SELL_MEASURE_UNIT_CODE,
    '' AS SOD_BUYER_SELL_MEASURE_UNIT_CODE,
    '' AS SOD_PUNCH_FLAG,
    '' AS SOD_PUNCH_FLAG_NAME, 
    TPD.KSI_CODE AS SOD_KSI_CODE, 
    T.COAT_SPEC AS SOD_COAT_SPEC_CODE,     
    P.PRODUCT_LINE_CODE,
    '' AS SOC_CHARGE_CODE,
    TP.COMMENTS AS SOC_COMMENTS,
    '' AS SOD_QUOTE_NUMBER,
    '' AS SOD_BUYER_PRODUCT_NO,
    '' AS SOD_BUYER_PRODUCT_NAME,
    '' AS SOD_EXTERNAL_REFERENCE_LINE,
    '' AS UNIT_PACK,
    P.ALIAS AS SSMA_DESCRIPTION,
    '' AS CUSTOM_UNIT_PACK_ALLOWED,
    '' AS SPECIAL_INSTRUCTIONS,
    P.PRINT_PRODUCT_COMMENTS ,
    P.PRODUCT_COMMENTS,
    (ID.AMOUNT - (DBO.FN_GET_REMAINING_AMOUNT_FOR_CREDIT_REQUEST(ID.INVOICE_DETAIL_ID,NULL,NULL))) AS AVAILABLE_NET_AMOUNT,
    ID.UNIT_PRICE AS INVOICE_UNIT_PRICE,
	ID.AMOUNT AS INVOICE_DETAIL_AMOUNT
FROM INVOICE_DETAIL ID (NOLOCK)    
 JOIN INVOICE I (NOLOCK) ON I.INVOICE_ID = ID.INVOICE_ID
    LEFT JOIN TOLL_PROCESSING_DETAIL TPD (NOLOCK) ON ID.DOCUMENT_DETAIL_ID = TPD.TOLL_PROCESSING_DETAIL_ID AND ID.DETAIL_TYPE = 'D'
    LEFT JOIN TOLL_PROCESSING TP (NOLOCK) ON TPD.TOLL_PROCESSING_ID = TP.TOLL_PROCESSING_ID
    LEFT JOIN PRODUCT P (NOLOCK) ON TPD.PRODUCT_ID = P.PRODUCT_ID 
    LEFT JOIN TAG T (NOLOCK) ON (T.TAG_NO = TPD.TAG_NO)
  WHERE (ID.INVOICE_ID = @INVOICE_ID) 
  ORDER BY ID.LINE;
 END
 ELSE
 BEGIN
   SELECT 
    ID.*,
    SOD.LINE SO_LINE,
    SOD.PRODUCT_ID AS SOD_PRODUCT_ID, 
    P.PRODUCT_NO AS SOD_PRODUCT_NO, 
    SOD.PRODUCT_NAME AS SOD_PRODUCT_NAME,
    SOD.FEET AS SOD_FEET, 
    SOD.INCHES AS SOD_INCHES, 
    SOD.UNIT_PACK SOD_UNIT_PACK,
    SOD.SKID_QUANTITY AS SOD_SKID_QUANTITY,
    SOD.SELL_MEASURE_UNIT_CODE AS SOD_SELL_MEASURE_UNIT_CODE, 
    SOD.BUYER_SELL_MEASURE_UNIT_CODE AS SOD_BUYER_SELL_MEASURE_UNIT_CODE,
    SOD.P_U AS SOD_PUNCH_FLAG, 
    PU.NAME AS SOD_PUNCH_FLAG_NAME, 
    SOD.KSI_CODE AS SOD_KSI_CODE, 
    SOD.COAT_SPEC_CODE AS SOD_COAT_SPEC_CODE,     
    P.PRODUCT_LINE_CODE,
    SOC.CHARGE_CODE AS SOC_CHARGE_CODE,
    SOC.COMMENTS AS SOC_COMMENTS,
    (SELECT Q.QUOTE_NUMBER
     FROM QUOTE_DETAIL QD (NOLOCK)
       JOIN QUOTE Q (NOLOCK) ON QD.QUOTE_ID = Q.QUOTE_ID
     WHERE QD.QUOTE_DETAIL_ID = SOD.QUOTE_DETAIL_ID) AS SOD_QUOTE_NUMBER,
    SOD.BUYER_PRODUCT_NO AS SOD_BUYER_PRODUCT_NO,
    SOD.BUYER_PRODUCT_NAME AS SOD_BUYER_PRODUCT_NAME,
    SOD.EXTERNAL_REFERENCE_LINE AS SOD_EXTERNAL_REFERENCE_LINE,
    SOD.UNIT_PACK,
    P.ALIAS AS SSMA_DESCRIPTION,
    dbo.FN_PRODUCTION_PLANT_CUSTOM_UNIT_PACK_FLAG_FIND(SO.PRODUCTION_PLANT_ID, P.SELL_MEASURE_UNIT_CODE, 'ALWD') AS CUSTOM_UNIT_PACK_ALLOWED,
    SOD.SPECIAL_INSTRUCTIONS,
  P.PRINT_PRODUCT_COMMENTS ,
  P.PRODUCT_COMMENTS,
  (ID.AMOUNT - (DBO.FN_GET_REMAINING_AMOUNT_FOR_CREDIT_REQUEST(ID.INVOICE_DETAIL_ID,NULL,NULL)))
		 AS AVAILABLE_NET_AMOUNT,
		 ID.UNIT_PRICE AS INVOICE_UNIT_PRICE,
		 ID.AMOUNT AS INVOICE_DETAIL_AMOUNT
  FROM INVOICE_DETAIL ID (NOLOCK)
    LEFT JOIN SALES_ORDER_DETAIL SOD (NOLOCK) ON ID.DOCUMENT_DETAIL_ID = SOD.SO_DETAIL_ID AND ID.DETAIL_TYPE = 'D' 
    LEFT JOIN SALES_ORDER SO (NOLOCK) ON SOD.SO_ID = SO.SO_ID
    LEFT JOIN PRODUCT P (NOLOCK) ON SOD.PRODUCT_ID = P.PRODUCT_ID 
    LEFT JOIN GENERAL_TABLE PU (NOLOCK) ON PU.TABLE_NAME = 'POD_PUNCH' AND PU.CODE = SOD.P_U 
    LEFT JOIN SALES_ORDER_CHARGE SOC (NOLOCK) ON ID.DOCUMENT_DETAIL_ID = SOC.SALES_ORDER_CHARGE_ID AND ID.DETAIL_TYPE IN ('N', 'S')
  WHERE (ID.INVOICE_ID = @INVOICE_ID) 
  ORDER BY ID.LINE;
 END
END;  
ELSE
BEGIN  
  SELECT 
    ID.*,
    SOD.LINE SO_LINE,
    SOD.PRODUCT_ID AS SOD_PRODUCT_ID, 
    P.PRODUCT_NO AS SOD_PRODUCT_NO, 
    SOD.PRODUCT_NAME AS SOD_PRODUCT_NAME,
    SOD.FEET AS SOD_FEET, 
    SOD.INCHES AS SOD_INCHES, 
    SOD.UNIT_PACK SOD_UNIT_PACK,
    SOD.SKID_QUANTITY AS SOD_SKID_QUANTITY,
    SOD.SELL_MEASURE_UNIT_CODE AS SOD_SELL_MEASURE_UNIT_CODE, 
    SOD.BUYER_SELL_MEASURE_UNIT_CODE AS SOD_BUYER_SELL_MEASURE_UNIT_CODE,
    SOD.P_U AS SOD_PUNCH_FLAG, 
    PU.NAME AS SOD_PUNCH_FLAG_NAME, 
    SOD.KSI_CODE AS SOD_KSI_CODE, 
    SOD.COAT_SPEC_CODE AS SOD_COAT_SPEC_CODE,     
    P.PRODUCT_LINE_CODE,
    SOC.CHARGE_CODE AS SOC_CHARGE_CODE,
    SOC.COMMENTS AS SOC_COMMENTS,
    (SELECT Q.QUOTE_NUMBER
     FROM QUOTE_DETAIL QD (NOLOCK)
       JOIN QUOTE Q (NOLOCK) ON QD.QUOTE_ID = Q.QUOTE_ID
     WHERE QD.QUOTE_DETAIL_ID = SOD.QUOTE_DETAIL_ID) AS SOD_QUOTE_NUMBER,
    SOD.BUYER_PRODUCT_NO AS SOD_BUYER_PRODUCT_NO,
    SOD.BUYER_PRODUCT_NAME AS SOD_BUYER_PRODUCT_NAME,
    SOD.EXTERNAL_REFERENCE_LINE AS SOD_EXTERNAL_REFERENCE_LINE,
    SOD.UNIT_PACK,
    P.ALIAS AS SSMA_DESCRIPTION,
    dbo.FN_PRODUCTION_PLANT_CUSTOM_UNIT_PACK_FLAG_FIND(SO.PRODUCTION_PLANT_ID, P.SELL_MEASURE_UNIT_CODE, 'ALWD') AS CUSTOM_UNIT_PACK_ALLOWED,
    SOD.SPECIAL_INSTRUCTIONS,
  P.PRINT_PRODUCT_COMMENTS ,
  P.PRODUCT_COMMENTS,
  (ID.AMOUNT - (DBO.FN_GET_REMAINING_AMOUNT_FOR_CREDIT_REQUEST(ID.INVOICE_DETAIL_ID,NULL,NULL)))
		 AS AVAILABLE_NET_AMOUNT,
		 ID.UNIT_PRICE AS INVOICE_UNIT_PRICE,
		 ID.AMOUNT AS INVOICE_DETAIL_AMOUNT,
		 (
		SELECT ISNULL(SUM(CRD.CREDIT_QTY), 0)
		FROM CREDIT_REQUEST_DETAIL CRD (NOLOCK)
		WHERE CRD.ORIGINAL_INVOICE_DETAIL_ID = ID.INVOICE_DETAIL_ID
		) PREV_CREDIT_QTY,
		(
			SELECT ISNULL(SUM(dbo.FN_GET_SKID_QUANTITY(INVDS.SKID_NUMBER)), 0)
			FROM dbo.INVOICE_DETAIL_SKID INVDS (NOLOCK)
			WHERE INVDS.INVOICE_DETAIL_ID = ID.INVOICE_DETAIL_ID AND dbo.FN_SKID_ORIGINAL_PLANT(INVDS.SKID_NUMBER) <> INV.PRODUCTION_PLANT_ID
		) IPL_QTY 

  FROM INVOICE_DETAIL ID (NOLOCK)
    LEFT JOIN SALES_ORDER_DETAIL SOD (NOLOCK) ON ID.DOCUMENT_DETAIL_ID = SOD.SO_DETAIL_ID AND ID.DETAIL_TYPE = 'D' 
    LEFT JOIN SALES_ORDER SO (NOLOCK) ON SOD.SO_ID = SO.SO_ID
    LEFT JOIN PRODUCT P (NOLOCK) ON SOD.PRODUCT_ID = P.PRODUCT_ID 
    LEFT JOIN GENERAL_TABLE PU (NOLOCK) ON PU.TABLE_NAME = 'POD_PUNCH' AND PU.CODE = SOD.P_U 
    LEFT JOIN SALES_ORDER_CHARGE SOC (NOLOCK) ON ID.DOCUMENT_DETAIL_ID = SOC.SALES_ORDER_CHARGE_ID AND ID.DETAIL_TYPE IN ('N', 'S')
	JOIN INVOICE INV (NOLOCK) ON INV.INVOICE_ID = ID.INVOICE_ID
  WHERE (ID.INVOICE_ID = @INVOICE_ID) 
  ORDER BY ID.LINE;
END;
 
 
 --INVOICE_DETAIL_SKID======================================================
  SELECT IDS.INVOICE_DETAIL_SKID_ID,
         IDS.INVOICE_DETAIL_ID,
         IDS.BL_DETAIL_ID,
         IDS.SKID_NUMBER,
         IDS.TAG_NO,
         ID.LINE, 
         BLD.TRUCK_BOOKING_DETAIL_ID, 
         BLD.SO_DETAIL_ID, 
         BLD.SKID_NUMBER, 
         S.START_TOTAL_WEIGHT, 
         S.WEIGHT_UNIT_CODE,
         S.SKID_UNIT_PRICE,
         dbo.FN_GET_SKID_QUANTITY(IDS.SKID_NUMBER) AS SKID_QUANTITY,
         (S.SKID_UNIT_PRICE * dbo.FN_GET_SKID_QUANTITY(IDS.SKID_NUMBER)) AS SKID_AMOUNT,
		 ORIGP.PARTNER_ID ORIG_PLANT_ID,
		 ORIGP.PARTNER_CODE ORIG_PLANT_CODE
    FROM INVOICE_DETAIL_SKID IDS (NOLOCK) 
    INNER JOIN INVOICE_DETAIL ID (NOLOCK) ON IDS.INVOICE_DETAIL_ID = ID.INVOICE_DETAIL_ID 
    LEFT JOIN BL_DETAIL BLD (NOLOCK) ON IDS.BL_DETAIL_ID = BLD.BL_DETAIL_ID 
    LEFT JOIN SKID S (NOLOCK) ON IDS.SKID_NUMBER = S.SKID_NUMBER 	
	LEFT JOIN dbo.PARTNER ORIGP (NOLOCK) ON ORIGP.PARTNER_ID = dbo.FN_SKID_ORIGINAL_PLANT(IDS.SKID_NUMBER)
   WHERE (ID.INVOICE_ID = @INVOICE_ID) 
   ORDER BY ID.LINE, IDS.SKID_NUMBER;
 
 --INVOICE_TAX======================================================
  SELECT 
  IT.*,  T.NAME AS TAX_NAME 
  FROM INVOICE_TAX IT (NOLOCK) 
  INNER JOIN TAX T (NOLOCK) ON IT.TAX_CODE = T.TAX_CODE 
  WHERE (IT.INVOICE_ID = @INVOICE_ID); 
 
 
 --INVOICE_COMMISSION======================================================
  SELECT 
  IC.*,  S.NAME AS SALESMAN_NAME 
  FROM INVOICE_COMMISSION IC (NOLOCK) 
  INNER JOIN SALESMAN S (NOLOCK) ON IC.SALESMAN_CODE = S.SALESMAN_CODE 
  WHERE (IC.INVOICE_ID = @INVOICE_ID); 
 
 
 --INVOICE_SUMMARY======================================================
  SELECT 
  INS.* 
  FROM INVOICE_SUMMARY INS (NOLOCK) 
  WHERE (INS.INVOICE_ID = @INVOICE_ID); 
  
  --DIRECT_SHIP_COMMENT======================================================
  SELECT TB.TRUCK_BOOKING_ID,
         DSHSOD.SO_DETAIL_ID,
       I.INVOICE_ID,
       DSHSO.SO_ID,            
       DSHSOD.STATUS,
       P.PRODUCT_NO, 
       DSHSOD.FEET, 
       DSHSOD.INCHES,
       INV.PARTNER_CODE AS INVENTORY_PLANT,
       TR.TRACKING_NUMBER,
       FV.NAME AS FREIGHT_VENDOR
FROM SALES_ORDER_DETAIL EXTSOD (NOLOCK)
JOIN SALES_ORDER_DETAIL_ASSOCIATION SODA (NOLOCK) ON EXTSOD.SO_DETAIL_ID = SODA.SOURCE_SO_DETAIL_ID
JOIN SALES_ORDER_DETAIL DSHSOD (NOLOCK) ON DSHSOD.SO_DETAIL_ID = SODA.TARGET_SO_DETAIL_ID
JOIN SALES_ORDER DSHSO (NOLOCK) ON DSHSO.SO_ID = DSHSOD.SO_ID
JOIN PRODUCT P (NOLOCK) ON (P.PRODUCT_ID = DSHSOD.PRODUCT_ID)
LEFT JOIN PARTNER INV (NOLOCK) ON (INV.PARTNER_ID = DSHSO.PRODUCTION_PLANT_ID)
LEFT JOIN TRUCK_BOOKING TB (NOLOCK) ON TB.SO_ID = DSHSO.SO_ID
LEFT JOIN TRUCK_ROUTE_STOP TRS (NOLOCK) ON TB.TRUCK_ROUTE_STOP_ID = TRS.TRUCK_ROUTE_STOP_ID 
LEFT JOIN TRUCK_ROUTE TR (NOLOCK) ON TRS.TRUCK_ROUTE_ID = TR.TRUCK_ROUTE_ID 
LEFT JOIN PARTNER FV (NOLOCK) ON FV.PARTNER_ID = TR.FREIGHT_VENDOR_ID
INNER JOIN INVOICE I (NOLOCK) ON I.SO_ID = EXTSOD.SO_ID
 WHERE I.INVOICE_ID = @INVOICE_ID
   AND DSHSOD.STATUS <> 'CAN'
   AND DSHSOD.SALES_ORDER_DETAIL_TYPE_CODE = 'DSH';
 
 --INVOICE_SALES_ORDER_COMMENT======================================================
  SELECT 
  I.INVOICE_ID, 
  I.SO_ID, 
  I.BL_ORDER_ID, 
  SOCM.*, 
  SOCMT.NAME AS SALES_ORDER_COMMENT_TYPE_NAME, 
  SOCMT.ORDER_NO,
  SOCD.SALES_ORDER_COMMENT_TYPE_CODE,
  SOCD.SALES_ORDER_COMMENT_DETAIL_ID 
  FROM SALES_ORDER_COMMENT SOCM (NOLOCK) 
 INNER JOIN INVOICE I (NOLOCK) ON I.SO_ID = SOCM.SO_ID 
  INNER JOIN SALES_ORDER_COMMENT_DETAIL SOCD (NOLOCK) ON SOCM.SALES_ORDER_COMMENT_ID = SOCD.SALES_ORDER_COMMENT_ID
  INNER JOIN SALES_ORDER_COMMENT_TYPE SOCMT (NOLOCK) ON SOCD.SALES_ORDER_COMMENT_TYPE_CODE = SOCMT.SALES_ORDER_COMMENT_TYPE_CODE 
  WHERE I.INVOICE_ID = @INVOICE_ID 
    AND SOCM.PRINT_INVOICE_FLAG = '1' 
    AND SOCMT.SALES_ORDER_COMMENT_TYPE_CODE <> 'SSC' 
  --ORDER BY SOCMT.ORDER_NO, SOCM.CREATION_DATE;  
  ORDER BY SOCD.SALES_ORDER_COMMENT_DETAIL_ID; 
 
 
 --INVOICE_DETAIL_NVM======================================================
  SELECT 
  IDN.* 
  FROM INVOICE_DETAIL_NVM IDN (NOLOCK) 
  INNER JOIN INVOICE_DETAIL ID (NOLOCK) ON ID.INVOICE_DETAIL_ID = IDN.INVOICE_DETAIL_ID 
  WHERE ID.INVOICE_ID = @INVOICE_ID 
  ORDER BY IDN.INVOICE_DETAIL_ID, IDN.INVOICE_DETAIL_SKID_ID; 


GO

/*
Changeset: 5715
Comment:   ST66500
Committer: CLARKSTEEL\bobbior
Creation Date: 08/07/2016 04:16:52 p.m.
*/

IF EXISTS(SELECT 1 FROM SYSOBJECTS  WHERE NAME = 'SPU_BL_FIND_BY_PK_FOR_TOLL' AND TYPE = 'P')   
  DROP PROCEDURE dbo.SPU_BL_FIND_BY_PK_FOR_TOLL 
GO 

CREATE PROCEDURE [dbo].[SPU_BL_FIND_BY_PK_FOR_TOLL]
( 
  @BL_ID INTEGER
)
AS
BEGIN

SELECT BL.*,
		-- SHIP_FROM
		PL.PARTNER_CODE AS SHIP_FROM_PLANT_CODE,
		PL.NAME AS SHIP_FROM_PLANT_NAME,
		SFA.LOCATION_NAME SHIP_FROM_LOCATION_NAME,
		SFA.LOCATION_NUMBER SHIP_FROM_LOCATION_NUMBER,
		SFA.ADDRESS_1 SHIP_FROM_ADDRESS_1,
		SFA.ADDRESS_2 SHIP_FROM_ADDRESS_2,
		SFA.COUNTRY_CODE SHIP_FROM_COUNTRY_CODE,
		SFA.STATE_ID SHIP_FROM_STATE_ID,
		SFAS.STATE_CODE SHIP_FROM_STATE_CODE,
		SFA.ZIP_CODE SHIP_FROM_ZIP_CODE,
		SFA.PROVINCE SHIP_FROM_PROVINCE,
		SFC.NAME SHIP_FROM_ATTENTION,
		SFC.EMAIL SHIP_FROM_EMAIL,
		SFC.PHONE SHIP_FROM_PHONE,
		SFC.FAX SHIP_FROM_FAX,
		-- BILL_TO
		BTA.LOCATION_NAME BILL_TO_LOCATION_NAME,
		BTA.LOCATION_NUMBER BILL_TO_LOCATION_NUMBER,
		BTA.ADDRESS_1 BILL_TO_ADDRESS_1,
		BTA.ADDRESS_2 BILL_TO_ADDRESS_2,
		BTA.COUNTRY_CODE BILL_TO_COUNTRY_CODE,
		BTA.STATE_ID BILL_TO_STATE_ID,
		BTAS.STATE_CODE BILL_TO_STATE_CODE,
		BTA.ZIP_CODE BILL_TO_ZIP_CODE,
		BTA.PROVINCE BILL_TO_PROVINCE,
		BTC.NAME BILL_TO_ATTENTION,
		BTC.EMAIL BILL_TO_EMAIL,
		BTC.PHONE BILL_TO_PHONE,
		BTC.FAX BILL_TO_FAX,
		-- SHIP_TO
		STP.PARTNER_CODE SHIP_TO_PARTNER_CODE,
		STC.NAME SHIP_TO_ATTENTION,
		STC.EMAIL SHIP_TO_EMAIL,
		STC.PHONE SHIP_TO_PHONE,
		STC.FAX SHIP_TO_FAX,
		S.STATE_CODE AS SHIP_TO_STATE_CODE,
		-- REMIT_TO
		STHAP.REMIT_ADDRESS,
		STHAP.REMIT_CITY,
		STHAP.REMIT_COUNTRY_CODE,
		STHAP.REMIT_STATE_ID,
		STHAPS.STATE_CODE REMIT_STATE_CODE,
		STHAP.REMIT_CITY,
		STHAP.REMIT_POSTAL_CODE,
		STHAP.REMIT_PHONE,
		STHAP.REMIT_FAX,
		--
		TR.TRUCK_ROUTE_ID,
		TR.GROUP_NO,
		TR.TRUCK_NO,
		TR.SCHEDULED_SHIP_DATE,
		TR.TRACKING_NUMBER,
		TRS.TRUCK_ROUTE_STOP_ID,
		TRS.STOP_NO,
		TRS.SCHEDULED_ARRIVAL_DATE
FROM BL (NOLOCK)
INNER JOIN PARTNER PL (NOLOCK) ON BL.SHIP_FROM_PLANT_ID = PL.PARTNER_ID
JOIN PLANT_INFO SFPP (NOLOCK) ON SFPP.PARTNER_ID = PL.PARTNER_ID
JOIN PLANT SFAP (NOLOCK) ON SFAP.PLANT_CODE = SFPP.ACCOUNTING_PLANT_CODE
-- REMIT_TO
LEFT JOIN PARTNER_HOME_PLANT STPHP (NOLOCK) ON STPHP.PARTNER_ID = BL.SHIP_TO_PARTNER_ID AND STPHP.LEGAL_ENTITY_CODE = SFAP.LEGAL_ENTITY_CODE
LEFT JOIN PLANT_INFO STHPP (NOLOCK) ON STHPP.PARTNER_ID = STPHP.PRODUCTION_PLANT_ID
LEFT JOIN PLANT STHAP (NOLOCK) ON STHAP.PLANT_CODE = STHPP.ACCOUNTING_PLANT_CODE
LEFT JOIN STATE STHAPS (NOLOCK) ON STHAPS.STATE_ID = STHAP.REMIT_STATE_ID
-- SHIP_FROM
LEFT JOIN PARTNER_ADDRESS SFA (NOLOCK) ON SFA.PARTNER_ADDRESS_ID = dbo.FNU_GET_FIRST_AVAILABLE_PARTNER_ADDRESS_ID(BL.SHIP_FROM_PLANT_ID, 'SA,MA', 'A', '1')
LEFT JOIN PARTNER_CONTACT SFC (NOLOCK) ON SFC.PARTNER_CONTACT_ID = dbo.FNU_GET_FIRST_AVAILABLE_PARTNER_CONTACT_ID(BL.SHIP_FROM_PLANT_ID, 'SA,MA', '1')
LEFT JOIN STATE SFAS (NOLOCK) ON SFAS.STATE_ID = SFA.STATE_ID
-- BILL_TO
LEFT JOIN PARTNER_ADDRESS BTA (NOLOCK) ON BTA.PARTNER_ADDRESS_ID = dbo.FNU_GET_FIRST_AVAILABLE_PARTNER_ADDRESS_ID(BL.SHIP_TO_PARTNER_ID, 'BA', 'A', '1')
LEFT JOIN PARTNER_CONTACT BTC (NOLOCK) ON BTC.PARTNER_CONTACT_ID = dbo.FNU_GET_FIRST_AVAILABLE_PARTNER_CONTACT_ID(BL.SHIP_TO_PARTNER_ID, 'BA', '1')
LEFT JOIN STATE BTAS (NOLOCK) ON BTAS.STATE_ID = BTA.STATE_ID
-- SHIP_TO
JOIN PARTNER STP (NOLOCK) ON STP.PARTNER_ID = BL.SHIP_TO_PARTNER_ID
LEFT JOIN PARTNER_CONTACT STC (NOLOCK) ON STC.PARTNER_CONTACT_ID = dbo.FNU_GET_FIRST_AVAILABLE_PARTNER_CONTACT_ID(BL.SHIP_TO_PARTNER_ID, 'SA', '1')
LEFT JOIN STATE S (NOLOCK) ON BL.SHIP_TO_STATE_ID = S.STATE_ID
LEFT JOIN TRUCK_ROUTE_STOP TRS (NOLOCK) ON BL.TRUCK_ROUTE_STOP_ID = TRS.TRUCK_ROUTE_STOP_ID
LEFT JOIN TRUCK_ROUTE TR (NOLOCK) ON TRS.TRUCK_ROUTE_ID = TR.TRUCK_ROUTE_ID
WHERE (BL.BL_ID = @BL_ID);

SELECT BLO.*,
       SO.PROMISE_DATE SO_PROMISE_DATE,
       SO.DELIVERY_DATE SO_DELIVERY_DATE,
       SO.CUSTOMER_REQUESTED_SHIP_DATE SO_CUSTOMER_REQUESTED_SHIP_DATE,
       SO.CURRENCY_CODE,
       SO.GS1_128_REQUIREMENT_CODE
  FROM BL_ORDER BLO (NOLOCK)
  LEFT JOIN SALES_ORDER SO (NOLOCK) ON SO.SO_ID = BLO.SO_ID
 WHERE BLO.BL_ID = @BL_ID

SELECT BD.*,
       T.PRODUCT_ID,
       SOD.LINE SO_LINE,
       SOD.EXTERNAL_REFERENCE_LINE SO_EXTERNAL_REFERENCE_LINE,
       QT.QUOTE_NUMBER SOD_QUOTE_NUMBER,
       SOD.QUOTE_DETAIL_ID SOD_QUOTE_DETAIL_ID,
       SOD.QUOTE_LINE SOD_QUOTE_LINE,
       SOD.PRODUCT_ID SOD_PRODUCT_ID,
       P.PRODUCT_NO SOD_PRODUCT_NO,
		P.NAME SOD_PRODUCT_NAME,
		SOD.FEET SOD_FEET,
		SOD.INCHES SOD_INCHES,
		SOD.UNIT_PACK SOD_UNIT_PACK,
		SOD.SKID_QUANTITY as SOD_SKID_QUANTITY,
		SOD.SELL_MEASURE_UNIT_CODE SOD_SELL_MEASURE_UNIT_CODE,
		SOD.BUYER_SELL_MEASURE_UNIT_CODE SOD_BUYER_SELL_MEASURE_UNIT_CODE,
		SOD.UNIT_PRICE SOD_UNIT_PRICE,
		SOD.PRICE_TYPE SOD_PRICE_TYPE,
		SOD.UNIT_PRICE_PER_EACH SOD_UNIT_PRICE_PER_EACH,
		SOD.BUYER_PRODUCT_NO SOD_BUYER_PRODUCT_NO,
		SOD.BUYER_PRODUCT_NAME SOD_BUYER_PRODUCT_NAME,
		SOD.REAL_UNIT_SQY SOD_REAL_UNIT_SQY,
		0 AS SKID_START_TOTAL_QUANTITY,
		0 AS SKID_QUANTITY,
		0 AS SKID_AMOUNT,
		'' AS GS1_128_SKID_NUMBER
FROM BL_DETAIL BD (NOLOCK)
JOIN BL_ORDER BLO (NOLOCK) ON BD.BL_ORDER_ID = BLO.BL_ORDER_ID
JOIN TAG T (NOLOCK) ON T.TAG_NO = BD.TAG_NO
LEFT JOIN SALES_ORDER_DETAIL SOD (NOLOCK) ON SOD.SO_DETAIL_ID = BD.SO_DETAIL_ID
LEFT JOIN QUOTE_DETAIL QTD (NOLOCK) ON QTD.QUOTE_DETAIL_ID = SOD.QUOTE_DETAIL_ID
LEFT JOIN QUOTE QT (NOLOCK) ON QT.QUOTE_ID = QTD.QUOTE_ID
LEFT JOIN PRODUCT P (NOLOCK) ON P.PRODUCT_ID = SOD.PRODUCT_ID
WHERE (BLO.BL_ID = @BL_ID)
AND BD.STATUS = 'A';

END
GO
/*
Changeset: 5715
Comment:   ST66500
Committer: CLARKSTEEL\bobbior
Creation Date: 08/07/2016 04:16:52 p.m.
*/

IF EXISTS(SELECT 1 FROM SYSOBJECTS 
          WHERE NAME = 'SPU_GET_CREDIT_INVOICE')
  DROP PROCEDURE SPU_GET_CREDIT_INVOICE
GO

CREATE PROCEDURE [dbo].[SPU_GET_CREDIT_INVOICE] 
( 
  @PRODUCTION_PLANT_ID INTEGER,  
  @RETURN_AUTHORIZATION_NO VARCHAR(20),
  @CREDIT_REQUEST_NO VARCHAR(50),
  @INVOICE_NUMBER VARCHAR(20),  
  @INVOICE_DATE_FROM DATETIME, 
  @INVOICE_DATE_TO DATETIME, 
  @POSTED_FLAG CHAR(1),  
  @DELIVERED_FLAG CHAR(1), 
  @DELIVERED_METHOD CHAR(1), 
  @CUSTOMER_ID INTEGER, 
  @USER_ID INTEGER,
  @SEARCH_BY CHAR(1),
  @DELIVERED_DATE_FROM DATETIME, 
  @DELIVERED_DATE_TO DATETIME,
  @SORT_BY VARCHAR(1)
)  
AS 
BEGIN

SET @INVOICE_DATE_FROM = DBO.FN_DATE(@INVOICE_DATE_FROM);
SET @INVOICE_DATE_TO = dateadd(second, -1, dateadd(day, 1, DBO.FN_DATE(@INVOICE_DATE_TO)));

SET @DELIVERED_DATE_FROM = DBO.FN_DATE(@DELIVERED_DATE_FROM);
SET @DELIVERED_DATE_TO = dateadd(second, -1, dateadd(day, 1, DBO.FN_DATE(@DELIVERED_DATE_TO)));

DECLARE @SQL_DATA NVARCHAR(max)
DECLARE @ORDER_BY VARCHAR(100)

SET @ORDER_BY = 'ORDER BY PRODUCTION_PLANT_CODE, CUSTOMER_NAME, INVOICE_NUMBER';

IF (@SORT_BY = 'C')
  SET @ORDER_BY = 'ORDER BY CUSTOMER_NAME, PRODUCTION_PLANT_CODE, INVOICE_NUMBER';
IF (@SORT_BY = 'A')
  SET @ORDER_BY = 'ORDER BY RETURN_AUTHORIZATION_NO, PRODUCTION_PLANT_CODE, CUSTOMER_NAME, INVOICE_NUMBER';
IF (@SORT_BY = 'R')
  SET @ORDER_BY = 'ORDER BY CREDIT_REQUEST_NUMBER, PRODUCTION_PLANT_CODE, CUSTOMER_NAME, INVOICE_NUMBER';
IF (@SORT_BY = 'S')
  SET @ORDER_BY = 'ORDER BY ORIGINAL_SO_NUMBER, PRODUCTION_PLANT_CODE, CUSTOMER_NAME, INVOICE_NUMBER';
IF (@SORT_BY = 'I')
  SET @ORDER_BY = 'ORDER BY ORIGINAL_INVOICE_NUMBER DESC, PRODUCTION_PLANT_CODE, CUSTOMER_NAME, INVOICE_NUMBER';
IF (@SORT_BY = 'M')
  SET @ORDER_BY = 'ORDER BY INVOICE_NUMBER DESC, PRODUCTION_PLANT_CODE, CUSTOMER_NAME';                            


IF(@SEARCH_BY = 'C') -- Solo muestra datos de CREDIT_REQUEST
BEGIN

SET @SQL_DATA = N'SELECT TOP 2500 ' +
                 ' '''' AS SELECTED_FLAG, ' +
                 ' '''' AS COVERSHEET_NAME, ' +
                 ' '''' AS REJECTED_COMMENTS, ' +
                 'CRH.CREDIT_REQUEST_ID AS INVOICE_ID, ' +
                 ' '''' AS INVOICE_NUMBER, ' +
                 'NULL AS INVOICE_DATE, ' +
                 'CRH.PRODUCTION_PLANT_ID, ' +
                 'PL.PARTNER_CODE AS PRODUCTION_PLANT_CODE,' +
                 'CRH.CUSTOMER_ID, ' +
                 'CU.PARTNER_CODE AS CUSTOMER_CODE, ' +
                 'CU.NAME AS CUSTOMER_NAME, ' +
                 'CRH.CREDIT_REQUEST_ID, ' +
                 ' '''' AS RETURN_AUTHORIZATION_ID, ' +
                 'CRH.CREDIT_REQUEST_NUMBER, ' +
                 ' '''' AS RETURN_AUTHORIZATION_NO, ' +
                 'CRH.CREATED_BY, ' +
                 ' ''P'' AS INVOICE_TRANSMISSION_TYPE, ' +
                 'V_CONTACT.EMAIL AS BILL_TO_EMAIL, ' +
                 'V_CONTACT.FAX AS BILL_TO_FAX, ' +
                 ' '''' AS STATUS, ' + 
                 ' '''' AS STATUS_NAME, ' +
                 'CRH.TOTAL_AMOUNT AS AMOUNT, ' +
                 '0 AS TOTAL_WEIGHT, ' +
                 ' '''' AS WEIGHT_UNIT_CODE, ' +
                 ' '''' AS LENGTH_UNIT_CODE, ' +
                 '0 AS TOTAL_LENGTH, ' +
                 ' '''' AS ACC_ENTRY, ' +
                 ' '''' AS ACC_PERIOD_CODE, ' +
                 ' '''' AS ACC_TRANSACTION_TYPE_CODE, ' +
                 ' '''' AS CURRENCY_CODE, ' +
                 ' ''0'' AS DELIVERED_FLAG, ' +
                 'NULL AS DELIVERED_DATE, ' +
                 ' '''' AS INVOICE_PRINTOUT_FORMAT_CODE, ' +
                 'NULL AS LAST_DELIVERED_METHOD, ' +
                 'CRH.SALESMAN_GROUP, ' +
                 'CRH.CURRENT_STATE_TYPE_CODE, ' +
                 'CRH.COMMENTS, ' +
                 'CRH.CREDIT_REASON_CODE, ' +
                 'CR.NAME AS CREDIT_REASON_NAME, ' +
                 ' ''CREDIT_REQUEST'' AS TABLE_NAME, ' +
                 'SO.SO_NUMBER AS ORIGINAL_SO_NUMBER, ' +
                 'I.INVOICE_NUMBER AS ORIGINAL_INVOICE_NUMBER, ' +
  
				  'CASE ' +
				  '	 WHEN I.INVOICE_SOURCE = ''RA'' THEN 0 ' +
				  '	 WHEN I.INVOICE_SOURCE = ''CR'' THEN dbo.FN_GET_REMAINING_BALANCE(I.CUSTOMER_ID, I.INVOICE_NUMBER, CRH.ORIGINAL_INVOICE_ID) ' +
				  'END AS ORIGINAL_INVOICE_AMOUNT, ' +

				  'I.INVOICE_DATE AS ORIGINAL_INVOICE_DATE, ' +
				  'NULL AS LAST_DELIVERED_DATE ' +
                  'FROM CREDIT_REQUEST CRH (NOLOCK) ' +
                  'INNER JOIN PARTNER PL (NOLOCK) ON (PL.PARTNER_ID = CRH.PRODUCTION_PLANT_ID) ' +
                  'INNER JOIN PARTNER CU (NOLOCK) ON (CU.PARTNER_ID = CRH.CUSTOMER_ID) ' +
                  'INNER JOIN V_PARTNER_CONTACT V_CONTACT (NOLOCK) ON (V_CONTACT.PARTNER_ID = CU.PARTNER_ID ' +
                                                                  'AND V_CONTACT.PARTNER_ADDRESS_TYPE_CODE = ''BA'' ' +
                                                                  'AND V_CONTACT.DEFAULT_FLAG = ''1'') ' +
                  'INNER JOIN CUSTOMER_INFO CUIN (NOLOCK) ON (CUIN.PARTNER_ID = CU.PARTNER_ID) ' +
                  'INNER JOIN CREDIT_REASON CR (NOLOCK) ON (CR.CREDIT_REASON_CODE = CRH.CREDIT_REASON_CODE) ' +
                  'LEFT JOIN INVOICE I (NOLOCK) ON (I.INVOICE_ID = CRH.ORIGINAL_INVOICE_ID) ' +
                  'LEFT JOIN SALES_ORDER SO (NOLOCK) ON (SO.SO_ID = I.SO_ID) ' +
                  'WHERE CRH.CURRENT_STATE_TYPE_CODE IN (''PND'', ''APV'') '+
				  '  AND EXISTS ( SELECT 1 '+
                                   'FROM PARTNER PI (NOLOCK) '+
                                   'LEFT JOIN PLANT_INFO PROD_PLANT_INFO (NOLOCK) ON (PROD_PLANT_INFO.PARTNER_ID = PI.PARTNER_ID) '+
                                   'JOIN SECURITY_USER_PLANT SUP (NOLOCK) ON (SUP.PLANT_CODE = PROD_PLANT_INFO.ACCOUNTING_PLANT_CODE) '+
                                   'WHERE SUP.USER_ID = '+ convert(varchar,@USER_ID) +' '+
                                   'AND PI.PARTNER_ID = CRH.PRODUCTION_PLANT_ID) ';
				  IF (@CREDIT_REQUEST_NO != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (CRH.CREDIT_REQUEST_NUMBER = '''+ convert(varchar,@CREDIT_REQUEST_NO) +''') ';
			      IF (convert(varchar,@PRODUCTION_PLANT_ID) != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (CRH.PRODUCTION_PLANT_ID = '+ convert(varchar,@PRODUCTION_PLANT_ID) +') ';
			      IF (convert(varchar,@CUSTOMER_ID) != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (CRH.CUSTOMER_ID = '+ convert(varchar,@CUSTOMER_ID) +') ';
				  

END
ELSE IF(@SEARCH_BY = 'P') -- Muestra datos de CREDIT_REQUEST y RETURN_AUTHORIZATION
BEGIN  
  IF (@DELIVERED_FLAG='1')
  BEGIN
    SET @SQL_DATA = N'SELECT TOP 2500 '+
	                 ' '''' AS SELECTED_FLAG,'+
	                 ' '''' AS COVERSHEET_NAME,'+
	                 ' '''' AS REJECTED_COMMENTS,'+
					 'I.INVOICE_ID,'+
					 'I.INVOICE_NUMBER,'+
					 'I.INVOICE_DATE,'+
					 'I.PRODUCTION_PLANT_ID,'+
					 'PL.PARTNER_CODE AS PRODUCTION_PLANT_CODE,'+
					 'I.CUSTOMER_ID,'+
					 'CU.PARTNER_CODE AS CUSTOMER_CODE,'+
					 'I.CUSTOMER_NAME,'+
					 'CRH.CREDIT_REQUEST_ID,'+
					 'RA.RETURN_AUTHORIZATION_ID,'+
					 'CRH.CREDIT_REQUEST_NUMBER,'+
					 'RA.RETURN_AUTHORIZATION_NO,'+
					 'V_CONTACT.EMAIL AS BILL_TO_EMAIL,'+
					  'V_CONTACT.FAX AS BILL_TO_FAX,'+
					  'I.STATUS,'+
					  'GTS.NAME AS STATUS_NAME,'+
					  'I.AMOUNT,'+
					  'I.TOTAL_WEIGHT,'+
					  'I.WEIGHT_UNIT_CODE,'+ 
					  'I.LENGTH_UNIT_CODE,'+
					  'I.TOTAL_LENGTH,'+
					  'I.ACC_ENTRY,'+
					  'I.ACC_PERIOD_CODE,'+
					  'I.ACC_TRANSACTION_TYPE_CODE,'+
					  'I.CURRENCY_CODE,'+
					  'I.DELIVERED_FLAG,'+
					  'I.DELIVERED_DATE,'+
					  'AP.INVOICE_PRINTOUT_FORMAT_CODE AS PLANT_PRINTOUT_FORMAT_CODE,'+
					  'I.SALESMAN_GROUP,'+
					  ' '''' AS CURRENT_STATE_TYPE_CODE,'+
					  'CRH.COMMENTS,'+
					  'CRH.CREDIT_REASON_CODE,'+
					  ' ''INVOICE'' AS TABLE_NAME,'+
					  'CR.NAME AS CREDIT_REASON_NAME,'+
					  'I.INVOICE_PRINTOUT_FORMAT_CODE,'+
					 'CASE '+
						'WHEN CRH.CREDIT_REQUEST_NUMBER <> '''' '+ 
						'THEN CRH.CREATED_BY '+
						'ELSE RA.CREATED_BY '+             
					 'END AS CREATED_BY, '+
					 'dbo.FN_CR_IN_1(CUIN.INVOICE_TRANSMISSION_TYPE,PLIN.DEFAULT_INVOICE_TRANSMISSION_TYPE,GTITT.CODE) AS INVOICE_TRANSMISSION_TYPE,'+
					 'dbo.FN_CR_IN_2(I.INVOICE_ID) AS LAST_DELIVERED_METHOD,'+
					 'dbo.FN_CR_IN_3(I.INVOICE_SOURCE,SO.SO_NUMBER,I.RETURN_AUTHORIZATION_ID) AS ORIGINAL_SO_NUMBER,'+
					 'dbo.FN_CR_IN_4(I.INVOICE_SOURCE,INV_ORI.INVOICE_NUMBER,I.RETURN_AUTHORIZATION_ID) AS ORIGINAL_INVOICE_NUMBER,'+
					 'dbo.FN_CR_IN_5(I.INVOICE_SOURCE,INV_ORI.INVOICE_DATE,I.RETURN_AUTHORIZATION_ID) AS ORIGINAL_INVOICE_DATE,'+
					 'dbo.FN_CR_IN_6(I.INVOICE_SOURCE,RA.CUSTOMER_ID,I.RETURN_AUTHORIZATION_ID,INV_ORI.CUSTOMER_ID,INV_ORI.INVOICE_NUMBER,CRH.ORIGINAL_INVOICE_ID) AS ORIGINAL_INVOICE_AMOUNT,'+
					 'dbo.FN_CR_IN_7(I.INVOICE_ID) AS LAST_DELIVERED_DATE,'+
					 'dbo.FN_CR_IN_8(I.SO_ID) AS SALES_ORDER_TYPE_CODE '+	 					  
					'FROM INVOICE I (NOLOCK) '+
					  'INNER JOIN PARTNER PL (NOLOCK) ON I.PRODUCTION_PLANT_ID = PL.PARTNER_ID '+
					  'JOIN PLANT_INFO PLIN (NOLOCK) ON PLIN.PARTNER_ID = PL.PARTNER_ID '+
					  'INNER JOIN PARTNER CU (NOLOCK) ON I.CUSTOMER_ID = CU.PARTNER_ID '+
					  'INNER JOIN V_PARTNER_CONTACT V_CONTACT (NOLOCK) ON (V_CONTACT.PARTNER_ID = CU.PARTNER_ID '+
																	  'AND V_CONTACT.PARTNER_ADDRESS_TYPE_CODE = ''BA'' '+
																	  'AND V_CONTACT.DEFAULT_FLAG = ''1'') '+
					  'INNER JOIN CUSTOMER_INFO CUIN (NOLOCK) ON CUIN.PARTNER_ID = CU.PARTNER_ID '+
					  'LEFT JOIN CREDIT_REQUEST CRH (NOLOCK) ON CRH.CREDIT_REQUEST_ID = I.CREDIT_REQUEST_ID '+
					  'LEFT JOIN RETURN_AUTHORIZATION RA (NOLOCK) ON RA.RETURN_AUTHORIZATION_ID = I.RETURN_AUTHORIZATION_ID '+
					  'LEFT JOIN GENERAL_TABLE GTS (NOLOCK) ON I.STATUS = GTS.CODE AND GTS.TABLE_NAME = ''INVOICE_STATUS'' '+
					  'INNER JOIN PLANT AP (NOLOCK) ON I.ACCOUNTING_PLANT_CODE = AP.PLANT_CODE '+
					  'LEFT JOIN CREDIT_REASON CR (NOLOCK) ON (CR.CREDIT_REASON_CODE = I.CREDIT_REASON_CODE) '+
					  'LEFT JOIN INVOICE INV_ORI (NOLOCK) ON (INV_ORI.INVOICE_ID = CRH.ORIGINAL_INVOICE_ID) '+
					  'LEFT JOIN SALES_ORDER SO (NOLOCK) ON (SO.SO_ID = INV_ORI.SO_ID) '+
					  'LEFT JOIN GENERAL_TABLE GTITT (NOLOCK) ON GTITT.TABLE_NAME = ''INVOICE_TRANS_TYPE'' AND GTITT.IS_DEFAULT = 1 '+
					'WHERE I.INVOICE_SOURCE IN (''CR'',''RA'') '+
					  'AND EXISTS (SELECT 1 '+
								  'FROM PARTNER PI (NOLOCK) '+
								  'LEFT JOIN PLANT_INFO PROD_PLANT_INFO (NOLOCK) ON (PROD_PLANT_INFO.PARTNER_ID = PI.PARTNER_ID) '+
								  'JOIN SECURITY_USER_PLANT SUP (NOLOCK) ON (SUP.PLANT_CODE = PROD_PLANT_INFO.ACCOUNTING_PLANT_CODE) '+
								  'WHERE SUP.USER_ID = '+ convert(varchar,@USER_ID) +' '+
								  'AND PI.PARTNER_ID = I.PRODUCTION_PLANT_ID) ';

				  IF (@CREDIT_REQUEST_NO != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (CRH.CREDIT_REQUEST_NUMBER = '''+ convert(varchar,@CREDIT_REQUEST_NO) +''') ';
				  IF (@RETURN_AUTHORIZATION_NO != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (RA.RETURN_AUTHORIZATION_NO = '''+ convert(varchar,@RETURN_AUTHORIZATION_NO) +''') ';
			      IF (convert(varchar,@PRODUCTION_PLANT_ID) != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (I.PRODUCTION_PLANT_ID = '+ convert(varchar,@PRODUCTION_PLANT_ID) +') ';
			      IF (convert(varchar,@CUSTOMER_ID) != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (I.CUSTOMER_ID = '+ convert(varchar,@CUSTOMER_ID) +') ';
				  IF (@INVOICE_NUMBER != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (I.INVOICE_NUMBER LIKE ''%'' '''+ convert(varchar,@INVOICE_NUMBER) +''') ';
				  IF (@DELIVERED_FLAG != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (I.DELIVERED_FLAG = '''+ convert(varchar,@DELIVERED_FLAG) +''') ';
				  IF (@DELIVERED_METHOD != '')
					SET @SQL_DATA = @SQL_DATA + 'AND (EXISTS(SELECT 1 '+
															  'FROM INVOICE_TRANSMISSION_HISTORY IH (NOLOCK) '+
															 'WHERE IH.INVOICE_ID = I.INVOICE_ID '+
															   'AND IH.TRANSMISSION_TYPE = '''+ convert(varchar,@DELIVERED_METHOD) +''')) '; 
			      IF (@POSTED_FLAG = '0')
				    SET @SQL_DATA = @SQL_DATA + 'AND (I.STATUS <> ''P'') ';
				  IF (@POSTED_FLAG = '1')
				    SET @SQL_DATA = @SQL_DATA + 'AND (I.STATUS = ''P'') ';

                  IF (convert(varchar,@INVOICE_DATE_FROM) != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (I.INVOICE_DATE >= '''+ CONVERT(VARCHAR(10), @INVOICE_DATE_FROM, 101) +''') ';
                  IF (convert(varchar,@INVOICE_DATE_TO) != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (I.INVOICE_DATE <= '''+ CONVERT(VARCHAR(10), @INVOICE_DATE_TO, 101) +''') ';
                  IF (convert(varchar,@DELIVERED_DATE_FROM) != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (I.DELIVERED_DATE >= '''+ CONVERT(VARCHAR(10), @DELIVERED_DATE_FROM, 101) +''') ';
                  IF (convert(varchar,@DELIVERED_DATE_TO) != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (I.DELIVERED_DATE <= '''+ CONVERT(VARCHAR(10), @DELIVERED_DATE_TO, 101) +''') ';
				
  END
  ELSE
  BEGIN
    SET @SQL_DATA = N'SELECT TOP 2500 '+
					  ' '''' AS SELECTED_FLAG,'+
					  ' '''' AS COVERSHEET_NAME,'+
					  ' '''' AS REJECTED_COMMENTS,'+
					  'I.INVOICE_ID,'+ 
					  'I.INVOICE_NUMBER,'+ 
					  'I.INVOICE_DATE,'+ 
					  'I.PRODUCTION_PLANT_ID,'+ 
					  'PL.PARTNER_CODE AS PRODUCTION_PLANT_CODE,'+ 
					  'I.CUSTOMER_ID,'+ 
					  'CU.PARTNER_CODE AS CUSTOMER_CODE,'+ 
					  'I.CUSTOMER_NAME,'+
					  'CRH.CREDIT_REQUEST_ID,'+
					  'RA.RETURN_AUTHORIZATION_ID,'+
					  'CRH.CREDIT_REQUEST_NUMBER,'+
					  'RA.RETURN_AUTHORIZATION_NO,'+
					  'V_CONTACT.EMAIL AS BILL_TO_EMAIL,'+
					  'V_CONTACT.FAX AS BILL_TO_FAX,'+
					  'I.STATUS,'+
					  'GTS.NAME AS STATUS_NAME,'+
					  'I.AMOUNT,'+
					  'I.TOTAL_WEIGHT,'+
					  'I.WEIGHT_UNIT_CODE,'+
					  'I.LENGTH_UNIT_CODE,'+
					  'I.TOTAL_LENGTH,'+
					  'I.ACC_ENTRY,'+
					  'I.ACC_PERIOD_CODE,'+
					  'I.ACC_TRANSACTION_TYPE_CODE,'+
					  'I.CURRENCY_CODE,'+
					  'I.DELIVERED_FLAG,'+
					  'I.DELIVERED_DATE,'+
					  'AP.INVOICE_PRINTOUT_FORMAT_CODE AS PLANT_PRINTOUT_FORMAT_CODE,'+
					  'I.SALESMAN_GROUP,'+
					  ' '''' AS CURRENT_STATE_TYPE_CODE,'+
					  'CRH.COMMENTS,'+
					  'CRH.CREDIT_REASON_CODE,'+
					  ' ''INVOICE'' AS TABLE_NAME,'+
					  'CR.NAME AS CREDIT_REASON_NAME,'+
					  'I.INVOICE_PRINTOUT_FORMAT_CODE,'+
					  'CASE '+
						 'WHEN CRH.CREDIT_REQUEST_NUMBER <> '''' '+
						 'THEN CRH.CREATED_BY '+
						 'ELSE RA.CREATED_BY '+                 
					  'END AS CREATED_BY,'+  
					  'dbo.FN_CR_IN_1(CUIN.INVOICE_TRANSMISSION_TYPE,PLIN.DEFAULT_INVOICE_TRANSMISSION_TYPE,GTITT.CODE) AS INVOICE_TRANSMISSION_TYPE,'+
					  'dbo.FN_CR_IN_2(I.INVOICE_ID) AS LAST_DELIVERED_METHOD,'+
					  'dbo.FN_CR_IN_3(I.INVOICE_SOURCE,SO.SO_NUMBER,I.RETURN_AUTHORIZATION_ID) AS ORIGINAL_SO_NUMBER,'+
					  'dbo.FN_CR_IN_4(I.INVOICE_SOURCE,INV_ORI.INVOICE_NUMBER,I.RETURN_AUTHORIZATION_ID) AS ORIGINAL_INVOICE_NUMBER,'+
					  'dbo.FN_CR_IN_5(I.INVOICE_SOURCE,INV_ORI.INVOICE_DATE,I.RETURN_AUTHORIZATION_ID) AS ORIGINAL_INVOICE_DATE,'+
					  'dbo.FN_CR_IN_6(I.INVOICE_SOURCE,RA.CUSTOMER_ID,I.RETURN_AUTHORIZATION_ID,INV_ORI.CUSTOMER_ID,INV_ORI.INVOICE_NUMBER,CRH.ORIGINAL_INVOICE_ID) AS ORIGINAL_INVOICE_AMOUNT,'+
					  'dbo.FN_CR_IN_7(I.INVOICE_ID) AS LAST_DELIVERED_DATE,'+
					  'dbo.FN_CR_IN_8(I.SO_ID) AS SALES_ORDER_TYPE_CODE '+
					'FROM INVOICE I (NOLOCK) '+
					 'INNER JOIN PARTNER PL (NOLOCK) ON I.PRODUCTION_PLANT_ID = PL.PARTNER_ID '+
					 'JOIN PLANT_INFO PLIN (NOLOCK) ON PLIN.PARTNER_ID = PL.PARTNER_ID '+
					 'INNER JOIN PARTNER CU (NOLOCK) ON I.CUSTOMER_ID = CU.PARTNER_ID '+
					 'INNER JOIN V_PARTNER_CONTACT V_CONTACT (NOLOCK) ON (V_CONTACT.PARTNER_ID = CU.PARTNER_ID '+
						                                                 'AND V_CONTACT.PARTNER_ADDRESS_TYPE_CODE = ''BA'' '+
						                                                 'AND V_CONTACT.DEFAULT_FLAG = ''1'') '+
					  'INNER JOIN CUSTOMER_INFO CUIN (NOLOCK) ON CUIN.PARTNER_ID = CU.PARTNER_ID '+
					  'LEFT JOIN CREDIT_REQUEST CRH (NOLOCK) ON CRH.CREDIT_REQUEST_ID = I.CREDIT_REQUEST_ID '+
					  'LEFT JOIN RETURN_AUTHORIZATION RA (NOLOCK) ON RA.RETURN_AUTHORIZATION_ID = I.RETURN_AUTHORIZATION_ID '+
					  'LEFT JOIN GENERAL_TABLE GTS (NOLOCK) ON I.STATUS = GTS.CODE AND GTS.TABLE_NAME = ''INVOICE_STATUS'' '+
					  'INNER JOIN PLANT AP (NOLOCK) ON I.ACCOUNTING_PLANT_CODE = AP.PLANT_CODE '+
					  'LEFT JOIN CREDIT_REASON CR (NOLOCK) ON (CR.CREDIT_REASON_CODE = I.CREDIT_REASON_CODE) '+
					  'LEFT JOIN INVOICE INV_ORI (NOLOCK) ON (INV_ORI.INVOICE_ID = CRH.ORIGINAL_INVOICE_ID) '+
					  'LEFT JOIN SALES_ORDER SO (NOLOCK) ON (SO.SO_ID = INV_ORI.SO_ID) '+
					  'LEFT JOIN GENERAL_TABLE GTITT (NOLOCK) ON GTITT.TABLE_NAME = ''INVOICE_TRANS_TYPE'' AND GTITT.IS_DEFAULT = 1 '+
					'WHERE I.INVOICE_SOURCE IN (''CR'',''RA'') '+
					  'AND EXISTS(SELECT 1 '+
				                     'FROM PARTNER PI (NOLOCK) '+
				                     'LEFT JOIN PLANT_INFO PROD_PLANT_INFO (NOLOCK) ON (PROD_PLANT_INFO.PARTNER_ID = PI.PARTNER_ID) '+
				                     'JOIN SECURITY_USER_PLANT SUP (NOLOCK) ON (SUP.PLANT_CODE = PROD_PLANT_INFO.ACCOUNTING_PLANT_CODE) '+
				                    'WHERE SUP.USER_ID = '+ convert(varchar,@USER_ID) +' '+
					                 ' AND PI.PARTNER_ID = I.PRODUCTION_PLANT_ID) ';

				  IF (@CREDIT_REQUEST_NO != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (CRH.CREDIT_REQUEST_NUMBER = '''+ convert(varchar,@CREDIT_REQUEST_NO) +''') ';
				  IF (@RETURN_AUTHORIZATION_NO != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (RA.RETURN_AUTHORIZATION_NO = '''+ convert(varchar,@RETURN_AUTHORIZATION_NO) +''') ';
			      IF (convert(varchar,@PRODUCTION_PLANT_ID) != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (I.PRODUCTION_PLANT_ID = '+ convert(varchar,@PRODUCTION_PLANT_ID) +') ';
			      IF (convert(varchar,@CUSTOMER_ID) != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (I.CUSTOMER_ID = '+ convert(varchar,@CUSTOMER_ID) +') ';
				  IF (@INVOICE_NUMBER != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (I.INVOICE_NUMBER LIKE ''%'' '''+ convert(varchar,@INVOICE_NUMBER) +''') ';
				  IF (@DELIVERED_FLAG != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (I.DELIVERED_FLAG = '''+ convert(varchar,@DELIVERED_FLAG) +''') ';
				  IF (@DELIVERED_METHOD != '')
					SET @SQL_DATA = @SQL_DATA + 'AND (EXISTS(SELECT 1 '+
															  'FROM INVOICE_TRANSMISSION_HISTORY IH (NOLOCK) '+
															 'WHERE IH.INVOICE_ID = I.INVOICE_ID '+
															   'AND IH.TRANSMISSION_TYPE = '''+ convert(varchar,@DELIVERED_METHOD) +''')) '; 
			      IF (@POSTED_FLAG = '0')
				    SET @SQL_DATA = @SQL_DATA + 'AND (I.STATUS <> ''P'') ';
				  IF (@POSTED_FLAG = '1')
				    SET @SQL_DATA = @SQL_DATA + 'AND (I.STATUS = ''P'') ';

                  IF (convert(varchar,@INVOICE_DATE_FROM) != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (I.INVOICE_DATE >= '''+ CONVERT(VARCHAR(10), @INVOICE_DATE_FROM, 101)  +''') ';
                  IF (convert(varchar,@INVOICE_DATE_TO) != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (I.INVOICE_DATE <= '''+ CONVERT(VARCHAR(10), @INVOICE_DATE_TO, 101) +''') ';
      
  END
END
ELSE
BEGIN

SET @SQL_DATA = N'SELECT TOP 2500 '+
                 ' '''' AS SELECTED_FLAG,'+
                 ' '''' AS COVERSHEET_NAME,'+
                 'WD_CR.WF_DOCUMENT_COMMENTS AS REJECTED_COMMENTS,'+
                 'CRH.CREDIT_REQUEST_ID AS INVOICE_ID,'+
                 ' '''' AS INVOICE_NUMBER,'+
                 'NULL AS INVOICE_DATE,'+
                 'CRH.PRODUCTION_PLANT_ID,'+
                 'PL.PARTNER_CODE AS PRODUCTION_PLANT_CODE,'+
                 'CRH.CUSTOMER_ID,'+
                 'CU.PARTNER_CODE AS CUSTOMER_CODE,'+
                 'CU.NAME AS CUSTOMER_NAME,'+
                 'CRH.CREDIT_REQUEST_ID,'+
                 ' '''' AS RETURN_AUTHORIZATION_ID,'+
                 'CRH.CREDIT_REQUEST_NUMBER,'+
                 ' '''' AS RETURN_AUTHORIZATION_NO, '+
                 'CRH.CREATED_BY, '+
                 ' ''P'' AS INVOICE_TRANSMISSION_TYPE, '+
                 'V_CONTACT.EMAIL AS BILL_TO_EMAIL, '+
                 'V_CONTACT.FAX AS BILL_TO_FAX, '+
                 ' '''' AS STATUS, '+
                 ' '''' AS STATUS_NAME, '+
                 'CRH.TOTAL_AMOUNT AS AMOUNT, '+
                 '0 AS TOTAL_WEIGHT, '+
                 ' '''' AS WEIGHT_UNIT_CODE, '+
                 ' '''' AS LENGTH_UNIT_CODE, '+
                 '0 AS TOTAL_LENGTH, '+ 
                 ' '''' AS ACC_ENTRY, '+ 
                 ' '''' AS ACC_PERIOD_CODE, '+ 
                 ' '''' AS ACC_TRANSACTION_TYPE_CODE, '+
                 ' '''' AS CURRENCY_CODE, '+ 
                 ' ''0'' AS DELIVERED_FLAG, '+
                 'NULL AS DELIVERED_DATE, '+
                 ' '''' AS INVOICE_PRINTOUT_FORMAT_CODE, '+
                 'NULL AS LAST_DELIVERED_METHOD, '+
                 'CRH.SALESMAN_GROUP, '+
                 'CRH.CURRENT_STATE_TYPE_CODE, '+
                 'CRH.COMMENTS, '+
                 'CRH.CREDIT_REASON_CODE, '+
                 'CR.NAME AS CREDIT_REASON_NAME, '+
                 ' ''CREDIT_REQUEST'' AS TABLE_NAME, '+
                 'SO.SO_NUMBER AS ORIGINAL_SO_NUMBER, '+
                 'I.INVOICE_NUMBER AS ORIGINAL_INVOICE_NUMBER, '+
  
                 'CASE '+
	               'WHEN I.INVOICE_SOURCE = ''RA'' THEN 0 '+
	               'WHEN I.INVOICE_SOURCE = ''CR'' THEN dbo.FN_GET_REMAINING_BALANCE(I.CUSTOMER_ID, I.INVOICE_NUMBER, CRH.ORIGINAL_INVOICE_ID)  '+
                 'END AS ORIGINAL_INVOICE_AMOUNT, '+

                 'I.INVOICE_DATE AS ORIGINAL_INVOICE_DATE, '+
                 'NULL AS LAST_DELIVERED_DATE '+
                 'FROM CREDIT_REQUEST CRH (NOLOCK) '+ 
                 'INNER JOIN PARTNER PL (NOLOCK) ON (PL.PARTNER_ID = CRH.PRODUCTION_PLANT_ID) '+ 
                 'INNER JOIN PARTNER CU (NOLOCK) ON (CU.PARTNER_ID = CRH.CUSTOMER_ID) '+ 
                 'INNER JOIN V_PARTNER_CONTACT V_CONTACT (NOLOCK) ON (V_CONTACT.PARTNER_ID = CU.PARTNER_ID '+ 
                                                                 'AND V_CONTACT.PARTNER_ADDRESS_TYPE_CODE = ''BA'' '+ 
                                                                 'AND V_CONTACT.DEFAULT_FLAG = ''1'') '+
                 'INNER JOIN CUSTOMER_INFO CUIN (NOLOCK) ON (CUIN.PARTNER_ID = CU.PARTNER_ID) '+
                 'INNER JOIN CREDIT_REASON CR (NOLOCK) ON (CR.CREDIT_REASON_CODE = CRH.CREDIT_REASON_CODE) '+
                 'LEFT JOIN INVOICE I (NOLOCK) ON (I.INVOICE_ID = CRH.ORIGINAL_INVOICE_ID) '+
                 'LEFT JOIN SALES_ORDER SO (NOLOCK) ON (SO.SO_ID = I.SO_ID) '+
                 'LEFT JOIN WF_DOCUMENT WD_CR (NOLOCK) ON (WD_CR.WF_DOCUMENT_ID = (SELECT TOP 1 CRH_TEMP.WF_DOCUMENT_ID  '+
                                                                                    'FROM WF_DOCUMENT CRH_TEMP (NOLOCK)  '+
                                                                                   'WHERE CRH_TEMP.DOCUMENT_ID = CRH.CREDIT_REQUEST_ID '+
																                   'ORDER BY CRH_TEMP.CREATION_DATE DESC) '+
						                              'AND WD_CR.WF_DOCUMENT_CURRENT_STATUS = ''R'' '+
                                                      'AND WD_CR.WF_DOCUMENT_TYPE_CODE = ''CRE'') '+
                 'WHERE CRH.CURRENT_STATE_TYPE_CODE IN (''REJ'') '+
                   'AND EXISTS ( SELECT 1 '+
                                  'FROM PARTNER PI (NOLOCK)  '+
                                  'LEFT JOIN PLANT_INFO PROD_PLANT_INFO (NOLOCK) ON (PROD_PLANT_INFO.PARTNER_ID = PI.PARTNER_ID) '+
                                  'JOIN SECURITY_USER_PLANT SUP (NOLOCK) ON (SUP.PLANT_CODE = PROD_PLANT_INFO.ACCOUNTING_PLANT_CODE) '+
                                 'WHERE SUP.USER_ID = '+ convert(varchar,@USER_ID) +' '+
                                   'AND PI.PARTNER_ID = CRH.PRODUCTION_PLANT_ID)';

			      IF (@CREDIT_REQUEST_NO != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (CRH.CREDIT_REQUEST_NUMBER = '''+ convert(varchar,@CREDIT_REQUEST_NO) +''') ';
			      IF (convert(varchar,@PRODUCTION_PLANT_ID) != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (CRH.PRODUCTION_PLANT_ID = '+ convert(varchar,@PRODUCTION_PLANT_ID) +') ';
			      IF (convert(varchar,@CUSTOMER_ID) != '')
				    SET @SQL_DATA = @SQL_DATA + 'AND (CRH.CUSTOMER_ID = '+ convert(varchar,@CUSTOMER_ID) +') ';				 
END;


SET @SQL_DATA = @SQL_DATA + @ORDER_BY;
EXECUTE (@SQL_DATA);
--PRINT (@SQL_DATA)

END
GO
/*
Changeset: 5715
Comment:   ST66500
Committer: CLARKSTEEL\bobbior
Creation Date: 08/07/2016 04:16:52 p.m.
*/

IF OBJECT_ID ('dbo.SPU_IP_TAG_SEARCH') IS NOT NULL
	DROP PROCEDURE [dbo].[SPU_IP_TAG_SEARCH]
GO

CREATE PROCEDURE [dbo].[SPU_IP_TAG_SEARCH] 
( 
   @PLANT_ID INTEGER,  
   @TAG_TYPE CHAR(1),  
   @TAG_NO VARCHAR(10),  
   @SKID_NUMBER VARCHAR(20),
   @PRODUCT_ID INTEGER,  
   @KSI_CODE VARCHAR(2),  
   @COAT_TYPE VARCHAR(20),
   @IS_RETHURN BIT,
   @VENDOR_TAG_NO VARCHAR(20)
)  
AS 
BEGIN 
 
 SELECT DISTINCT TOP 500 
    T.TAG_NO, 
	T.VENDOR_TAG_NO,
    T.IP_FLAG, 
    T.SKID_NUMBER, 
    T.PLANT_ID, 
  	T.TAG_TYPE,  
    CASE 
       WHEN T.TAG_TYPE = 'S' THEN IA.TOTAL_QUANTITY 
       ELSE T.PIECES 
    END PIECES,   
    CASE
		WHEN T.TAG_TYPE = 'S' THEN COALESCE(P.WEB,0) 
		ELSE T.WIDTH 
	END AS WIDTH,	 
  	T.SCALE_WEIGHT,   
  	T.PRODUCT_ID, 
  	T.MIC_ID, 
  	T.MIC_OD, 
  	T.COAT_TYPE_CODE,  
  	T.ROCK, 
  	CASE 
  	  WHEN COALESCE(T.COAT_SPEC,'') = '' THEN S.COAT_SPEC_CODE 
  	  ELSE T.[COAT_SPEC] 
  	END [COAT_SPEC],   
    CASE 
      WHEN T.TAG_TYPE = 'S' THEN S.KSI_CODE 
      ELSE t.KSI_CODE 
    END KSI_CODE, 
  	P.PRODUCT_NO,    
  	GT.GAUGE_CODE, 
  	WHL.WAREHOUSE_LOCATION_ID, 
  	T.LAST_INVENTORY_ACTIVITY_ID, 
  	T.IP_FLAG,     
  	T.PICK_LIST_STATUS,
  	(CASE WHEN PP.GAGE_MIN IS NOT NULL 
  	     THEN PP.GAGE_MIN
  	     ELSE P.GAGE_MIN    
  	 END ) AS GAGE_MIN,
  	 CPTD.COIL_PACK_TAG_ID,
  	 CPT.STATUS AS COIL_PACK_STATUS  
  FROM TAG T (NOLOCK) 
  JOIN PRODUCT P (NOLOCK) ON (T.PRODUCT_ID = P.PRODUCT_ID) 
  LEFT JOIN PRODUCT_PLANT PP (NOLOCK) ON PP.PRODUCT_ID = P.PRODUCT_ID AND PP.PARTNER_ID = T.PLANT_ID
  LEFT JOIN INVENTORY_ACTIVITY IA (NOLOCK) ON (T.LAST_INVENTORY_ACTIVITY_ID = IA.INVENTORY_ACTIVITY_ID) 
  LEFT JOIN WAREHOUSE_LOCATION WHL (NOLOCK) ON (IA.WAREHOUSE_LOCATION_ID = WHL.WAREHOUSE_LOCATION_ID) 
  LEFT JOIN GAUGE_TYPE GT (NOLOCK) ON (GT.GAUGE_TYPE_CODE = P.GAUGE_TYPE_CODE) 
  LEFT JOIN SKID S (NOLOCK) ON (S.SKID_NUMBER = T.SKID_NUMBER AND S.IS_PRODUCED = '1')
  LEFT JOIN COIL_PACK_TAG_DETAIL CPTD (NOLOCK) ON (CPTD.TAG_NO = T.TAG_NO)
  LEFT JOIN COIL_PACK_TAG CPT (NOLOCK) ON (CPT.COIL_PACK_TAG_ID = CPTD.COIL_PACK_TAG_ID)
 WHERE (T.STATUS = 'A')  
   AND (COALESCE(T.IP_FLAG,'') NOT IN ('C','S') ) 
   AND (COALESCE(T.IS_REJECTED,'0') = '0') 
   AND (COALESCE(T.HOLD_FOR_QUALITY,'') <> '1' OR @IS_RETHURN = 1)  
   AND (COALESCE(T.DISPOSITION_FLAG,'1') = '1')
   AND (COALESCE(T.CURRENT_SETUP_ID, 0) = 0 OR (NOT EXISTS(SELECT 1
                                                           FROM SETUP S (NOLOCK)
                                                           INNER JOIN SETUP_TAG ST(NOLOCK) ON S.SETUP_ID = ST.SETUP_ID
                                                           WHERE S.SETUP_ID = T.CURRENT_SETUP_ID
                                                             AND S.STATUS IN ('A','C')
                                                             AND ST.TAG_NO = T.TAG_NO)))
   AND (COALESCE(@PLANT_ID,0) = 0 OR T.PLANT_ID = @PLANT_ID ) 
   AND (COALESCE(@TAG_TYPE,'') = '' OR T.TAG_TYPE = @TAG_TYPE) 
   AND (T.TAG_TYPE = 'R'  
         OR ( T.TAG_TYPE = 'S' 
              AND S.STATUS = 'A'  
	          AND S.IS_PRODUCED = '1' 
              AND S.SKID_TYPE_CODE = 'STOCK') 
      ) 
  AND (COALESCE(PICK_LIST_STATUS,'') NOT IN ('A','S'))    
  AND ( NOT EXISTS ( SELECT '1' 
                     FROM SECURITY_USER_LOCK (NOLOCK)SUL 
                     WHERE SUL.SECURITY_USER_LOCK_TYPE_CODE = 'RM'
                       AND SUL.LOCK_KEY = T.TAG_NO
                   ))  
  AND (COALESCE(@TAG_NO,'') = '' OR  T.TAG_NO LIKE '%' + @TAG_NO + '%') 
  AND (COALESCE(@SKID_NUMBER ,'') = '' OR  T.SKID_NUMBER LIKE @SKID_NUMBER  + '%') 
  AND (COALESCE(@PRODUCT_ID,0) = 0 OR T.PRODUCT_ID = @PRODUCT_ID ) 
  AND (COALESCE(@COAT_TYPE,'') = '' OR T.COAT_TYPE_CODE = @COAT_TYPE ) 
  AND (COALESCE(@KSI_CODE,'') = ''  OR T.KSI_CODE = @KSI_CODE )
  AND (COALESCE(@VENDOR_TAG_NO,'') = ''  OR T.VENDOR_TAG_NO = @VENDOR_TAG_NO )
 ORDER BY T.TAG_NO DESC 
 
END 
GO
/*
Changeset: 5715
Comment:   ST66500
Committer: CLARKSTEEL\bobbior
Creation Date: 08/07/2016 04:16:52 p.m.
*/

IF EXISTS(SELECT 1 FROM SYSOBJECTS WHERE NAME = 'SPU_MASTER_CUSTOMER_GROUP_DEFAULT_COMMENT_GET') 
  DROP PROCEDURE SPU_MASTER_CUSTOMER_GROUP_DEFAULT_COMMENT_GET
GO

CREATE PROCEDURE [dbo].[SPU_MASTER_CUSTOMER_GROUP_DEFAULT_COMMENT_GET] 
( 
  @MASTER_CUSTOMER_GROUP_DEFAULT_COMMENT_ID INT,
  @PARTNER_ID INT,
  @COMMENT_SOURCE_CODE VARCHAR(2),
  @COMMENT_TYPE_CODE VARCHAR(3),
  @PIVOT_DATE DATETIME,
  @INCLUDE_ATTACHMENT CHAR(1),
  @COMMENT_GROUP VARCHAR(1)
) 
AS  
BEGIN 

DECLARE @MASTER_CUSTOMER_GROUP_ID INT;

SELECT @MASTER_CUSTOMER_GROUP_ID = MASTER_CUSTOMER_GROUP_ID FROM CUSTOMER_INFO (NOLOCK) WHERE PARTNER_ID = @PARTNER_ID;

 
SELECT 
  PDC.MASTER_CUSTOMER_GROUP_DEFAULT_COMMENT_ID, 
  PDC.MASTER_CUSTOMER_GROUP_ID, 
  PDC.COMMENT_SOURCE_CODE, 
  PDC.COMMENT_TYPE_CODE, 
  PDC.COMMENTS, 
  PDC.CREATED_BY, 
  PDC.CREATION_DATE, 
  PDC.UPDATED_BY, 
  PDC.UPDATE_DATE, 
  CASE @INCLUDE_ATTACHMENT WHEN '1' THEN PDC.ATTACHMENT 
       ELSE CONVERT(IMAGE, NULL) 
  END AS ATTACHMENT, 
  PDC.ATTACHMENT_NAME, 
  PDC.ATTACHMENT_CONTENT_TYPE, 
  CASE WHEN PDC.ATTACHMENT IS NOT NULL THEN '1' 
       ELSE '0' 
  END AS HAS_ATTACHMENT, 
  SOCT.NAME AS SALES_ORDER_COMMENT_TYPE_NAME, 
  SOCT.ORDER_NO AS SALES_ORDER_COMMENT_TYPE_ORDER_NO,
  PDC.COMMENT_GROUP,
  PDC.PRINT_PERMANENT_FLAG
FROM MASTER_CUSTOMER_GROUP_DEFAULT_COMMENT PDC (NOLOCK) 
LEFT JOIN SALES_ORDER_COMMENT_TYPE SOCT (NOLOCK) ON (PDC.COMMENT_TYPE_CODE = SOCT.SALES_ORDER_COMMENT_TYPE_CODE AND PDC.COMMENT_SOURCE_CODE = 'OE')
WHERE (@MASTER_CUSTOMER_GROUP_DEFAULT_COMMENT_ID IS NOT NULL AND PDC.MASTER_CUSTOMER_GROUP_DEFAULT_COMMENT_ID = @MASTER_CUSTOMER_GROUP_DEFAULT_COMMENT_ID)  
  OR  (@MASTER_CUSTOMER_GROUP_DEFAULT_COMMENT_ID IS NULL
    AND PDC.MASTER_CUSTOMER_GROUP_ID = @MASTER_CUSTOMER_GROUP_ID
    AND (@COMMENT_SOURCE_CODE IS NULL OR PDC.COMMENT_SOURCE_CODE = @COMMENT_SOURCE_CODE) 
    AND (@COMMENT_TYPE_CODE IS NULL OR PDC.COMMENT_TYPE_CODE = @COMMENT_TYPE_CODE) 
    AND (@PIVOT_DATE IS NULL OR PDC.EFFECTIVE_DATE_FROM IS NULL OR DBO.FN_DATE(PDC.EFFECTIVE_DATE_FROM) <= DBO.FN_DATE(@PIVOT_DATE))
    AND (@PIVOT_DATE IS NULL OR PDC.EFFECTIVE_DATE_TO IS NULL OR DBO.FN_DATE(PDC.EFFECTIVE_DATE_TO) >= DBO.FN_DATE(@PIVOT_DATE)))
 AND (@COMMENT_GROUP IS NOT NULL AND (PDC.COMMENT_GROUP = 'B' OR PDC.COMMENT_GROUP =  @COMMENT_GROUP) ); 
 
END 
GO


/*
Changeset: 5715
Comment:   ST66500
Committer: CLARKSTEEL\bobbior
Creation Date: 08/07/2016 04:16:52 p.m.
*/

IF EXISTS(SELECT 1 FROM SYSOBJECTS  WHERE NAME = 'SPU_PHY_INV_ALL_UPDATE_LOCATION' AND TYPE = 'P')
  DROP PROCEDURE [dbo].[SPU_PHY_INV_ALL_UPDATE_LOCATION]
GO

CREATE PROCEDURE [dbo].[SPU_PHY_INV_ALL_UPDATE_LOCATION] 
(  
   @PLANT_ID INTEGER,  
   @INV_TYPE CHAR(1),  
   @ZONE_ID INTEGER, 
   @PRODUCT_ID_LIST VARCHAR(2000),
   @USER_CODE VARCHAR(20), 
   @COUNT_ROWS_SEARCH INTEGER OUTPUT,
   @COUNT_ROWS_UPDATED INTEGER OUTPUT, 
   @COUNT_ROWS_NOT_UPDATED INTEGER OUTPUT, 
   @COUNT_ROWS_CHANGE_LOCATION INTEGER OUTPUT
)  
AS 
BEGIN TRY 
    DECLARE @OUT_MESSAGE             VARCHAR(1000); 

	DECLARE @C_PHY_INV_TAG_NO        VARCHAR(10); 
	DECLARE @C_PHY_INV_SKID_NUMBER   VARCHAR(20);
	DECLARE @C_PHY_INV_SUPPLY_TAG_NO VARCHAR(20);
	DECLARE @C_PHY_INV_BAY           VARCHAR(2);   
	DECLARE @C_PHY_INV_ROW           VARCHAR(3); 
	DECLARE @WAREHOUSE_LOCATION_ID   INT;
	DECLARE @C_PHY_INV_TAG_TYPE      VARCHAR(1);
	DECLARE @C_PHY_INV_ZONE_ID       INT;
	DECLARE @TAG_STATUS              CHAR(1);
		
	DECLARE @INVENTORY_ACTIVITY_ID INT;
	
	DECLARE @CURRENT_WAREHOUSE_LOCATION_ID     INT;
	DECLARE @LAST_INVENTORY_ACTIVITY_TYPE_CODE VARCHAR(3);
	DECLARE @LAST_INVENTORY_CREATED_BY         VARCHAR(20);
	DECLARE @LAST_INVENTORY_CREATION_DATE      DATETIME;
		
	SET @COUNT_ROWS_UPDATED = 0; 
	SET @COUNT_ROWS_NOT_UPDATED = 0;
	SET @COUNT_ROWS_SEARCH = 0;
	SET @COUNT_ROWS_CHANGE_LOCATION = 0;

	DECLARE @UPDATE  INT;

-- RECORDS FOUND =================================================
 SELECT @COUNT_ROWS_SEARCH = COUNT(*)
  FROM PHYSICAL_INVENTORY PHY (NOLOCK)
  JOIN TAG T (NOLOCK) ON (T.TAG_NO = PHY.TAG_NO)	   
  JOIN WAREHOUSE_LOCATION WHL (NOLOCK) ON (PHY.WAREHOUSE_LOCATION_ID = WHL.WAREHOUSE_LOCATION_ID) 
  LEFT JOIN SUPPLY_TAG ST (NOLOCK) ON (ST.TAG_NO = PHY.TAG_NO)
 WHERE PHY.STATUS = 'A' 
   AND ((@ZONE_ID = 0 AND PHY.ZONE_ID IS NULL) OR (@ZONE_ID <> 0 AND PHY.ZONE_ID = @ZONE_ID)) 
   AND (PHY.PLANT_ID = @PLANT_ID)  
   AND (T.TAG_TYPE = @INV_TYPE OR @INV_TYPE = 'A') 
   AND (PHY.CREATION_DATE = (SELECT MAX(PHY1.CREATION_DATE) 
	  						  FROM PHYSICAL_INVENTORY PHY1 (NOLOCK)
							 WHERE (PHY1.TAG_NO = PHY.TAG_NO))) 
   AND (@PRODUCT_ID_LIST = '' OR PHYSICAL_INVENTORY_ID IN (SELECT PHI.PHYSICAL_INVENTORY_ID
                                                             FROM PHYSICAL_INVENTORY PHI (NOLOCK)
                                                             JOIN TAG T ON T.TAG_NO = PHI.TAG_NO
                                                             JOIN dbo.FN_SPLIT_LIST(@PRODUCT_ID_LIST, ',') l ON l.value = T.PRODUCT_ID))



	  
	DECLARE CUR_1 CURSOR FAST_FORWARD FOR  
	 SELECT	T.TAG_NO, 
			T.SKID_NUMBER, 
			ST.SUPPLY_TAG_NO,
			T.TAG_TYPE,			
			WHL.BAY, 
			WHL.ROW,			
			WHL.WAREHOUSE_LOCATION_ID,
			T.STATUS,
			PHY.ZONE_ID
	   FROM PHYSICAL_INVENTORY PHY (NOLOCK)
	   JOIN TAG T (NOLOCK) ON (T.TAG_NO = PHY.TAG_NO)	   
	   JOIN WAREHOUSE_LOCATION WHL (NOLOCK) ON (PHY.WAREHOUSE_LOCATION_ID = WHL.WAREHOUSE_LOCATION_ID) 
	   LEFT JOIN SUPPLY_TAG ST (NOLOCK) ON (ST.TAG_NO = PHY.TAG_NO)
	  WHERE PHY.STATUS = 'A' 
		AND ((@ZONE_ID = 0 AND PHY.ZONE_ID IS NULL) OR (@ZONE_ID <> 0 AND PHY.ZONE_ID = @ZONE_ID)) 
		AND (PHY.PLANT_ID = @PLANT_ID)  
		AND (T.TAG_TYPE = @INV_TYPE OR @INV_TYPE = 'A') 
		AND (PHY.CREATION_DATE = (SELECT MAX(PHY1.CREATION_DATE) 
									FROM PHYSICAL_INVENTORY PHY1 (NOLOCK)
								   WHERE (PHY1.TAG_NO = PHY.TAG_NO))) 
		AND (@PRODUCT_ID_LIST = '' OR PHYSICAL_INVENTORY_ID IN (SELECT PHI.PHYSICAL_INVENTORY_ID
                                                                  FROM PHYSICAL_INVENTORY PHI (NOLOCK)
                                                                  JOIN TAG T ON T.TAG_NO = PHI.TAG_NO
                                                                  JOIN dbo.FN_SPLIT_LIST(@PRODUCT_ID_LIST, ',') l ON l.value = T.PRODUCT_ID)) 
	  ORDER BY T.TAG_NO, PHY.CREATION_DATE DESC
	 
	OPEN CUR_1; 
	FETCH CUR_1 INTO @C_PHY_INV_TAG_NO, 
	                 @C_PHY_INV_SKID_NUMBER, 
	                 @C_PHY_INV_SUPPLY_TAG_NO,
	                 @C_PHY_INV_TAG_TYPE, 
	                 @C_PHY_INV_BAY, 
	                 @C_PHY_INV_ROW,
	                 @WAREHOUSE_LOCATION_ID,
	                 @TAG_STATUS,
					 @C_PHY_INV_ZONE_ID; 

	DECLARE @TNXN VARCHAR(20);
	
    WHILE @@fetch_status = 0 
	BEGIN 
		BEGIN TRY
			SET @TNXN = 'TNXN';

			BEGIN TRANSACTION @TNXN;


			SELECT @CURRENT_WAREHOUSE_LOCATION_ID = WL.WAREHOUSE_LOCATION_ID,
			       @LAST_INVENTORY_ACTIVITY_TYPE_CODE = IA.INVENTORY_ACTIVITY_TYPE_CODE,
				   @LAST_INVENTORY_CREATED_BY = IA.CREATED_BY,
				   @LAST_INVENTORY_CREATION_DATE = IA.CREATION_DATE
		      FROM TAG T (NOLOCK)
		      JOIN INVENTORY_ACTIVITY IA (NOLOCK) ON (IA.INVENTORY_ACTIVITY_ID = T.LAST_INVENTORY_ACTIVITY_ID) 
		      JOIN WAREHOUSE_LOCATION WL (NOLOCK) ON (WL.WAREHOUSE_LOCATION_ID = IA.WAREHOUSE_LOCATION_ID) 
		     WHERE T.TAG_NO = @C_PHY_INV_TAG_NO;

			IF NOT EXISTS(SELECT 1 FROM PHYSICAL_INVENTORY_UPDATE (NOLOCK) WHERE PLANT_ID = @PLANT_ID AND TAG_NO = @C_PHY_INV_TAG_NO)
			BEGIN
			    SET @UPDATE = 1;

			    --INSERT LOC ACTIVITY
				EXECUTE SPU_PHY_INV_UPDATE_LOCATION  @C_PHY_INV_SKID_NUMBER,   
		   											 @C_PHY_INV_TAG_NO, 
		   											 @C_PHY_INV_SUPPLY_TAG_NO,
													 @C_PHY_INV_TAG_TYPE, 
													 @PLANT_ID, 
													 @C_PHY_INV_BAY, 
													 @C_PHY_INV_ROW,  
													 @USER_CODE,  
													 @OUT_MESSAGE OUTPUT; 
	
			   --INSERT PHY ACTIVITY
				EXEC SPU_INVENTORY_ACTIVITY_INSERT @INVENTORY_ACTIVITY_ID OUTPUT,    
												   'PHY', 
												   NULL, NULL, NULL, NULL, 
												   @C_PHY_INV_TAG_NO, 
												   NULL, 
												   NULL, 
												   NULL, 
												   @WAREHOUSE_LOCATION_ID, 
												   NULL, NULL, NULL, NULL, NULL, NULL, NULL, '', 
												   @USER_CODE, 
												   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
												   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
  												   NULL, NULL, NULL, NULL, NULL,
  												   @TAG_STATUS,NULL, NULL; 
  			                                   
				/** Update TAG **/             
				UPDATE TAG  
				   SET UPDATED_BY = @USER_CODE, 
					   UPDATE_DATE = GETDATE() 
				 WHERE TAG_NO = @C_PHY_INV_TAG_NO;
			END		    	
			ELSE
			  SET @UPDATE = 0;
			  
			  			     
			COMMIT TRANSACTION @TNXN;
		END TRY 
		
		BEGIN CATCH
			ROLLBACK TRANSACTION @TNXN;
            SELECT @OUT_MESSAGE =  ERROR_MESSAGE();
		END CATCH
       
	 
		IF(@OUT_MESSAGE <> '')  
		BEGIN 
			INSERT INTO [dbo].[PHYSICAL_INVENTORY_UPDATE]
					   ([PLANT_ID]
					   ,[ZONE_ID]
					   ,[INVENTORY_TYPE]
					   ,[SKID_NUMBER]
					   ,[TAG_NO]
					   ,[SUPPLY_TAG_NO]
					   ,[CREATED_BY]
					   ,[CREATION_DATE]
					   ,[PHYSICAL_WAREHOUSE_LOCATION_ID]
					   ,[CURRENT_WAREHOUSE_LOCATION_ID]
					   ,[LAST_INVENTORY_ACTIVITY_TYPE_CODE]
					   ,[LAST_INVENTORY_CREATED_BY]
					   ,[LAST_INVENTORY_CREATION_DATE]
					   ,[MESSAGE])
				 VALUES
					   (@PLANT_ID
					   ,@C_PHY_INV_ZONE_ID
					   ,@C_PHY_INV_TAG_TYPE
					   ,@C_PHY_INV_SKID_NUMBER
					   ,@C_PHY_INV_TAG_NO
					   ,@C_PHY_INV_SUPPLY_TAG_NO
					   ,@USER_CODE
					   ,GETDATE()
					   ,@WAREHOUSE_LOCATION_ID
					   ,@CURRENT_WAREHOUSE_LOCATION_ID
					   ,@LAST_INVENTORY_ACTIVITY_TYPE_CODE
					   ,@LAST_INVENTORY_CREATED_BY
					   ,@LAST_INVENTORY_CREATION_DATE
					   ,@OUT_MESSAGE)					 
		 
		  SET @COUNT_ROWS_NOT_UPDATED = @COUNT_ROWS_NOT_UPDATED + 1;
		END  
		ELSE
		BEGIN	
		  IF (@UPDATE = 1)
		  BEGIN
		    
			INSERT INTO [dbo].[PHYSICAL_INVENTORY_UPDATE]
					   ([PLANT_ID]
					   ,[ZONE_ID]
					   ,[INVENTORY_TYPE]
					   ,[SKID_NUMBER]
					   ,[TAG_NO]
					   ,[SUPPLY_TAG_NO]
					   ,[CREATED_BY]
					   ,[CREATION_DATE]
					   ,[PHYSICAL_WAREHOUSE_LOCATION_ID]
					   ,[CURRENT_WAREHOUSE_LOCATION_ID]
					   ,[LAST_INVENTORY_ACTIVITY_TYPE_CODE]
					   ,[LAST_INVENTORY_CREATED_BY]
					   ,[LAST_INVENTORY_CREATION_DATE])
				 VALUES
					   (@PLANT_ID
					   ,@C_PHY_INV_ZONE_ID
					   ,@C_PHY_INV_TAG_TYPE
					   ,@C_PHY_INV_SKID_NUMBER
					   ,@C_PHY_INV_TAG_NO
					   ,@C_PHY_INV_SUPPLY_TAG_NO
					   ,@USER_CODE
					   ,GETDATE()
					   ,@WAREHOUSE_LOCATION_ID
					   ,@CURRENT_WAREHOUSE_LOCATION_ID
					   ,@LAST_INVENTORY_ACTIVITY_TYPE_CODE
					   ,@LAST_INVENTORY_CREATED_BY
					   ,@LAST_INVENTORY_CREATION_DATE)

		  SET @COUNT_ROWS_UPDATED = @COUNT_ROWS_UPDATED + 1;

		  IF (@CURRENT_WAREHOUSE_LOCATION_ID <> @WAREHOUSE_LOCATION_ID)
		    SET @COUNT_ROWS_CHANGE_LOCATION = @COUNT_ROWS_CHANGE_LOCATION + 1;

		  END		  
		END;
	 
	  
		FETCH CUR_1 INTO @C_PHY_INV_TAG_NO, 
	                     @C_PHY_INV_SKID_NUMBER, 
	                     @C_PHY_INV_SUPPLY_TAG_NO,
	                     @C_PHY_INV_TAG_TYPE, 
	                     @C_PHY_INV_BAY, 
	                     @C_PHY_INV_ROW,
	                     @WAREHOUSE_LOCATION_ID,
	                     @TAG_STATUS,
						 @C_PHY_INV_ZONE_ID;
	END; 
	CLOSE CUR_1; 
	DEALLOCATE CUR_1; 
 
    SELECT TAG_NO, 
		   SKID_NUMBER, 
		   SUPPLY_TAG_NO,
		   MESSAGE,
		   INVENTORY_TYPE,
		   CREATED_BY,
		   CREATION_DATE
	  FROM PHYSICAL_INVENTORY_UPDATE (NOLOCK)
	  WHERE MESSAGE IS NOT NULL
		AND ((@ZONE_ID = 0 AND ZONE_ID IS NULL) OR (@ZONE_ID <> 0 AND ZONE_ID = @ZONE_ID)) 
		AND (PLANT_ID = @PLANT_ID)  
		AND (INVENTORY_TYPE = @INV_TYPE OR @INV_TYPE = 'A')
	  ORDER BY TAG_NO, CREATION_DATE DESC 
END TRY 

BEGIN CATCH 
  
  IF CURSOR_STATUS('variable','CUR_1') > 0 
  BEGIN 
    CLOSE CUR_1 
    DEALLOCATE CUR_1 
  END 
  DECLARE @ERRMSG NVARCHAR(4000), @ERRSEVERITY INT 
  SELECT @ERRMSG = ERROR_MESSAGE(), 
         @ERRSEVERITY = ERROR_SEVERITY() 
  RAISERROR(@ERRMSG, @ERRSEVERITY, 1) 
  RETURN @ERRSEVERITY; 
END CATCH
GO
/*
Changeset: 5715
Comment:   ST66500
Committer: CLARKSTEEL\bobbior
Creation Date: 08/07/2016 04:16:52 p.m.
*/

IF EXISTS(SELECT 1 FROM SYSOBJECTS  WHERE NAME = 'SPU_SALES_ORDER_DETAIL_QUANTITY_UPDATE' AND TYPE = 'P')
  DROP PROCEDURE dbo.SPU_SALES_ORDER_DETAIL_QUANTITY_UPDATE
GO

CREATE PROCEDURE DBO.SPU_SALES_ORDER_DETAIL_QUANTITY_UPDATE 
( 
	@SALES_ORDER_DETAIL_ID INTEGER, 
	@UPDATE_TYPE VARCHAR(3), 
	@QUANTITY_DELTA INTEGER, 
	@USER_CODE VARCHAR(20),
	@UPDATE_SOURCE VARCHAR(100),
	@SO_EVENT_TYPE_CODE VARCHAR(20) = NULL,
	@SO_EVENT_DESCRIPTION_ARGS dbo.ARRAY_TABLE READONLY,
	@SOD_EVENT_ID BIGINT = NULL OUTPUT,
	@SOD_CLO_EVENT_ID BIGINT = NULL OUTPUT,
	@SO_CLO_EVENT_ID BIGINT = NULL OUTPUT
) 
AS  
BEGIN TRY 

--NOTE: NOLOCK is excluded, not apply to this SP.

 
  DECLARE @ERR_MSG VARCHAR(255); 
   
  DECLARE @QUANTITY INTEGER; 
  DECLARE @QUANTITY_INVOICED INTEGER; 
  DECLARE @CUSTOMER_ID INTEGER; 
  DECLARE @AMOUNT_BILLED DECIMAL(19, 2); 
  DECLARE @NEW_CREDIT DECIMAL(19, 2); 
  DECLARE @SKID_UNIT_PRICE DECIMAL(19, 8); 
  DECLARE @DETAIL_STATUS_ORDER_NO INTEGER; 
  DECLARE @CFC_STATUS_ORDER_NO INTEGER; 
  DECLARE @CREDIT_ACTION CHAR(1); 
  DECLARE @CURRENT_DATE DATETIME; 
  DECLARE @LOG_PARAMS VARCHAR(255); 
  DECLARE @SALES_ORDER_NO VARCHAR(20); 
  DECLARE @SOD_TYPE_CODE CHAR(3);
  
  DECLARE @AR_CUSTOMER_GROUP_ID INTEGER;
  
  DECLARE @SO_NUMBER VARCHAR(20);
  DECLARE @SOD_LINE INTEGER;
  DECLARE @SOD_QUANTITY_PRODUCED INTEGER;
  DECLARE @SOD_QUANTITY_NOT_PRODUCED INTEGER;
  DECLARE @SOD_QUANTITY_SHIPPED INTEGER;
  DECLARE @CLOSE_QTY_PCT DECIMAL(19, 2);  
   
  SET @CURRENT_DATE = GETDATE(); 

  --NOTE: NOLOCK is excluded, not apply to this select.
  SELECT @CLOSE_QTY_PCT = SOT.CLOSE_QTY_PCT
    FROM SALES_ORDER_DETAIL SOD		  
	JOIN SALES_ORDER SO ON SO.SO_ID = SOD.SO_ID
	JOIN SALES_ORDER_TYPE SOT ON SOT.SALES_ORDER_TYPE_CODE = SO.SALES_ORDER_TYPE_CODE
   WHERE SOD.SO_DETAIL_ID = @SALES_ORDER_DETAIL_ID;   
   
  IF (@UPDATE_TYPE = 'CR')   
  BEGIN
    UPDATE SALES_ORDER_DETAIL 
    SET QUANTITY_NOT_PRODUCED = 0,
    QUANTITY_PRODUCED = 0,
    QUANTITY_SHIPPED = 0,
    QUANTITY_INVOICED = 0
    WHERE SO_DETAIL_ID = @SALES_ORDER_DETAIL_ID; 
  END
  ELSE
  BEGIN
  
	DECLARE @OLD_VALUES TABLE 
	(
		QUANTITY_NOT_PRODUCED INT,
		QUANTITY_PRODUCED INT,
		QUANTITY_SHIPPED INT,
		QUANTITY_INVOICED INT
	);

	DECLARE @NEW_VALUES TABLE 
	(
		QUANTITY_NOT_PRODUCED INT,
		QUANTITY_PRODUCED INT,
		QUANTITY_SHIPPED INT,
		QUANTITY_INVOICED INT
	);

	--NOTE: NOLOCK is excluded, not apply to this select.
	INSERT INTO @OLD_VALUES SELECT QUANTITY_NOT_PRODUCED, QUANTITY_PRODUCED, QUANTITY_SHIPPED, QUANTITY_INVOICED 
	                          FROM dbo.SALES_ORDER_DETAIL WHERE SO_DETAIL_ID = @SALES_ORDER_DETAIL_ID;
	
	  IF (@UPDATE_TYPE = 'NP') 
	  BEGIN 
		  
		IF (@CLOSE_QTY_PCT <> 1)
		BEGIN
		  --// ONLY FOR TOLL SHIPMENTS =======================================================================
		  UPDATE SALES_ORDER_DETAIL 
		     SET QUANTITY_NOT_PRODUCED = QUANTITY_NOT_PRODUCED + @QUANTITY_DELTA 
		  OUTPUT Inserted.QUANTITY_NOT_PRODUCED INTO @NEW_VALUES (QUANTITY_NOT_PRODUCED)
		   WHERE SO_DETAIL_ID = @SALES_ORDER_DETAIL_ID 
		     AND (@QUANTITY_DELTA >= 0 OR (@QUANTITY_DELTA < 0 AND QUANTITY_NOT_PRODUCED + @QUANTITY_DELTA >= 0))
		     AND (((@QUANTITY_DELTA + QUANTITY_NOT_PRODUCED + QUANTITY_PRODUCED + QUANTITY_SHIPPED) / (2 - @CLOSE_QTY_PCT)) <= QUANTITY);
		END
		ELSE
		BEGIN
		  UPDATE SALES_ORDER_DETAIL 
		     SET QUANTITY_NOT_PRODUCED = QUANTITY_NOT_PRODUCED + @QUANTITY_DELTA 
		  OUTPUT Inserted.QUANTITY_NOT_PRODUCED INTO @NEW_VALUES (QUANTITY_NOT_PRODUCED)
		   WHERE SO_DETAIL_ID = @SALES_ORDER_DETAIL_ID 
		     AND (@QUANTITY_DELTA >= 0 OR (@QUANTITY_DELTA < 0 AND QUANTITY_NOT_PRODUCED + @QUANTITY_DELTA >= 0));
		END
	   
		IF (@@ROWCOUNT = 0) 
		BEGIN
		  --NOTE: NOLOCK is excluded, not apply to this select.
		  SELECT @SO_NUMBER = SO.SO_NUMBER, 
				 @SOD_LINE = SOD.LINE,
				 @SOD_QUANTITY_NOT_PRODUCED = SOD.QUANTITY_NOT_PRODUCED	         
			FROM SALES_ORDER_DETAIL SOD
			JOIN SALES_ORDER SO ON SO.SO_ID = SOD.SO_ID
		   WHERE SOD.SO_DETAIL_ID = @SALES_ORDER_DETAIL_ID;
	       
		  ---Quantity Not Produced can not be below zero
		  SET @ERR_MSG = DBO.FN_GET_MSG_BY_NAME(DBO.FN_LANG_USER_CODE(@USER_CODE),
						 'TRAFFIC_QUANTITY_NOT_PRODUCED',@SO_NUMBER, @SOD_LINE, @QUANTITY_DELTA, @SOD_QUANTITY_NOT_PRODUCED);
		  RAISERROR(@ERR_MSG, 16, 1); 
		  RETURN -1; 
		END; 
	  END; 
	   
	  IF (@UPDATE_TYPE = 'PR') 
	  BEGIN
	    IF (@CLOSE_QTY_PCT <> 1)
		BEGIN
		    --// ONLY FOR TOLL SHIPMENTS =======================================================================
			--NOTE: NOLOCK is excluded, not apply to this select.
			DECLARE @QUANTITY_DIFF INT;
			SELECT @QUANTITY_DIFF = @QUANTITY_DELTA - SOD.QUANTITY_NOT_PRODUCED
			FROM SALES_ORDER_DETAIL SOD
			WHERE SOD.SO_DETAIL_ID = @SALES_ORDER_DETAIL_ID;

			IF @QUANTITY_DIFF > 0
			BEGIN
				EXEC SPU_SALES_ORDER_DETAIL_QUANTITY_UPDATE @SALES_ORDER_DETAIL_ID,
			  												   'NP', --Not Produce
															   @QUANTITY_DIFF,
															   @USER_CODE,
															   'TOLL_PROCESSING_SHIPMENT';
			END;
		END;
	    
		UPDATE SALES_ORDER_DETAIL 
		SET QUANTITY_NOT_PRODUCED = QUANTITY_NOT_PRODUCED - @QUANTITY_DELTA, 
			QUANTITY_PRODUCED = QUANTITY_PRODUCED + @QUANTITY_DELTA 
		OUTPUT Inserted.QUANTITY_NOT_PRODUCED, Inserted.QUANTITY_PRODUCED INTO @NEW_VALUES (QUANTITY_NOT_PRODUCED, QUANTITY_PRODUCED)
		WHERE SO_DETAIL_ID = @SALES_ORDER_DETAIL_ID 
		  AND ( @QUANTITY_DELTA = 0 
			OR (@QUANTITY_DELTA > 0 AND QUANTITY_NOT_PRODUCED - @QUANTITY_DELTA >= 0) 
			OR (@QUANTITY_DELTA < 0 AND QUANTITY_PRODUCED + @QUANTITY_DELTA >= 0)); 
	   
		IF (@@ROWCOUNT = 0) 
		BEGIN
		  --NOTE: NOLOCK is excluded, not apply to this select.
		  SELECT @SO_NUMBER = SO.SO_NUMBER, 
				 @SOD_LINE = SOD.LINE,
				 @SOD_QUANTITY_NOT_PRODUCED = SOD.QUANTITY_NOT_PRODUCED	         
			FROM SALES_ORDER_DETAIL SOD
			JOIN SALES_ORDER SO ON SO.SO_ID = SOD.SO_ID
		   WHERE SOD.SO_DETAIL_ID = @SALES_ORDER_DETAIL_ID;
	       
		  ---Quantity Not Produced can not be below zero
		  SET @ERR_MSG = DBO.FN_GET_MSG_BY_NAME(DBO.FN_LANG_USER_CODE(@USER_CODE),
						 'TRAFFIC_QUANTITY_NOT_PRODUCED',@SO_NUMBER, @SOD_LINE, @QUANTITY_DELTA, @SOD_QUANTITY_NOT_PRODUCED);
		  RAISERROR(@ERR_MSG, 16, 1); 
		  RETURN -1; 
		END; 
	  END; 
	   
	  IF (@UPDATE_TYPE = 'SH') 
	  BEGIN 
		UPDATE SALES_ORDER_DETAIL 
		SET QUANTITY_PRODUCED = QUANTITY_PRODUCED - @QUANTITY_DELTA, 
			QUANTITY_SHIPPED = QUANTITY_SHIPPED + @QUANTITY_DELTA 
		OUTPUT Inserted.QUANTITY_PRODUCED, Inserted.QUANTITY_SHIPPED INTO @NEW_VALUES (QUANTITY_PRODUCED, QUANTITY_SHIPPED)
		WHERE SO_DETAIL_ID = @SALES_ORDER_DETAIL_ID 
		  AND ( @QUANTITY_DELTA = 0 
			OR (@QUANTITY_DELTA > 0 AND QUANTITY_PRODUCED - @QUANTITY_DELTA >= 0) 
			OR (@QUANTITY_DELTA < 0 AND QUANTITY_SHIPPED + @QUANTITY_DELTA >= 0)); 
	   
		IF (@@ROWCOUNT = 0) 
		BEGIN 
		  --NOTE: NOLOCK is excluded, not apply to this select.
		  SELECT @SO_NUMBER = SO.SO_NUMBER, 
				 @SOD_LINE = SOD.LINE,
				 @SOD_QUANTITY_PRODUCED = SOD.QUANTITY_PRODUCED	         
			FROM SALES_ORDER_DETAIL SOD
			JOIN SALES_ORDER SO ON SO.SO_ID = SOD.SO_ID
		   WHERE SOD.SO_DETAIL_ID = @SALES_ORDER_DETAIL_ID;
	      
		  ---Quantity Produced or Shipped can not be below zero
		  SET @ERR_MSG = DBO.FN_GET_MSG_BY_NAME(DBO.FN_LANG_USER_CODE(@USER_CODE),
			  'TRAFFIC_QUANTITY_PRODUCED_SHIPPED',@SO_NUMBER, @SOD_LINE, @QUANTITY_DELTA, @SOD_QUANTITY_PRODUCED);
		  RAISERROR(@ERR_MSG, 16, 1); 
		  RETURN -1; 
		END;    
	  END; 
	  
	  IF (@UPDATE_TYPE = 'IN') 
	  BEGIN 
		UPDATE SALES_ORDER_DETAIL 
		SET QUANTITY_INVOICED = QUANTITY_INVOICED + @QUANTITY_DELTA 
		OUTPUT Inserted.QUANTITY_INVOICED INTO @NEW_VALUES (QUANTITY_INVOICED)
		WHERE SO_DETAIL_ID = @SALES_ORDER_DETAIL_ID 
		  AND ( @QUANTITY_DELTA = 0  
			OR (@QUANTITY_DELTA > 0 AND QUANTITY_SHIPPED - @QUANTITY_DELTA >= 0) 
			OR (@QUANTITY_DELTA < 0 AND QUANTITY_INVOICED + @QUANTITY_DELTA >= 0)); 
	   
		IF (@@ROWCOUNT = 0) 
		BEGIN 
		  --NOTE: NOLOCK is excluded, not apply to this select.
		  SELECT @SO_NUMBER = SO.SO_NUMBER, 
				 @SOD_LINE = SOD.LINE,
				 @SOD_QUANTITY_SHIPPED = SOD.QUANTITY_SHIPPED	         
			FROM SALES_ORDER_DETAIL SOD
			JOIN SALES_ORDER SO ON SO.SO_ID = SOD.SO_ID
		   WHERE SOD.SO_DETAIL_ID = @SALES_ORDER_DETAIL_ID;
	      
		  ---Quantity Invoiced can not be below zero
		  SET @ERR_MSG = DBO.FN_GET_MSG_BY_NAME(DBO.FN_LANG_USER_CODE(@USER_CODE),
			  'TRAFFIC_QUANTITY_INVOICED',@SO_NUMBER, @SOD_LINE, @QUANTITY_DELTA, @SOD_QUANTITY_SHIPPED);
		  RAISERROR(@ERR_MSG, 16, 1); 
		  RETURN -1; 
		END;    
	   
	    
	  END; 
	  	    
	IF @SO_EVENT_TYPE_CODE IS NULL 
		SET @SO_EVENT_TYPE_CODE = 'OE_MOD';
    
	DECLARE @SOD_EVENT_CHANGES ENTITY_EVENT_CHANGE_TABLE;
    --NOTE: NOLOCK is excluded, not apply to this select.
	INSERT INTO @SOD_EVENT_CHANGES SELECT 'QUANTITY_NOT_PRODUCED', 'Qty Not Produced', (SELECT QUANTITY_NOT_PRODUCED FROM @OLD_VALUES), (SELECT QUANTITY_NOT_PRODUCED FROM @NEW_VALUES) WHERE (SELECT QUANTITY_NOT_PRODUCED FROM @OLD_VALUES) <> (SELECT QUANTITY_NOT_PRODUCED FROM @NEW_VALUES);
	INSERT INTO @SOD_EVENT_CHANGES SELECT 'QUANTITY_PRODUCED', 'Qty Produced', (SELECT QUANTITY_PRODUCED FROM @OLD_VALUES), (SELECT QUANTITY_PRODUCED FROM @NEW_VALUES) WHERE (SELECT QUANTITY_PRODUCED FROM @OLD_VALUES) <> (SELECT QUANTITY_PRODUCED FROM @NEW_VALUES);
	INSERT INTO @SOD_EVENT_CHANGES SELECT 'QUANTITY_SHIPPED', 'Qty Shipped', (SELECT QUANTITY_SHIPPED FROM @OLD_VALUES), (SELECT QUANTITY_SHIPPED FROM @NEW_VALUES) WHERE (SELECT QUANTITY_SHIPPED FROM @OLD_VALUES) <> (SELECT QUANTITY_SHIPPED FROM @NEW_VALUES);
	INSERT INTO @SOD_EVENT_CHANGES SELECT 'QUANTITY_INVOICED', 'Qty Invoiced', (SELECT QUANTITY_INVOICED FROM @OLD_VALUES), (SELECT QUANTITY_INVOICED FROM @NEW_VALUES) WHERE (SELECT QUANTITY_INVOICED FROM @OLD_VALUES) <> (SELECT QUANTITY_INVOICED FROM @NEW_VALUES);
    
	EXEC dbo.SPU_SALES_ORDER_DETAIL_EVENT_LOG_ADD_ENTRY 
		@SO_EVENT_TYPE_CODE,
		@SALES_ORDER_DETAIL_ID,
		@USER_CODE,
		@SO_EVENT_DESCRIPTION_ARGS,
		@SOD_EVENT_CHANGES,        
		@SOD_EVENT_ID = @SOD_EVENT_ID OUTPUT;  
		
    EXEC SPU_SALES_ORDER_DETAIL_COUNTER_LOG_INSERT @SALES_ORDER_DETAIL_ID, @UPDATE_TYPE, @QUANTITY_DELTA, @USER_CODE, @UPDATE_SOURCE;
  
	IF (@UPDATE_TYPE = 'IN') 
	BEGIN
	    --NOTE: NOLOCK is excluded, not apply to this select.
		SELECT @SALES_ORDER_NO = SO.SO_NUMBER, 
			   @CUSTOMER_ID = SO.CUSTOMER_ID, 
			   @QUANTITY =  SOD.QUANTITY, 
			   @QUANTITY_INVOICED = SOD.QUANTITY_INVOICED, 
			   @SKID_UNIT_PRICE = SOD.SKID_UNIT_PRICE, 
			   @DETAIL_STATUS_ORDER_NO = SODST.ORDER_NO,
			   @SOD_TYPE_CODE = SOD.SALES_ORDER_DETAIL_TYPE_CODE
		FROM SALES_ORDER_DETAIL SOD 
		  JOIN SALES_ORDER SO ON SOD.SO_ID = SO.SO_ID 
		  JOIN SALES_ORDER_DETAIL_STATUS_TYPE SODST ON SOD.STATUS = SODST.STATUS_TYPE_CODE 
		WHERE SOD.SO_DETAIL_ID = @SALES_ORDER_DETAIL_ID; 
	   
	   --NOTE: NOLOCK is excluded, not apply to this select.
		SET @CFC_STATUS_ORDER_NO = (SELECT ORDER_NO FROM SALES_ORDER_DETAIL_STATUS_TYPE WHERE STATUS_TYPE_CODE = 'CFC'); 
		SET @CFC_STATUS_ORDER_NO = COALESCE(@CFC_STATUS_ORDER_NO, 0); 
	    
		IF (@DETAIL_STATUS_ORDER_NO >= @CFC_STATUS_ORDER_NO AND @SOD_TYPE_CODE <> 'DSH')  
		BEGIN
		  --NOTE: NOLOCK is excluded, not apply to this select.
		  SET @AR_CUSTOMER_GROUP_ID = (SELECT COALESCE(AR_CUSTOMER_GROUP_ID, 0) FROM CUSTOMER_INFO WHERE PARTNER_ID = @CUSTOMER_ID);
	      
		  SET @AMOUNT_BILLED = ROUND(CONVERT(DECIMAL(19,2), @SKID_UNIT_PRICE * @QUANTITY_DELTA), 2); 
		  SET @CREDIT_ACTION = '+'; 
		  SET @LOG_PARAMS = 'SO_NUMBER:' + @SALES_ORDER_NO + 
						   ';SO_DETAIL_ID:' + CONVERT(VARCHAR(15), @SALES_ORDER_DETAIL_ID);
	                       
		  IF (@AR_CUSTOMER_GROUP_ID = 0)
			EXECUTE SPU_CUSTOMER_UPDATE_AVAILABLE_CREDIT @CUSTOMER_ID, @AMOUNT_BILLED, @CREDIT_ACTION, 
														 @USER_CODE, 'SOD_INVOICE', @LOG_PARAMS, @NEW_CREDIT OUTPUT;
		  ELSE
			EXECUTE SPU_CUSTOMER_GROUP_UPDATE_AVAILABLE_CREDIT @CUSTOMER_ID, @AR_CUSTOMER_GROUP_ID, @AMOUNT_BILLED, 
															   @CREDIT_ACTION, @USER_CODE, 'SOD_INVOICE', @LOG_PARAMS, 
															   @NEW_CREDIT OUTPUT;
		END;				

		IF ((@QUANTITY_INVOICED / @CLOSE_QTY_PCT) >= @QUANTITY)
		BEGIN
		  EXECUTE SPU_SALES_ORDER_DETAIL_STATUS_INSERT @SALES_ORDER_DETAIL_ID, 'CLO', '', @USER_CODE, @CURRENT_DATE, 'OE_CLO', @SOD_EVENT_ID = @SOD_CLO_EVENT_ID OUTPUT, @SO_EVENT_ID = @SO_CLO_EVENT_ID OUTPUT;
	      
		  --Remove MRP weight
		  EXECUTE SPU_MRP_DETAIL_DELETE @SALES_ORDER_DETAIL_ID; 
		END		
	END; 
  END;
 
END TRY 
BEGIN CATCH     
  DECLARE @ERRMSG NVARCHAR(4000), @ERRSEVERITY INT 
  SELECT @ERRMSG = ERROR_MESSAGE(), 
         @ERRSEVERITY = ERROR_SEVERITY() 
  RAISERROR(@ERRMSG, @ERRSEVERITY, 1) 
  RETURN @ERRSEVERITY; 
END CATCH 


GO
/*
Changeset: 5715
Comment:   ST66500
Committer: CLARKSTEEL\bobbior
Creation Date: 08/07/2016 04:16:52 p.m.
*/

IF OBJECT_ID ('TRI_SO_PO_INFO') IS NOT NULL
	DROP TRIGGER TRI_SO_PO_INFO
GO 

CREATE TRIGGER DBO.TRI_SO_PO_INFO ON SALES_ORDER 
AFTER UPDATE
AS
BEGIN TRY

--NOTE: NOLOCK is excluded, not apply to this Trigger.

DECLARE @NEW_SO_ID INT
DECLARE @NEW_PRODUCTION_PLANT_ID INT
DECLARE @NEW_UPDATED_BY VARCHAR(20)
DECLARE @NEW_UPDATE_DATE DATETIME

DECLARE @NEW_EXTERNAL_REFERENCE VARCHAR(50)
DECLARE @OLD_EXTERNAL_REFERENCE VARCHAR(50)

DECLARE @NEW_EXTERNAL_REFERENCE_DATE DATETIME
DECLARE @OLD_EXTERNAL_REFERENCE_DATE DATETIME


IF (UPDATE(EXTERNAL_REFERENCE) OR UPDATE(EXTERNAL_REFERENCE_DATE))
BEGIN

--NOTE: NOLOCK is excluded, not apply to this select.
DECLARE CUR_INSERTED CURSOR FAST_FORWARD FOR 
 SELECT EXTERNAL_REFERENCE, EXTERNAL_REFERENCE_DATE, SO_ID, UPDATED_BY, UPDATE_DATE, PRODUCTION_PLANT_ID
   FROM INSERTED

OPEN CUR_INSERTED

FETCH CUR_INSERTED INTO @NEW_EXTERNAL_REFERENCE, @NEW_EXTERNAL_REFERENCE_DATE, @NEW_SO_ID, @NEW_UPDATED_BY, 
                        @NEW_UPDATE_DATE, @NEW_PRODUCTION_PLANT_ID

WHILE @@FETCH_STATUS = 0
BEGIN
      
	  --NOTE: NOLOCK is excluded, not apply to this select.
	  SELECT @OLD_EXTERNAL_REFERENCE = EXTERNAL_REFERENCE FROM DELETED WHERE SO_ID = @NEW_SO_ID
	  SELECT @OLD_EXTERNAL_REFERENCE_DATE = EXTERNAL_REFERENCE_DATE FROM DELETED WHERE SO_ID = @NEW_SO_ID
	
		IF (@NEW_EXTERNAL_REFERENCE <> @OLD_EXTERNAL_REFERENCE)
		BEGIN	   	    
		    --NOTE: NOLOCK is excluded, not apply to this select.
			UPDATE BL_ORDER
			   SET SO_EXTERNAL_REFERENCE = @NEW_EXTERNAL_REFERENCE,
				   UPDATED_BY = @NEW_UPDATED_BY,
				   UPDATE_DATE = @NEW_UPDATE_DATE
			 WHERE BL_ORDER_ID IN (SELECT BL_ORDER_ID FROM INVOICE WHERE SO_ID = @NEW_SO_ID AND INVOICE_NUMBER LIKE 'TEMP%')
		END;
		
		IF (@NEW_EXTERNAL_REFERENCE_DATE <> @OLD_EXTERNAL_REFERENCE_DATE)
		BEGIN
		    --NOTE: NOLOCK is excluded, not apply to this select.
			UPDATE BL_ORDER
			   SET SO_EXTERNAL_REFERENCE_DATE = @NEW_EXTERNAL_REFERENCE_DATE,
				   UPDATED_BY = @NEW_UPDATED_BY,
				   UPDATE_DATE = @NEW_UPDATE_DATE
			 WHERE BL_ORDER_ID IN (SELECT BL_ORDER_ID FROM INVOICE WHERE SO_ID = @NEW_SO_ID AND INVOICE_NUMBER LIKE 'TEMP%')
		END;	

	FETCH CUR_INSERTED INTO @NEW_EXTERNAL_REFERENCE, @NEW_EXTERNAL_REFERENCE_DATE, @NEW_SO_ID, @NEW_UPDATED_BY, 
                            @NEW_UPDATE_DATE, @NEW_PRODUCTION_PLANT_ID
END
    CLOSE CUR_INSERTED
    DEALLOCATE CUR_INSERTED

END


END TRY
BEGIN CATCH
  IF CURSOR_STATUS('variable','CUR_INSERTED') > 0
  BEGIN
    CLOSE CUR_INSERTED
    DEALLOCATE CUR_INSERTED
  END
    
  DECLARE @ERRMSG NVARCHAR(4000), @ERRSEVERITY INT
  SELECT @ERRMSG = ERROR_MESSAGE(), @ERRSEVERITY = ERROR_SEVERITY()
  RAISERROR(@ERRMSG, @ERRSEVERITY, 1)
END CATCH

GO 
